/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:07:31 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.io.ObjectStreamConstants;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.print.attribute.standard.RequestingUserName;
import javax.swing.JComponent;
import javax.swing.WindowConstants;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.text.JTextComponent;
import javax.swing.text.View;



import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(minute0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       
//       byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
//       assertEquals((byte)114, byte0);
//       
//       System.setCurrentTimeMillis((long) byte0);
//       Minute minute1 = new Minute();
//       assertNotSame(minute1, minute0);
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(0, minute1.getMinute());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertNotNull(minute1);
//       assertFalse(minute1.equals((Object)minute0));
//       
//       double double0 = Double.NaN;
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute1, double0);
//       assertNotSame(minute1, minute0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(0, minute1.getMinute());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertNotNull(timeSeriesDataItem0);
//       assertFalse(minute1.equals((Object)minute0));
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertNotSame(minute1, minute0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(0, minute1.getMinute());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertFalse(minute1.equals((Object)minute0));
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertNotNull(week0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertNull(timeSeriesDataItem0);
//       
//       MockDate mockDate0 = new MockDate((long) int0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       Year year0 = new Year((Date) mockDate0);
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(1970, year0.getYear());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals("1970", year0.toString());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(year0);
//       
//       Week week1 = new Week(int0, year0);
//       assertNotSame(week1, week0);
//       assertEquals(1970, week1.getYearValue());
//       assertEquals(0, week1.getWeek());
//       assertEquals((-259200001L), week1.getLastMillisecond());
//       assertEquals((-561600001L), week1.getMiddleMillisecond());
//       assertEquals(104410L, week1.getSerialIndex());
//       assertEquals((-864000000L), week1.getFirstMillisecond());
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(1970, year0.getYear());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals("1970", year0.toString());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       
//       double double0 = (-377.59673);
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) week1, double0, boolean0);
//       assertNotSame(week1, week0);
//       assertEquals(1970, week1.getYearValue());
//       assertEquals(0, week1.getWeek());
//       assertEquals((-259200001L), week1.getLastMillisecond());
//       assertEquals((-561600001L), week1.getMiddleMillisecond());
//       assertEquals(104410L, week1.getSerialIndex());
//       assertEquals((-864000000L), week1.getFirstMillisecond());
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(1970, year0.getYear());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals("1970", year0.toString());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals((-377.59673), timeSeries0.getMinY(), 0.01D);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertFalse(week1.equals((Object)week0));
//       
//       timeSeries0.delete((RegularTimePeriod) week0);
//       assertNotSame(week0, week1);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-377.59673), timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals((-377.59673), timeSeries0.getMinY(), 0.01D);
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertFalse(week0.equals((Object)week1));
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = (-8);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       Year year0 = new Year(int0);
//       assertEquals("-8", year0.toString());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.previous();
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertEquals("-9", year1.toString());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals(-9, year1.getYear());
//       assertEquals((-62451388800000L), year1.getFirstMillisecond());
//       assertEquals((-9L), year1.getSerialIndex());
//       assertEquals((-61820236800001L), year1.getLastMillisecond());
//       assertEquals("-8", year0.toString());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0, boolean0);
//       assertNotSame(year1, year0);
//       assertNotSame(year0, year1);
//       assertEquals("-9", year1.toString());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals(-9, year1.getYear());
//       assertEquals((-62451388800000L), year1.getFirstMillisecond());
//       assertEquals((-9L), year1.getSerialIndex());
//       assertEquals((-61820236800001L), year1.getLastMillisecond());
//       assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("-8", year0.toString());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(year0.equals((Object)year1));
//       
//       timeSeries0.add((RegularTimePeriod) year0, (Number) int0, boolean0);
//       assertNotSame(year0, year1);
//       assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("-8", year0.toString());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertFalse(year0.equals((Object)year1));
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(1246707700, int1);
//       assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       int int0 = (-8);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Year year0 = new Year(int0);
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals("-8", year0.toString());
//       assertNotNull(year0);
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) year0, (Number) int0, boolean0);
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(-8, year0.getYear());
//       assertEquals((-62419852800000L), year0.getFirstMillisecond());
//       assertEquals((-8L), year0.getSerialIndex());
//       assertEquals((-61851772800001L), year0.getLastMillisecond());
//       assertEquals("-8", year0.toString());
//       assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(2053363567, int1);
//       assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertEquals(359695462, int1);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       long long0 = 0L;
//       SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
//       assertEquals(0L, simpleTimePeriod0.getStartMillis());
//       assertEquals(0L, simpleTimePeriod0.getEndMillis());
//       assertNotNull(simpleTimePeriod0);
//       
//       MockDate mockDate0 = (MockDate)simpleTimePeriod0.getStart();
//       assertEquals(0L, simpleTimePeriod0.getStartMillis());
//       assertEquals(0L, simpleTimePeriod0.getEndMillis());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertEquals(0L, simpleTimePeriod0.getStartMillis());
//       assertEquals(0L, simpleTimePeriod0.getEndMillis());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(43199999L, day0.getMiddleMillisecond());
//       assertEquals(0L, day0.getFirstMillisecond());
//       assertEquals(1970, day0.getYear());
//       assertEquals(1, day0.getDayOfMonth());
//       assertEquals(86399999L, day0.getLastMillisecond());
//       assertEquals(25569L, day0.getSerialIndex());
//       assertEquals(1, day0.getMonth());
//       assertNotNull(day0);
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
//       assertEquals(0L, simpleTimePeriod0.getStartMillis());
//       assertEquals(0L, simpleTimePeriod0.getEndMillis());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(43199999L, day0.getMiddleMillisecond());
//       assertEquals(0L, day0.getFirstMillisecond());
//       assertEquals(1970, day0.getYear());
//       assertEquals(1, day0.getDayOfMonth());
//       assertEquals(86399999L, day0.getLastMillisecond());
//       assertEquals(25569L, day0.getSerialIndex());
//       assertEquals(1, day0.getMonth());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-957837036), int0);
//       assertEquals(0L, simpleTimePeriod0.getStartMillis());
//       assertEquals(0L, simpleTimePeriod0.getEndMillis());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(43199999L, day0.getMiddleMillisecond());
//       assertEquals(0L, day0.getFirstMillisecond());
//       assertEquals(1970, day0.getYear());
//       assertEquals(1, day0.getDayOfMonth());
//       assertEquals(86399999L, day0.getLastMillisecond());
//       assertEquals(25569L, day0.getSerialIndex());
//       assertEquals(1, day0.getMonth());
//   }

  @Test
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      
      Number number0 = null;
      boolean boolean0 = true;
      timeSeries1.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(hour0);
//       
//       String string0 = "]v#|;hm\"/&T]6Om1Q";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       String string1 = "liSdnj<?TZyfX;";
//       assertNotSame(string1, string0);
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0, string0, string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("liSdnj<?TZyfX;", timeSeries1.getRangeDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNotNull(timeSeries1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(boolean0);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("liSdnj<?TZyfX;", timeSeries1.getRangeDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "v#|;hm\"/&T]6Om1Q";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
      assertEquals("v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      assertNotNull(basicRootPaneUI0);
      
      boolean boolean0 = timeSeries0.equals((Object) basicRootPaneUI0);
      assertFalse(boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeriesCollection0);
      
      timeSeriesCollection0.removeSeries(timeSeries0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 2725;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week(int0, int0);
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertNotNull(week0);
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertNotNull(mockDate0);
//       
//       int int1 = 0;
//       String string0 = "Range";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int0, int0, int0, int0, int1, int0, int1, int0, int0);
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(simpleTimeZone0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Locale locale0 = null;
//       RequestingUserName requestingUserName0 = new RequestingUserName(string0, locale0);
//       assertNotNull(requestingUserName0);
//       
//       Locale locale1 = requestingUserName0.getLocale();
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNotNull(locale1);
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0, locale1);
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNotNull(quarter0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("2723", year0.toString());
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNotNull(year0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Year year1 = (Year)year0.previous();
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("2723", year0.toString());
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(23730796800000L, year1.getFirstMillisecond());
//       assertEquals(23746564799999L, year1.getMiddleMillisecond());
//       assertEquals("2722", year1.toString());
//       assertEquals(2722, year1.getYear());
//       assertEquals(2722L, year1.getSerialIndex());
//       assertEquals(23762332799999L, year1.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNotNull(year1);
//       assertFalse(int1 == int0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(int0 == int1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertEquals(2725.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2725.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("2723", year0.toString());
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(23730796800000L, year1.getFirstMillisecond());
//       assertEquals(23746564799999L, year1.getMiddleMillisecond());
//       assertEquals("2722", year1.toString());
//       assertEquals(2722, year1.getYear());
//       assertEquals(2722L, year1.getSerialIndex());
//       assertEquals(23762332799999L, year1.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int1 == int0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(int0 == int1);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(year0, year1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2725.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2725.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("2723", year0.toString());
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2725.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2725.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("", locale1.getISO3Country());
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(int1 == int0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       int int0 = 2725;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week(int0, int0);
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertNotNull(week0);
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertNotNull(mockDate0);
//       
//       int int1 = 0;
//       String string0 = "Range";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int1, int1, int0, int0, int1, int0, int1, int0, int0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertNotNull(simpleTimeZone0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Locale locale0 = null;
//       RequestingUserName requestingUserName0 = new RequestingUserName(string0, locale0);
//       assertNotNull(requestingUserName0);
//       
//       Locale locale1 = requestingUserName0.getLocale();
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertNotNull(locale1);
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0, locale1);
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertNotNull(quarter0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals("2723", year0.toString());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertNotNull(year0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Year year1 = new Year(int0);
//       assertNotSame(year1, year0);
//       assertEquals(2725, year1.getYear());
//       assertEquals(2725L, year1.getSerialIndex());
//       assertEquals("2725", year1.toString());
//       assertEquals(23857027199999L, year1.getLastMillisecond());
//       assertEquals(23841259199999L, year1.getMiddleMillisecond());
//       assertEquals(23825491200000L, year1.getFirstMillisecond());
//       assertNotNull(year1);
//       assertFalse(int0 == int1);
//       assertFalse(year1.equals((Object)year0));
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year1, year0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2725.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2725.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2725, year1.getYear());
//       assertEquals(2725L, year1.getSerialIndex());
//       assertEquals("2725", year1.toString());
//       assertEquals(23857027199999L, year1.getLastMillisecond());
//       assertEquals(23841259199999L, year1.getMiddleMillisecond());
//       assertEquals(23825491200000L, year1.getFirstMillisecond());
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//       assertFalse(year1.equals((Object)year0));
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
//       assertNotSame(year0, year1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(23793868799999L, year0.getLastMillisecond());
//       assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       assertEquals(2723L, year0.getSerialIndex());
//       assertEquals(2723, year0.getYear());
//       assertEquals(23762332800000L, year0.getFirstMillisecond());
//       assertEquals("2723", year0.toString());
//       assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2725.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2725.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("Range", simpleTimeZone0.getID());
//       assertEquals(2725, week0.getYearValue());
//       assertEquals(144334L, week0.getSerialIndex());
//       assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       assertEquals(23770195199999L, week0.getLastMillisecond());
//       assertEquals(-91, week0.getWeek());
//       assertEquals(23769590400000L, week0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2725.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2725.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2, quarter0.getQuarter());
//       assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       assertEquals(2723, quarter0.getYearValue());
//       assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       assertEquals(10894L, quarter0.getSerialIndex());
//       assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       assertEquals("fr", locale1.toString());
//       assertEquals("", locale1.getVariant());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getCountry());
//       assertNotNull(timeSeries1);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 0L;
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertNotNull(simpleTimePeriod0);
      
      MockDate mockDate0 = (MockDate)simpleTimePeriod0.getStart();
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertNotNull(mockDate0);
      
      Day day0 = new Day((Date) mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(25569L, day0.getSerialIndex());
      assertEquals(86399999L, day0.getLastMillisecond());
      assertEquals(1970, day0.getYear());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(43199999L, day0.getMiddleMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(0L, day0.getFirstMillisecond());
      assertNotNull(day0);
      
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(25569L, day0.getSerialIndex());
      assertEquals(86399999L, day0.getLastMillisecond());
      assertEquals(1970, day0.getYear());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(43199999L, day0.getMiddleMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(0L, day0.getFirstMillisecond());
      assertNotNull(timeSeries0);
      
      Day day1 = (Day)day0.previous();
      assertNotSame(day0, day1);
      assertNotSame(day1, day0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, simpleTimePeriod0.getStartMillis());
      assertEquals(0L, simpleTimePeriod0.getEndMillis());
      assertEquals(25569L, day0.getSerialIndex());
      assertEquals(86399999L, day0.getLastMillisecond());
      assertEquals(1970, day0.getYear());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(43199999L, day0.getMiddleMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(0L, day0.getFirstMillisecond());
      assertEquals(31, day1.getDayOfMonth());
      assertEquals((-86400000L), day1.getFirstMillisecond());
      assertEquals(1969, day1.getYear());
      assertEquals(12, day1.getMonth());
      assertEquals(25568L, day1.getSerialIndex());
      assertEquals((-1L), day1.getLastMillisecond());
      assertEquals((-43200001L), day1.getMiddleMillisecond());
      assertNotNull(day1);
      assertFalse(day0.equals((Object)day1));
      assertFalse(day1.equals((Object)day0));
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertNotNull(quarter0);
//       
//       Year year0 = quarter0.getYear();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       Class<LinkedList> class0 = LinkedList.class;
//       MockDate mockDate0 = (MockDate)year0.getStart();
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertNull(regularTimePeriod0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) quarter0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'start' argument.
//          //
//       }
//   }

  @Test
  public void test15()  throws Throwable  {
      String string0 = JTextComponent.DEFAULT_KEYMAP;
      assertEquals("default", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("default", timeSeries0.getDomainDescription());
      assertEquals("default", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      int int0 = 664;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("default", timeSeries1.getRangeDescription());
      assertEquals("default", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("default", timeSeries0.getDomainDescription());
      assertEquals("default", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      int int0 = (-1860);
      int int1 = 917;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-6);
      String string0 = "java.util.TimeZone";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("java.util.TimeZone", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("java.util.TimeZone", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = WindowConstants.DO_NOTHING_ON_CLOSE;
      assertEquals(0, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertNotNull(week0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeriesDataItem0);
//       
//       MockDate mockDate0 = new MockDate((long) int0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       Year year0 = new Year((Date) mockDate0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals("1970", year0.toString());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals(1970, year0.getYear());
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       Week week1 = new Week(int0, year0);
//       assertNotSame(week1, week0);
//       assertEquals(0, week1.getWeek());
//       assertEquals(1970, week1.getYearValue());
//       assertEquals((-561600001L), week1.getMiddleMillisecond());
//       assertEquals((-864000000L), week1.getFirstMillisecond());
//       assertEquals((-259200001L), week1.getLastMillisecond());
//       assertEquals(104410L, week1.getSerialIndex());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals("1970", year0.toString());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals(1970, year0.getYear());
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertNotNull(week1);
//       assertFalse(week1.equals((Object)week0));
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) week1, (double) int0, boolean0);
//       assertNotSame(week1, week0);
//       assertEquals(0, week1.getWeek());
//       assertEquals(1970, week1.getYearValue());
//       assertEquals((-561600001L), week1.getMiddleMillisecond());
//       assertEquals((-864000000L), week1.getFirstMillisecond());
//       assertEquals((-259200001L), week1.getLastMillisecond());
//       assertEquals(104410L, week1.getSerialIndex());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("1970", year0.toString());
//       assertEquals(1970L, year0.getSerialIndex());
//       assertEquals(1970, year0.getYear());
//       assertEquals(0L, year0.getFirstMillisecond());
//       assertEquals(15767999999L, year0.getMiddleMillisecond());
//       assertEquals(31535999999L, year0.getLastMillisecond());
//       assertFalse(week1.equals((Object)week0));
//       
//       timeSeries0.delete((RegularTimePeriod) week0);
//       assertNotSame(week0, week1);
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertFalse(week0.equals((Object)week1));
//   }

  @Test
  public void test20()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Number number0 = null;
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      
      timeSeries0.delete((RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
  }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertNotNull(hour0);
//       
//       String string0 = "yv\\~enb/[`Rww}";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.delete((RegularTimePeriod) hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//   }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertNotNull(hour0);
//       
//       long long0 = hour0.getLastMillisecond();
//       assertEquals(1392411599999L, long0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       
//       String string0 = "yv\\~enb/[`Rww}";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) long0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertNotNull(timeSeriesDataItem0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1.392411599999E12, timeSeries0.getMinY(), 0.01D);
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertEquals(1.392411599999E12, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertNull(timeSeriesDataItem1);
//       
//       timeSeries0.clear();
//       assertNull(timeSeries0.getDescription());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//   }

  @Test
  public void test23()  throws Throwable  {
      int int0 = ImageObserver.ALLBITS;
      assertEquals(32, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       int int0 = 2725;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       Week week0 = new Week(int0, int0);
//       //  // Unstable assertion: assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(-91, week0.getWeek());
//       //  // Unstable assertion: assertEquals(23769590400000L, week0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(144334L, week0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23770195199999L, week0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2725, week0.getYearValue());
//       //  // Unstable assertion: assertNotNull(week0);
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       //  // Unstable assertion: assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(-91, week0.getWeek());
//       //  // Unstable assertion: assertEquals(23769590400000L, week0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(144334L, week0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23770195199999L, week0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2725, week0.getYearValue());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       int int1 = 0;
//       String string0 = "Range";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int0, int1, int0, int0, int0, int0, int1, int0, int1, int0, int0);
//       //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
//       //  // Unstable assertion: assertEquals("Range", simpleTimeZone0.getID());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
//       //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
//       //  // Unstable assertion: assertNotNull(simpleTimeZone0);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       
//       Locale locale0 = null;
//       RequestingUserName requestingUserName0 = new RequestingUserName(string0, locale0);
//       //  // Unstable assertion: assertNotNull(requestingUserName0);
//       
//       Locale locale1 = requestingUserName0.getLocale();
//       //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale1.getCountry());
//       //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale1.getVariant());
//       //  // Unstable assertion: assertEquals("fr", locale1.toString());
//       //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
//       //  // Unstable assertion: assertNotNull(locale1);
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0, locale1);
//       //  // Unstable assertion: assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale1.getCountry());
//       //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale1.getVariant());
//       //  // Unstable assertion: assertEquals("fr", locale1.toString());
//       //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
//       //  // Unstable assertion: assertEquals(2723, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(10894L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
//       //  // Unstable assertion: assertEquals("Range", simpleTimeZone0.getID());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
//       //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
//       //  // Unstable assertion: assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(-91, week0.getWeek());
//       //  // Unstable assertion: assertEquals(23769590400000L, week0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(144334L, week0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23770195199999L, week0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2725, week0.getYearValue());
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       
//       Year year0 = quarter0.getYear();
//       //  // Unstable assertion: assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale1.getCountry());
//       //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale1.getVariant());
//       //  // Unstable assertion: assertEquals("fr", locale1.toString());
//       //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
//       //  // Unstable assertion: assertEquals(2723L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23762332800000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2723, year0.getYear());
//       //  // Unstable assertion: assertEquals(23793868799999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2723", year0.toString());
//       //  // Unstable assertion: assertEquals(2723, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(10894L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
//       //  // Unstable assertion: assertEquals("Range", simpleTimeZone0.getID());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
//       //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
//       //  // Unstable assertion: assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(-91, week0.getWeek());
//       //  // Unstable assertion: assertEquals(23769590400000L, week0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(144334L, week0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23770195199999L, week0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2725, week0.getYearValue());
//       //  // Unstable assertion: assertNotNull(year0);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
//       //  // Unstable assertion: assertEquals("Sun Apr 01 23:59:59 GMT 2723", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
//       //  // Unstable assertion: assertEquals("", locale1.getCountry());
//       //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
//       //  // Unstable assertion: assertEquals("", locale1.getVariant());
//       //  // Unstable assertion: assertEquals("fr", locale1.toString());
//       //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2725.0, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(2725.0, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2723L, year0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23762332800000L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2723, year0.getYear());
//       //  // Unstable assertion: assertEquals(23793868799999L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(23778100799999L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2723", year0.toString());
//       //  // Unstable assertion: assertEquals(2723, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(2, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(23774039999999L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(23777971199999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(23770108800000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(10894L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=Range,offset=0,dstSavings=2725,useDaylight=false,startYear=0,startMode=0,startMonth=2725,startDay=0,startDayOfWeek=2725,startTime=2725,startTimeMode=2725,endMode=0,endMonth=2725,endDay=0,endDayOfWeek=2725,endTime=0,endTimeMode=2725]", simpleTimeZone0.toString());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
//       //  // Unstable assertion: assertEquals("Range", simpleTimeZone0.getID());
//       //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
//       //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
//       //  // Unstable assertion: assertEquals(23769892799999L, week0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(-91, week0.getWeek());
//       //  // Unstable assertion: assertEquals(23769590400000L, week0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(144334L, week0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(23770195199999L, week0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2725, week0.getYearValue());
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertFalse(int0 == int1);
//   }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(int0);
      assertEquals(-8, year0.getYear());
      assertEquals("-8", year0.toString());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-8L), year0.getSerialIndex());
      assertNotNull(year0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (Number) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(-8, year0.getYear());
      assertEquals("-8", year0.toString());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-8L), year0.getSerialIndex());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test26()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      long long0 = 2765L;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals(32L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Minute minute0 = new Minute();
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(minute0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(32L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       System.setCurrentTimeMillis((long) int0);
//       Minute minute1 = new Minute();
//       assertNotSame(minute1, minute0);
//       assertEquals(0, minute1.getMinute());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertNotNull(minute1);
//       assertFalse(minute1.equals((Object)minute0));
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute1, (double) int0);
//       assertNotSame(minute1, minute0);
//       assertEquals(0, minute1.getMinute());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNotNull(timeSeriesDataItem0);
//       assertFalse(minute1.equals((Object)minute0));
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertNotSame(minute1, minute0);
//       assertEquals(0, minute1.getMinute());
//       assertEquals(0L, minute1.getFirstMillisecond());
//       assertEquals(0, minute1.getHourValue());
//       assertEquals(59999L, minute1.getLastMillisecond());
//       assertEquals(36819360L, minute1.getSerialIndex());
//       assertEquals(29999L, minute1.getMiddleMillisecond());
//       assertEquals(32L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertFalse(minute1.equals((Object)minute0));
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertNotNull(hour0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       byte byte0 = ObjectStreamConstants.TC_CLASSDESC;
//       assertEquals((byte)114, byte0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) byte0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test29()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Number number0 = null;
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      double double0 = 1.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, double0);
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem0.isSelected());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(int0);
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals(-8, year0.getYear());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals("-8", year0.toString());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      assertEquals("-9", year1.toString());
      assertEquals((-62451388800000L), year1.getFirstMillisecond());
      assertEquals(-9, year1.getYear());
      assertEquals((-9L), year1.getSerialIndex());
      assertEquals((-61820236800001L), year1.getLastMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals(-8, year0.getYear());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals("-8", year0.toString());
      assertNotNull(year1);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year1, (Number) int0, boolean0);
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      assertEquals("-9", year1.toString());
      assertEquals((-62451388800000L), year1.getFirstMillisecond());
      assertEquals(-9, year1.getYear());
      assertEquals((-9L), year1.getSerialIndex());
      assertEquals((-61820236800001L), year1.getLastMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals(-8, year0.getYear());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals("-8", year0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      
      int int1 = (-3);
      timeSeries0.add((RegularTimePeriod) year0, (Number) int1, boolean0);
      assertNotSame(year0, year1);
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals(-8, year0.getYear());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals("-8", year0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-3.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertFalse(year0.equals((Object)year1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      assertNotSame(year0, year1);
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals(-8, year0.getYear());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals("-8", year0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test31()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      Number number0 = null;
      timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, number0);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem0.isSelected());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       String string0 = JTextComponent.DEFAULT_KEYMAP;
//       assertEquals("default", string0);
//       assertNotNull(string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 664;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(664.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(664.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertNotNull(quarter0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
//          //
//       }
//   }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Month month0 = new Month();
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertNotNull(month0);
//       
//       String string0 = month0.toString();
//       //  // Unstable assertion: assertEquals("February 2014", string0);
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertNotNull(string0);
//       
//       MockDate mockDate0 = (MockDate)month0.getStart();
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) mockDate0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       boolean boolean0 = false;
//       Number number0 = null;
//       timeSeries1.add((RegularTimePeriod) month0, number0, boolean0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
//       //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries2.getDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNotNull(timeSeries2);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
//       //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertNotNull(hour0);
//       
//       long long0 = hour0.getLastMillisecond();
//       assertEquals(1392411599999L, long0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       
//       String string0 = "]v#|;hm\"/&T]6Om1Q";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) long0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1.392411599999E12, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1.392411599999E12, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1.392411599999E12, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries1.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test36()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      Number number0 = null;
      timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      int int0 = 0;
      timeSeries0.update(int0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       String string0 = JTextComponent.DEFAULT_KEYMAP;
//       assertEquals("default", string0);
//       assertNotNull(string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       int int0 = 664;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(664.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(664.0, timeSeries0.getMaxY(), 0.01D);
//       
//       int int1 = View.ForcedBreakWeight;
//       assertEquals(3000, int1);
//       assertFalse(int1 == int0);
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int1);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(3000.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(3000.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(minute0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) minute0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // There is no existing value for the specified 'period'.
//          //
//       }
//   }

  @Test
  public void test39()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      String string0 = month0.toString();
      //  // Unstable assertion: assertEquals("February 2014", string0);
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      Number number0 = null;
      timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      timeSeries0.update((RegularTimePeriod) month0, number0);
      //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("February 2014", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertNotNull(hour0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test41()  throws Throwable  {
      int int0 = (-8);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals("-8", year0.toString());
      assertEquals(-8, year0.getYear());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      assertNotNull(year0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) year0, (Number) int0, boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-8.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-8.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-8L), year0.getSerialIndex());
      assertEquals((-62419852800000L), year0.getFirstMillisecond());
      assertEquals("-8", year0.toString());
      assertEquals(-8, year0.getYear());
      assertEquals((-61851772800001L), year0.getLastMillisecond());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) year0, (Number) int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period -8 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test42() {}
//   @Test
//   public void test42()  throws Throwable  {
//       Month month0 = new Month();
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertNotNull(month0);
//       
//       MockDate mockDate0 = (MockDate)month0.getStart();
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertNotNull(mockDate0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0);
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertNotNull(timeSeries0);
//       
//       boolean boolean0 = false;
//       int int0 = Integer.MAX_VALUE;
//       Week week0 = new Week(int0, int0);
//       assertEquals((-54L), week0.getSerialIndex());
//       assertEquals((-62200310400000L), week0.getFirstMillisecond());
//       assertEquals(-1, week0.getYearValue());
//       assertEquals((-62199705600001L), week0.getLastMillisecond());
//       assertEquals((-62200008000001L), week0.getMiddleMillisecond());
//       assertEquals(-1, week0.getWeek());
//       assertNotNull(week0);
//       
//       timeSeries0.add((RegularTimePeriod) week0, (double) int0, boolean0);
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertEquals((-54L), week0.getSerialIndex());
//       assertEquals((-62200310400000L), week0.getFirstMillisecond());
//       assertEquals(-1, week0.getYearValue());
//       assertEquals((-62199705600001L), week0.getLastMillisecond());
//       assertEquals((-62200008000001L), week0.getMiddleMillisecond());
//       assertEquals(-1, week0.getWeek());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2.147483647E9, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2.147483647E9, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2, month0.getMonth());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) month0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Month, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
//          //
//       }
//   }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNotNull(hour0);
//       
//       String string0 = "rG";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("rG", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("rG", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("rG", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("rG", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(minute0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       
//       String string0 = "SerialDate.eekInMonthToString(): invalid code.";
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("SerialDate.eekInMonthToString(): invalid code.", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("SerialDate.eekInMonthToString(): invalid code.", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       
//       Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("SerialDate.eekInMonthToString(): invalid code.", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("SerialDate.eekInMonthToString(): invalid code.", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(collection0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(minute0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(collection0);
//   }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertNotNull(minute0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNotNull(collection0);
//   }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       String string0 = JTextComponent.DEFAULT_KEYMAP;
//       assertEquals("default", string0);
//       assertNotNull(string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 664;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(664.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(664.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(664.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(664.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("default", timeSeries0.getDomainDescription());
//       assertEquals("default", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeriesDataItem0);
//   }

  @Test
  public void test48()  throws Throwable  {
      int int0 = (-6);
      String string0 = "java.util.TimeZone";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("java.util.TimeZone", timeSeries0.getDomainDescription());
      assertEquals("java.util.TimeZone", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year();
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(year0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("java.util.TimeZone", timeSeries0.getDomainDescription());
      assertEquals("java.util.TimeZone", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNotNull(hour0);
//       
//       String string0 = "]v#|;hm\"/&T]6Om1Q";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       long long0 = (-1829L);
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemAge(long0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'periods' argument.
//          //
//       }
//   }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-484);
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertNotNull(hour0);
//       
//       timeSeries0.add((RegularTimePeriod) minute0, (Number) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) hour0);
//       assertEquals(32, (int)integer0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//   }

  @Test
  public void test52()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53() {}
//   @Test
//   public void test53()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertNotNull(hour0);
//       
//       String string0 = "yv\\~enb/[`Rww}";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       List list0 = timeSeries0.getItems();
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("yv\\~enb/[`Rww}", timeSeries0.getRangeDescription());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       assertNotNull(list0);
//   }

  @Test
  public void test54() {}
//   @Test
//   public void test54()  throws Throwable  {
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertNotNull(week0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) week0);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(7, week0.getWeek());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeriesDataItem1);
//   }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(class0);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = (-484);
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       Month month0 = new Month();
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertNotNull(month0);
//       
//       MockDate mockDate0 = (MockDate)month0.getStart();
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       assertNotNull(timeSeries0);
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals(Double.NaN, double0, 0.01D);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//   }

  @Test
  public void test58() {}
//   @Test
//   public void test58()  throws Throwable  {
//       int int0 = ImageObserver.ALLBITS;
//       assertEquals(32, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Minute minute0 = new Minute();
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(minute0);
//       
//       Hour hour0 = minute0.getHour();
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertNotNull(hour0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(32.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(32.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeriesDataItem0);
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test
  public void test59() {}
//   @Test
//   public void test59()  throws Throwable  {
//       int int0 = JComponent.WHEN_FOCUSED;
//       assertEquals(0, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//       assertNotNull(week0);
//       
//       timeSeries0.add((RegularTimePeriod) week0, (double) int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(2014, week0.getYearValue());
//   }

  @Test
  public void test60()  throws Throwable  {
      int int0 = ImageObserver.ALLBITS;
      assertEquals(32, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test61() {}
//   @Test
//   public void test61()  throws Throwable  {
//       Month month0 = new Month();
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(month0);
//       
//       MockDate mockDate0 = (MockDate)month0.getStart();
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0);
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) month0);
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertNull(number0);
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) month0, number0, boolean0);
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       
//       long long0 = 2765L;
//       timeSeries0.removeAgedItems(long0, boolean0);
//       //  // Unstable assertion: assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
//       //  // Unstable assertion: assertEquals(1393631999999L, month0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, month0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1391212800000L, month0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//   }

  @Test
  public void test62()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = "VMq";
      timeSeries0.setDomainDescription(string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("VMq", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test63() {}
//   @Test
//   public void test63()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNotNull(hour0);
//       
//       long long0 = hour0.getLastMillisecond();
//       assertEquals(1392411599999L, long0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       String string0 = "]v#|;hm\"/&T]6Om1Q";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) long0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1.392411599999E12, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1.392411599999E12, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(1.392411599999E12, timeSeries1.getMinY(), 0.01D);
//       assertEquals(1.392411599999E12, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getRangeDescription());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//   }

  @Test
  public void test64() {}
//   @Test
//   public void test64()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertNotNull(hour0);
//       
//       String string0 = "]v#|;hm\"/&T]6Om1Q";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       String string1 = timeSeries0.getRangeDescription();
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", string1);
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(string1);
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) hour0, string0, string1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getDomainDescription());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(boolean0);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries1.getDomainDescription());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//   }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "]v#|;hm\"/&T]6Om1Q";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      timeSeries0.setRangeDescription(string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("]v#|;hm\"/&T]6Om1Q", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }
}
