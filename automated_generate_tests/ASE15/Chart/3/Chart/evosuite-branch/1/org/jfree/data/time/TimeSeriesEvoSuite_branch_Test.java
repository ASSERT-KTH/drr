/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:50:22 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.accessibility.AccessibleContext;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 2515;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(int0, int0);
      assertEquals(-45, week0.getWeek());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(-45, week0.getWeek());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(2515, week1.getYearValue());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(-44, week1.getWeek());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      
      double double0 = timeSeries0.getMaxY();
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01D);
      
      timeSeries0.add((RegularTimePeriod) week0, (double) int0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(-45, week0.getWeek());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotSame(week0, week1);
      
      timeSeries0.add((RegularTimePeriod) week1, double0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(-45, week0.getWeek());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(2515, week1.getYearValue());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(-44, week1.getWeek());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 2515;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(int0, int0);
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(2515, week1.getYearValue());
      assertEquals(-44, week1.getWeek());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      assertNotNull(week1);
      
      long long0 = (-1839L);
      timeSeries0.add((RegularTimePeriod) week0, (double) int0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNotSame(week0, week1);
      
      timeSeries0.add((RegularTimePeriod) week1, (double) long0);
      assertFalse(week0.equals((Object)week1));
      assertFalse(week1.equals((Object)week0));
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals((-1839.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(2515, week1.getYearValue());
      assertEquals(-44, week1.getWeek());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertNotSame(week0, week1);
      assertNotSame(week1, week0);
      
      timeSeries0.delete((RegularTimePeriod) week0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals((-1839.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals((-1839.0), timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNotSame(week0, week1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      double double0 = Double.NaN;
      timeSeries0.setMaximumItemCount(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) week0, (Number) double0, boolean0);
      assertFalse(int0 == int1);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertNull(timeSeriesDataItem1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Number number0 = null;
      timeSeries0.update((RegularTimePeriod) year0, number0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(date0);
      
      Week week0 = new Week(date0);
      assertEquals(1582, week0.getYearValue());
      assertEquals(40, week0.getWeek());
      assertEquals((-12219336000001L), week0.getMiddleMillisecond());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219638400000L), week0.getFirstMillisecond());
      assertEquals((-12219033600001L), week0.getLastMillisecond());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(week0);
      
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(1582, week0.getYearValue());
      assertEquals(40, week0.getWeek());
      assertEquals((-12219336000001L), week0.getMiddleMillisecond());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219638400000L), week0.getFirstMillisecond());
      assertEquals((-12219033600001L), week0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.previous();
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals(-1, year1.getYear());
//       assertEquals("-1", year1.toString());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeriesDataItem0);
//       
//       timeSeries0.add((RegularTimePeriod) year1, (double) int0, boolean0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals(-1, year1.getYear());
//       assertEquals("-1", year1.toString());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertNotSame(year0, year1);
//       assertNull(timeSeriesDataItem1);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = mockGregorianCalendar0.getWeeksInWeekYear();
//       assertFalse(int1 == int0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(52, int1);
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(date0);
//       
//       Year year2 = new Year(date0);
//       assertFalse(year2.equals((Object)year1));
//       assertFalse(year2.equals((Object)year0));
//       assertEquals("1582", year2.toString());
//       assertEquals((-12227889600001L), year2.getMiddleMillisecond());
//       assertEquals((-12212553600001L), year2.getLastMillisecond());
//       assertEquals(1582L, year2.getSerialIndex());
//       assertEquals(1582, year2.getYear());
//       assertEquals((-12243225600000L), year2.getFirstMillisecond());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotSame(year2, year1);
//       assertNotSame(year2, year0);
//       assertNotNull(year2);
//       
//       timeSeries0.add((RegularTimePeriod) year2, (Number) int1);
//       assertFalse(year2.equals((Object)year1));
//       assertFalse(year2.equals((Object)year0));
//       assertFalse(year0.equals((Object)year2));
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("1582", year2.toString());
//       assertEquals((-12227889600001L), year2.getMiddleMillisecond());
//       assertEquals((-12212553600001L), year2.getLastMillisecond());
//       assertEquals(1582L, year2.getSerialIndex());
//       assertEquals(1582, year2.getYear());
//       assertEquals((-12243225600000L), year2.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(52.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNotSame(year2, year1);
//       assertNotSame(year2, year0);
//       assertNotSame(year0, year2);
//       assertNotSame(year0, year1);
//       
//       int int2 = timeSeries0.hashCode();
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(year0.equals((Object)year2));
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(52.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertNotSame(year0, year2);
//       assertNotSame(year0, year1);
//       assertEquals(1455572452, int2);
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.previous();
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals("-1", year1.toString());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertEquals(-1, year1.getYear());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeriesDataItem0);
//       
//       timeSeries0.add((RegularTimePeriod) year1, (double) int0, boolean0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals("-1", year1.toString());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertEquals(-1, year1.getYear());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotSame(year0, year1);
//       assertNull(timeSeriesDataItem1);
//       
//       int int1 = timeSeries0.hashCode();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotSame(year0, year1);
//       assertEquals((-108292022), int1);
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotNull(timeSeries0);
//       
//       timeSeries0.add((RegularTimePeriod) year0, (double) int0, boolean0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       
//       int int1 = timeSeries0.hashCode();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(1772383896, int1);
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertNotNull(year0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertNotNull(timeSeries0);
//       
//       int int1 = timeSeries0.hashCode();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals("0", year0.toString());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-235127859), int1);
//   }

  @Test
  public void test08()  throws Throwable  {
      String string0 = JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("DialogTypeChangedProperty", string0);
      
      String string1 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string1, string1);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.hashCode();
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals((-957837036), int0);
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("AccessibleVisibleData", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       int int0 = (-4);
//       Hour hour0 = new Hour();
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals((-4.0), timeSeries1.getMinY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals((-4.0), timeSeries1.getMaxY(), 0.01D);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNull(timeSeriesDataItem0);
//       
//       timeSeries1.update((RegularTimePeriod) hour0, (Number) int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals((-4.0), timeSeries1.getMinY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals((-4.0), timeSeries1.getMaxY(), 0.01D);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       timeSeries0.add((RegularTimePeriod) hour0, (double) int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals((-4.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-4.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals((-4.0), timeSeries1.getMinY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals((-4.0), timeSeries1.getMaxY(), 0.01D);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals((-4.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-4.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertFalse(boolean0);
//   }

  @Test
  public void test10()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1984L);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(date0);
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(year0);
      
      long long1 = timeSeries0.getMaximumItemAge();
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, long1);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) year0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) long1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotSame(timeSeries0, timeSeries1);
      assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(long0 == long1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582, year0.getYear());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-1954L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotNull(timeSeries0);
      
      String string0 = "Not enough valid columns where generated by query.";
      timeSeries0.setRangeDescription(string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Not enough valid columns where generated by query.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Not enough valid columns where generated by query.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 2554;
      String string0 = "u?";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("u?", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("u?", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("u?", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("u?", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
      assertNotNull(string0);
      assertEquals("AccessibleVisibleData", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-1954L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      String string0 = "Not enough valid columns where generated by query.";
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeriesDataItem1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Year year1 = new Year(date0);
      assertFalse(year1.equals((Object)year0));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("1582", year1.toString());
      assertEquals(1582, year1.getYear());
      assertEquals(1582L, year1.getSerialIndex());
      assertEquals((-12227889600001L), year1.getMiddleMillisecond());
      assertEquals((-12212553600001L), year1.getLastMillisecond());
      assertEquals((-12243225600000L), year1.getFirstMillisecond());
      assertNotSame(year1, year0);
      assertNotNull(year1);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(year1.equals((Object)year0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals("1582", year1.toString());
      assertEquals(1582, year1.getYear());
      assertEquals(1582L, year1.getSerialIndex());
      assertEquals((-12227889600001L), year1.getMiddleMillisecond());
      assertEquals((-12212553600001L), year1.getLastMillisecond());
      assertEquals((-12243225600000L), year1.getFirstMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertNotSame(year0, year1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(year1, year0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNull(timeSeriesDataItem1);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
  }

  @Test
  public void test17()  throws Throwable  {
      Class<Month> class0 = Month.class;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 0;
      String string0 = "Requires start <= end.";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("Requires start <= end.", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Requires start <= end.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Month month0 = (Month)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("Requires start <= end.", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Requires start <= end.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(month0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("Requires start <= end.", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Requires start <= end.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(timeSeries0);
      
      Month month1 = new Month((Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertTrue(month1.equals((Object)month0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, month1.getMiddleMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1393631999999L, month1.getLastMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(1391212800000L, month1.getFirstMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("Requires start <= end.", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Requires start <= end.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotSame(month1, month0);
      assertNotNull(month1);
      
      Month month2 = (Month)month1.next();
      assertTrue(month1.equals((Object)month0));
      assertFalse(month1.equals((Object)month2));
      assertFalse(month2.equals((Object)month1));
      assertFalse(month2.equals((Object)month0));
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, month1.getMiddleMillisecond());
      assertEquals(2014, month1.getYearValue());
      assertEquals(1393631999999L, month1.getLastMillisecond());
      assertEquals(24170L, month1.getSerialIndex());
      assertEquals(1391212800000L, month1.getFirstMillisecond());
      assertEquals(2, month1.getMonth());
      assertEquals(1394971199999L, month2.getMiddleMillisecond());
      assertEquals(1396310399999L, month2.getLastMillisecond());
      assertEquals(24171L, month2.getSerialIndex());
      assertEquals(1393632000000L, month2.getFirstMillisecond());
      assertEquals(3, month2.getMonth());
      assertEquals(2014, month2.getYearValue());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("Requires start <= end.", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Requires start <= end.,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotSame(month1, month2);
      assertNotSame(month1, month0);
      assertNotSame(month2, month1);
      assertNotSame(month2, month0);
      assertNotNull(month2);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month2, (RegularTimePeriod) month0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       String string0 = "r";
//       Minute minute0 = Minute.parseMinute(string0);
//       assertNull(minute0);
//       
//       int int0 = Integer.MAX_VALUE;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       Week week0 = new Week();
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertNotNull(week0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) minute0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int0, (Number) int0);
      assertEquals(false, xYDataItem0.isSelected());
      assertEquals(4.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(xYDataItem0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) xYDataItem0, string0, string0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, xYDataItem0.isSelected());
      assertEquals(4.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01D);
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotNull(timeSeries0);
      
      int int0 = 1017;
      int int1 = 461;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-2252);
      String string0 = "*,eipT9KhMI):";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("*,eipT9KhMI):", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("*,eipT9KhMI):", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       assertTrue(boolean0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotNull(timeSeries0);
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertNotNull(millisecond0);
//       
//       double double0 = (-502.103832545602);
//       timeSeries0.add((RegularTimePeriod) millisecond0, double0, boolean0);
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals((-502.103832545602), timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-502.103832545602), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Second second0 = millisecond0.getSecond();
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertNotNull(second0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) millisecond0);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals((-502.103832545602), timeSeries1.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals((-502.103832545602), timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals((-502.103832545602), timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals((-502.103832545602), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//   }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-202);
      Year year0 = new Year();
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 2515;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(int0, int0);
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(2515, week0.getYearValue());
      assertNotNull(week0);
      
      Week week1 = (Week)week0.next();
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertEquals(-44, week1.getWeek());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(2515, week1.getYearValue());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(2515, week0.getYearValue());
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      assertNotNull(week1);
      
      timeSeries0.add((RegularTimePeriod) week0, (double) int0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(2515, week0.getYearValue());
      assertNotSame(week0, week1);
      
      timeSeries0.add((RegularTimePeriod) week1, (double) int0);
      assertFalse(week1.equals((Object)week0));
      assertFalse(week0.equals((Object)week1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(-44, week1.getWeek());
      assertEquals(133251L, week1.getSerialIndex());
      assertEquals(2515, week1.getYearValue());
      assertEquals(17171524799999L, week1.getMiddleMillisecond());
      assertEquals(17171827199999L, week1.getLastMillisecond());
      assertEquals(17171222400000L, week1.getFirstMillisecond());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(2515, week0.getYearValue());
      assertNotSame(week1, week0);
      assertNotSame(week0, week1);
      
      timeSeries0.delete((RegularTimePeriod) week0);
      assertFalse(week0.equals((Object)week1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(2515.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2515.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(2515, week0.getYearValue());
      assertNotSame(week0, week1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertNotNull(timeSeries0);
      
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("AccessibleVisibleData", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       int int0 = (-4);
//       Hour hour0 = new Hour();
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertNotNull(hour0);
//       
//       timeSeries0.add((RegularTimePeriod) hour0, (double) int0);
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals((-4.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals((-4.0), timeSeries0.getMaxY(), 0.01D);
//       
//       timeSeries0.clear();
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//   }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 18;
      String string0 = "T?&J)%mZ=s}@:;a";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("T?&J)%mZ=s}@:;a", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("T?&J)%mZ=s}@:;a", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("T?&J)%mZ=s}@:;a", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("T?&J)%mZ=s}@:;a", timeSeries0.getRangeDescription());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = (-4332);
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = week0.getLastMillisecond();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1400457599999L, long0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals((-4332.0), timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-4332.0), timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals((-4332.0), timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-4332.0), timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1400457599999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106762L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1400155199999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, week0.getWeek());
      //  // Unstable assertion: assertEquals(1399852800000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(56, week0.getWeek());
      //  // Unstable assertion: assertEquals(1421625600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421927999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106798L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1422230399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(56, week0.getWeek());
      //  // Unstable assertion: assertEquals(1421625600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421927999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106798L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1422230399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = week0.getLastMillisecond();
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(56, week0.getWeek());
      //  // Unstable assertion: assertEquals(1421625600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421927999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106798L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1422230399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1422230399999L, long0);
      
      timeSeries0.add((RegularTimePeriod) week0, (double) long0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(56, week0.getWeek());
      //  // Unstable assertion: assertEquals(1421625600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421927999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106798L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1422230399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1.422230399999E12, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.422230399999E12, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(56, week0.getWeek());
      //  // Unstable assertion: assertEquals(1421625600000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421927999999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106798L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1422230399999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNull(timeSeriesDataItem0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      int int1 = mockGregorianCalendar0.getWeeksInWeekYear();
      assertFalse(int1 == int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(52, int1);
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(date0);
      
      Year year1 = new Year(date0);
      assertFalse(year1.equals((Object)year0));
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1582L, year1.getSerialIndex());
      assertEquals((-12243225600000L), year1.getFirstMillisecond());
      assertEquals((-12212553600001L), year1.getLastMillisecond());
      assertEquals("1582", year1.toString());
      assertEquals(1582, year1.getYear());
      assertEquals((-12227889600001L), year1.getMiddleMillisecond());
      assertNotSame(year1, year0);
      assertNotNull(year1);
      
      timeSeries0.add((RegularTimePeriod) year1, (Number) int1);
      assertFalse(year0.equals((Object)year1));
      assertFalse(int1 == int0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(int0 == int1);
      assertEquals(52.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(52.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1582L, year1.getSerialIndex());
      assertEquals((-12243225600000L), year1.getFirstMillisecond());
      assertEquals((-12212553600001L), year1.getLastMillisecond());
      assertEquals("1582", year1.toString());
      assertEquals(1582, year1.getYear());
      assertEquals((-12227889600001L), year1.getMiddleMillisecond());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-202);
      Year year0 = new Year();
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      assertFalse(int0 == int1);
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(54, week0.getWeek());
      assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test34()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals(-1, year1.getYear());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals((-1L), year1.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      assertNotNull(year1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertNotSame(year0, year1);
      assertNotNull(timeSeriesDataItem0);
      
      double double0 = (-1.0);
      timeSeries0.add((RegularTimePeriod) year1, double0, boolean0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals(-1, year1.getYear());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals((-1L), year1.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertNotSame(year0, year1);
      assertNull(timeSeriesDataItem1);
      
      TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertFalse(year0.equals((Object)year1));
      assertTrue(timeSeriesDataItem2.equals((Object)timeSeriesDataItem0));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(false, timeSeriesDataItem2.isSelected());
      assertNotSame(year0, year1);
      assertNotSame(timeSeriesDataItem2, timeSeriesDataItem0);
      assertNotNull(timeSeriesDataItem2);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      double double0 = Double.NaN;
      timeSeries0.add((RegularTimePeriod) week0, double0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertNull(timeSeries0.getDescription());
      assertEquals((-200.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-200.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeriesDataItem0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(timeSeries0);
      
      timeSeries0.add((RegularTimePeriod) week0, (double) int0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals((-200.0), timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-200.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertEquals((-200L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-200L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-200L), fixedMillisecond0.getSerialIndex());
      assertEquals((-200L), fixedMillisecond0.getFirstMillisecond());
      assertNotNull(fixedMillisecond0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
      }
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = 1293;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       Month month0 = new Month();
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertNotNull(month0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1293.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1293.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeriesDataItem0);
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'period' argument.
//          //
//       }
//   }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-202);
      Year year0 = new Year();
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(54, week0.getWeek());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(54, week0.getWeek());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertNotNull(timeSeries0);
      
      long long0 = week0.getLastMillisecond();
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(54, week0.getWeek());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertEquals(1421020799999L, long0);
      
      String string0 = null;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getRangeDescription());
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      
      boolean boolean0 = true;
      timeSeries1.add((RegularTimePeriod) year0, (Number) long0, boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(1.421020799999E12, timeSeries1.getMinY(), 0.01D);
      assertEquals(1.421020799999E12, timeSeries1.getMaxY(), 0.01D);
      assertEquals(54, week0.getWeek());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.421020799999E12, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1.421020799999E12, timeSeries0.getMinY(), 0.01D);
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(1.421020799999E12, timeSeries1.getMinY(), 0.01D);
      assertEquals(1.421020799999E12, timeSeries1.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
      assertNull(timeSeries2.getDescription());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
      assertEquals(54, week0.getWeek());
      assertEquals(1421020799999L, week0.getLastMillisecond());
      assertEquals(106796L, week0.getSerialIndex());
      assertEquals(1420416000000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1420718399999L, week0.getMiddleMillisecond());
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotNull(timeSeries2);
  }

  @Test
  public void test39()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1984L);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(date0);
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(year0);
      
      long long1 = timeSeries0.getMaximumItemAge();
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, long1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(timeSeriesDataItem0);
      
      timeSeries0.add(timeSeriesDataItem0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(long0 == long1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9.223372036854776E18, timeSeries1.getMaxY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries1.getMinY(), 0.01D);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
//       assertFalse(boolean0);
//       
//       int int0 = 0;
//       Year year0 = new Year(int0);
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertNotNull(year0);
//       
//       Year year1 = (Year)year0.previous();
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals("-1", year1.toString());
//       assertEquals(-1, year1.getYear());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeries0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNotSame(year0, year1);
//       assertNotNull(timeSeriesDataItem0);
//       
//       double double0 = (-1.0);
//       timeSeries0.add((RegularTimePeriod) year1, double0, boolean0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals((-62135812800001L), year1.getMiddleMillisecond());
//       assertEquals((-1L), year1.getSerialIndex());
//       assertEquals((-62072697600001L), year1.getLastMillisecond());
//       assertEquals("-1", year1.toString());
//       assertEquals(-1, year1.getYear());
//       assertEquals((-62198928000000L), year1.getFirstMillisecond());
//       assertEquals((-1.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertNotSame(year0, year1);
//       assertNotSame(year1, year0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertFalse(year0.equals((Object)year1));
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertNotSame(year0, year1);
//       assertNull(timeSeriesDataItem1);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       int int1 = mockGregorianCalendar0.getWeeksInWeekYear();
//       assertFalse(int1 == int0);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(52, int1);
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(date0);
//       
//       Year year2 = new Year(date0);
//       assertFalse(year2.equals((Object)year1));
//       assertFalse(year2.equals((Object)year0));
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(1582L, year2.getSerialIndex());
//       assertEquals((-12243225600000L), year2.getFirstMillisecond());
//       assertEquals("1582", year2.toString());
//       assertEquals((-12212553600001L), year2.getLastMillisecond());
//       assertEquals((-12227889600001L), year2.getMiddleMillisecond());
//       assertEquals(1582, year2.getYear());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotSame(year2, year1);
//       assertNotSame(year2, year0);
//       assertNotNull(year2);
//       
//       timeSeries0.add((RegularTimePeriod) year2, (Number) int1);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year0.equals((Object)year2));
//       assertFalse(int0 == int1);
//       assertFalse(year2.equals((Object)year1));
//       assertFalse(year2.equals((Object)year0));
//       assertFalse(int1 == int0);
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals(1582L, year2.getSerialIndex());
//       assertEquals((-12243225600000L), year2.getFirstMillisecond());
//       assertEquals("1582", year2.toString());
//       assertEquals((-12212553600001L), year2.getLastMillisecond());
//       assertEquals((-12227889600001L), year2.getMiddleMillisecond());
//       assertEquals(1582, year2.getYear());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(52.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(3, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotSame(year0, year1);
//       assertNotSame(year0, year2);
//       assertNotSame(year2, year1);
//       assertNotSame(year2, year0);
//       
//       Day day0 = new Day();
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertNotNull(day0);
//       
//       timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
//       assertFalse(year0.equals((Object)year1));
//       assertFalse(year0.equals((Object)year2));
//       assertFalse(int0 == int1);
//       assertEquals("0", year0.toString());
//       assertEquals((-62167392000000L), year0.getFirstMillisecond());
//       assertEquals(0, year0.getYear());
//       assertEquals(0L, year0.getSerialIndex());
//       assertEquals((-62135812800001L), year0.getMiddleMillisecond());
//       assertEquals((-62104233600001L), year0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(52.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(3, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertNotSame(year0, year1);
//       assertNotSame(year0, year2);
//   }

  @Test
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(-1, year1.getYear());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-1L), year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      assertNotNull(year1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotSame(year0, year1);
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotSame(year0, year1);
      assertNotNull(timeSeriesDataItem0);
      
      double double0 = (-1.0);
      timeSeries0.add((RegularTimePeriod) year1, double0, boolean0);
      assertFalse(year0.equals((Object)year1));
      assertFalse(year1.equals((Object)year0));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals((-1.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(-1, year1.getYear());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-1L), year1.getSerialIndex());
      assertNotSame(year0, year1);
      assertNotSame(year1, year0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotSame(year0, year1);
      assertNull(timeSeriesDataItem1);
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) int0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotSame(year0, year1);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertNull(timeSeriesDataItem1);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Number number0 = null;
      timeSeries0.update((RegularTimePeriod) year0, number0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(date0);
      
      Week week0 = new Week(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219638400000L), week0.getFirstMillisecond());
      assertEquals(1582, week0.getYearValue());
      assertEquals(40, week0.getWeek());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219033600001L), week0.getLastMillisecond());
      assertEquals((-12219336000001L), week0.getMiddleMillisecond());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(week0);
      
      timeSeries0.update((RegularTimePeriod) week0, number0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12219638400000L), week0.getFirstMillisecond());
      assertEquals(1582, week0.getYearValue());
      assertEquals(40, week0.getWeek());
      assertEquals(83886L, week0.getSerialIndex());
      assertEquals((-12219033600001L), week0.getLastMillisecond());
      assertEquals((-12219336000001L), week0.getMiddleMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-4332);
      Year year0 = new Year();
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(20, week0.getWeek());
      assertEquals(1400155199999L, week0.getMiddleMillisecond());
      assertEquals(1399852800000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1400457599999L, week0.getLastMillisecond());
      assertEquals(106762L, week0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(20, week0.getWeek());
      assertEquals(1400155199999L, week0.getMiddleMillisecond());
      assertEquals(1399852800000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1400457599999L, week0.getLastMillisecond());
      assertEquals(106762L, week0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(timeSeries0);
      
      long long0 = week0.getLastMillisecond();
      assertEquals(20, week0.getWeek());
      assertEquals(1400155199999L, week0.getMiddleMillisecond());
      assertEquals(1399852800000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1400457599999L, week0.getLastMillisecond());
      assertEquals(106762L, week0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1400457599999L, long0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertEquals(20, week0.getWeek());
      assertEquals(1400155199999L, week0.getMiddleMillisecond());
      assertEquals(1399852800000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1400457599999L, week0.getLastMillisecond());
      assertEquals(106762L, week0.getSerialIndex());
      assertEquals(1400457599999L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1400457599999L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1400457599999L, fixedMillisecond0.getSerialIndex());
      assertEquals(1400457599999L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertNotNull(fixedMillisecond0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1954L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(date0);
      
      Year year0 = new Year(date0);
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(year0);
      
      double double0 = timeSeries0.getMinY();
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, double0, 0.01D);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals("1582", year0.toString());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) long0);
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals((-1954.0), timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals((-1954.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertNotNull(year0);
      
      Year year1 = (Year)year0.previous();
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertEquals(-1, year1.getYear());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals((-1L), year1.getSerialIndex());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
      assertNotNull(year1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertFalse(year0.equals((Object)year1));
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotSame(year0, year1);
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertNotSame(year0, year1);
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertFalse(year0.equals((Object)year1));
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNotSame(year0, year1);
      assertNull(timeSeriesDataItem1);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) year1, (double) int0, boolean0);
      assertFalse(year1.equals((Object)year0));
      assertFalse(year0.equals((Object)year1));
      assertEquals(-1, year1.getYear());
      assertEquals((-62198928000000L), year1.getFirstMillisecond());
      assertEquals((-1L), year1.getSerialIndex());
      assertEquals((-62072697600001L), year1.getLastMillisecond());
      assertEquals((-62135812800001L), year1.getMiddleMillisecond());
      assertEquals("-1", year1.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotSame(year1, year0);
      assertNotSame(year0, year1);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals((-200.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals((-200.0), timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) year0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Year, but the TimeSeries is expecting an instance of org.jfree.data.time.Week.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 2515;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(int0, int0);
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertNotNull(week0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(week0);
      assertEquals(17170919999999L, week0.getMiddleMillisecond());
      assertEquals(17170617600000L, week0.getFirstMillisecond());
      assertEquals(-45, week0.getWeek());
      assertEquals(133250L, week0.getSerialIndex());
      assertEquals(17171222399999L, week0.getLastMillisecond());
      assertEquals(2515, week0.getYearValue());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test48() {}
//   @Test
//   public void test48()  throws Throwable  {
//       int int0 = 1293;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Month month0 = new Month();
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertNotNull(month0);
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) month0);
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(number0);
//   }

  @Test
  public void test49()  throws Throwable  {
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int0, (Number) int0);
      assertEquals(false, xYDataItem0.isSelected());
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(4.0, xYDataItem0.getXValue(), 0.01D);
      assertNotNull(xYDataItem0);
      
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) xYDataItem0, string0, string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(false, xYDataItem0.isSelected());
      assertEquals(4.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(4.0, xYDataItem0.getXValue(), 0.01D);
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("AccessibleVisibleData", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = (-4);
//       Hour hour0 = new Hour();
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals((-4.0), timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals((-4.0), timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertEquals((-4.0), timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals((-4.0), timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(collection0);
//   }

  @Test
  public void test51() {}
//   @Test
//   public void test51()  throws Throwable  {
//       String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("AccessibleVisibleData", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       int int0 = (-4);
//       Hour hour0 = new Hour();
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertNotNull(hour0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals((-4.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-4.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals((-4.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-4.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(collection0);
//   }

  @Test
  public void test52()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals((-200.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-200.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeriesDataItem0);
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(56, week0.getWeek());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals((-200.0), timeSeries0.getMinY(), 0.01D);
      assertEquals((-200.0), timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertNotNull(collection0);
  }

  @Test
  public void test53()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1984L);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(date0);
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals("1582", year0.toString());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(year0);
      
      long long1 = timeSeries0.getMaximumItemAge();
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, long1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals("1582", year0.toString());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getRawDataItem(year0);
      assertFalse(long0 == long1);
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals("1582", year0.toString());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(timeSeriesDataItem1);
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertEquals((-200L), fixedMillisecond0.getSerialIndex());
      assertEquals((-200L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-200L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-200L), fixedMillisecond0.getLastMillisecond());
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals((-200L), fixedMillisecond0.getSerialIndex());
      assertEquals((-200L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-200L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-200L), fixedMillisecond0.getLastMillisecond());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
      assertNotNull(string0);
      assertEquals("AccessibleVisibleData", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotNull(timeSeries0);
      
      int int0 = (-40);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge((long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      int int1 = (-2437);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1984L);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      Year year0 = new Year(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("1582", year0.toString());
      assertNotNull(year0);
      
      long long1 = timeSeries0.getMaximumItemAge();
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, long1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("1582", year0.toString());
      assertNull(timeSeriesDataItem0);
      
      Long long2 = (Long)timeSeries0.getValue((RegularTimePeriod) year0);
      assertFalse(long0 == long1);
      assertFalse(long2.equals((Object)long0));
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9.223372036854776E18, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals(1582, year0.getYear());
      assertEquals("1582", year0.toString());
      assertEquals(9223372036854775807L, (long)long2);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = "*pvz{%^RO";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 1293;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = 0;
      Year year0 = new Year(int0);
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertNotNull(year0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) int0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertNotNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeriesDataItem1);
      
      TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertTrue(timeSeriesDataItem2.equals((Object)timeSeriesDataItem0));
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals("0", year0.toString());
      assertEquals(0, year0.getYear());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(false, timeSeriesDataItem2.isSelected());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertNotSame(timeSeriesDataItem2, timeSeriesDataItem0);
      assertNotNull(timeSeriesDataItem2);
  }

  @Test
  public void test61()  throws Throwable  {
      long long0 = (-1984L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(class0);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = (-200);
      Year year0 = new Year();
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(year0);
      
      Week week0 = new Week(int0, year0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertNotNull(week0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      timeSeries0.add((RegularTimePeriod) week0, (double) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setMaximumItemCount(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1422230399999L, week0.getLastMillisecond());
      assertEquals(56, week0.getWeek());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106798L, week0.getSerialIndex());
      assertEquals(1421927999999L, week0.getMiddleMillisecond());
      assertEquals(1421625600000L, week0.getFirstMillisecond());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(2014, year0.getYear());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = 1293;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
  }

  @Test
  public void test64()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      long long0 = (-1954L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNotNull(timeSeries0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      Year year0 = new Year(date0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals(1582, year0.getYear());
      assertNotNull(year0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) long0);
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals(1582, year0.getYear());
      assertNotNull(timeSeriesDataItem0);
      
      double double0 = timeSeries0.getMinY();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, double0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals((-12243225600000L), year0.getFirstMillisecond());
      assertEquals((-12212553600001L), year0.getLastMillisecond());
      assertEquals((-12227889600001L), year0.getMiddleMillisecond());
      assertEquals("1582", year0.toString());
      assertEquals(1582L, year0.getSerialIndex());
      assertEquals(1582, year0.getYear());
      assertNull(timeSeriesDataItem1);
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1582 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test65()  throws Throwable  {
      long long0 = (-1984L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      String string0 = ")4s)j`j";
      timeSeries0.setDomainDescription(string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(")4s)j`j", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test66() {}
//   @Test
//   public void test66()  throws Throwable  {
//       String string0 = AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("AccessibleVisibleData", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNotNull(timeSeries0);
//       
//       Hour hour0 = new Hour();
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertNotNull(hour0);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("AccessibleVisibleData", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("AccessibleVisibleData", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("AccessibleVisibleData", timeSeries1.getDomainDescription());
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertTrue(boolean0);
//   }
}
