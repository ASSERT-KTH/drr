/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:56:29 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.color.ColorSpace;
import java.awt.event.InputEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       double double0 = (-2713.57518598);
//       SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(double0, double0, double0, double0);
//       assertNotNull(spinnerNumberModel0);
//       
//       Comparable comparable0 = spinnerNumberModel0.getMinimum();
//       assertNotNull(comparable0);
//       assertEquals((-2713.57518598), comparable0);
//       
//       String string0 = "M4MT\";/&D+GbizV";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       double double1 = timeSeries0.getMinY();
//       assertFalse(double0 == double1);
//       assertFalse(double1 == double0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, double1, 0.01D);
//       
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) minute0, double0);
//       assertFalse(double0 == double1);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-2713.57518598), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-2713.57518598), timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Minute minute1 = (Minute)minute0.previous();
//       assertNotSame(minute0, minute1);
//       assertNotSame(minute1, minute0);
//       assertNotNull(minute1);
//       assertFalse(minute0.equals((Object)minute1));
//       assertFalse(minute1.equals((Object)minute0));
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute1.getHourValue());
//       assertEquals(1392409259999L, minute1.getLastMillisecond());
//       assertEquals(1392409200000L, minute1.getFirstMillisecond());
//       assertEquals(1392409229999L, minute1.getMiddleMillisecond());
//       assertEquals(20, minute1.getMinute());
//       assertEquals(60026180L, minute1.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) minute1, double1);
//       assertNotSame(minute0, minute1);
//       assertNotSame(minute1, minute0);
//       assertFalse(minute0.equals((Object)minute1));
//       assertFalse(minute1.equals((Object)minute0));
//       assertFalse(double0 == double1);
//       assertFalse(double1 == double0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(20, minute1.getHourValue());
//       assertEquals(1392409259999L, minute1.getLastMillisecond());
//       assertEquals(1392409200000L, minute1.getFirstMillisecond());
//       assertEquals(1392409229999L, minute1.getMiddleMillisecond());
//       assertEquals(20, minute1.getMinute());
//       assertEquals(60026180L, minute1.getSerialIndex());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-2713.57518598), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-2713.57518598), timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       int int0 = 0;
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//   }

  @Test
  public void test03() {}
//   @Test
//   public void test03()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertNotNull(timeSeries0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       Number number0 = null;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, number0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(20, hour0.getHour());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//   }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 1600;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52637039999999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3637, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(14552L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52637039999999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3637, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(14552L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(52637039999999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3637L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3637, year0.getYear());
      //  // Unstable assertion: assertEquals(52605504000000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("3637", year0.toString());
      //  // Unstable assertion: assertEquals(52621271999999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      
      float float0 = Component.TOP_ALIGNMENT;
      //  // Unstable assertion: assertEquals(0.0F, float0, 0.01F);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52637039999999L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3637, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(14552L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(52637039999999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3637L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3637, year0.getYear());
      //  // Unstable assertion: assertEquals(52605504000000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("3637", year0.toString());
      //  // Unstable assertion: assertEquals(52621271999999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      
      Quarter quarter1 = new Quarter();
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotNull(quarter1);
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertEquals(8057L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter1.getQuarter());
      
      Year year1 = quarter1.getYear();
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertEquals(1388534400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter1.getQuarter());
      
      timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertEquals(1388534400000L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399999L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1396310399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534400000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter1.getQuarter());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1177809001, int1);
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 1600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals("3637", year0.toString());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(3637, year0.getYear());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals("3637", year0.toString());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(3637, year0.getYear());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int1 = timeSeries0.hashCode();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-1724313249), int1);
//   }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "51DT";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(644242652, int1);
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       double double0 = (-2713.57518598);
//       SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(double0, double0, double0, double0);
//       assertNotNull(spinnerNumberModel0);
//       
//       Comparable comparable0 = spinnerNumberModel0.getMinimum();
//       assertNotNull(comparable0);
//       assertEquals((-2713.57518598), comparable0);
//       
//       String string0 = "M4MT\";/&D+GbizV";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       timeSeries0.add((RegularTimePeriod) minute0, double0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals((-2713.57518598), timeSeries0.getMinY(), 0.01D);
//       assertEquals((-2713.57518598), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       Minute minute1 = (Minute)minute0.previous();
//       assertNotSame(minute1, minute0);
//       assertNotSame(minute0, minute1);
//       assertNotNull(minute1);
//       assertFalse(minute1.equals((Object)minute0));
//       assertFalse(minute0.equals((Object)minute1));
//       assertEquals(20, minute1.getHourValue());
//       assertEquals(1392409200000L, minute1.getFirstMillisecond());
//       assertEquals(20, minute1.getMinute());
//       assertEquals(1392409259999L, minute1.getLastMillisecond());
//       assertEquals(1392409229999L, minute1.getMiddleMillisecond());
//       assertEquals(60026180L, minute1.getSerialIndex());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute1, (RegularTimePeriod) minute1);
//       assertNotSame(minute1, minute0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(minute0, minute1);
//       assertNotNull(timeSeries1);
//       assertFalse(minute1.equals((Object)minute0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(minute0.equals((Object)minute1));
//       assertEquals(20, minute1.getHourValue());
//       assertEquals(1392409200000L, minute1.getFirstMillisecond());
//       assertEquals(20, minute1.getMinute());
//       assertEquals(1392409259999L, minute1.getLastMillisecond());
//       assertEquals(1392409229999L, minute1.getMiddleMillisecond());
//       assertEquals(60026180L, minute1.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals((-2713.57518598), timeSeries0.getMinY(), 0.01D);
//       assertEquals((-2713.57518598), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals((-2713.57518598), timeSeries1.getMaxY(), 0.01D);
//       assertEquals((-2713.57518598), timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertNotSame(minute1, minute0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(minute0, minute1);
//       assertFalse(minute1.equals((Object)minute0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(minute0.equals((Object)minute1));
//       assertEquals(20, minute1.getHourValue());
//       assertEquals(1392409200000L, minute1.getFirstMillisecond());
//       assertEquals(20, minute1.getMinute());
//       assertEquals(1392409259999L, minute1.getLastMillisecond());
//       assertEquals(1392409229999L, minute1.getMiddleMillisecond());
//       assertEquals(60026180L, minute1.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
//       assertEquals((-2713.57518598), timeSeries0.getMinY(), 0.01D);
//       assertEquals((-2713.57518598), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals((-2713.57518598), timeSeries1.getMaxY(), 0.01D);
//       assertEquals((-2713.57518598), timeSeries1.getMinY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("M4MT\";/&D+GbizV", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertFalse(boolean0);
//   }

  @Test
  public void test08()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = ":51DT";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Minute minute0 = Minute.parseMinute(string0);
      assertNull(minute0);
      
      boolean boolean0 = timeSeries0.equals((Object) minute0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 4264;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(225904L, week0.getSerialIndex());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertNotNull(timeSeries0);
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(225904L, week0.getSerialIndex());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Hour hour0 = new Hour(date0, (TimeZone) zoneInfo0);
      assertNotNull(hour0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(14, hour0.getDayOfMonth());
      assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      assertEquals(1392411599999L, hour0.getLastMillisecond());
      assertEquals(1000436L, hour0.getSerialIndex());
      assertEquals(2, hour0.getMonth());
      assertEquals(1392408000000L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      
      Hour hour1 = (Hour)hour0.next();
      assertNotSame(hour1, hour0);
      assertNotSame(hour0, hour1);
      assertNotNull(hour1);
      assertFalse(hour1.equals((Object)hour0));
      assertFalse(hour0.equals((Object)hour1));
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, hour1.getMonth());
      assertEquals(1392413399999L, hour1.getMiddleMillisecond());
      assertEquals(1392415199999L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(14, hour1.getDayOfMonth());
      assertEquals(1000437L, hour1.getSerialIndex());
      assertEquals(1392411600000L, hour1.getFirstMillisecond());
      assertEquals(2014, hour1.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(14, hour0.getDayOfMonth());
      assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      assertEquals(1392411599999L, hour0.getLastMillisecond());
      assertEquals(1000436L, hour0.getSerialIndex());
      assertEquals(2, hour0.getMonth());
      assertEquals(1392408000000L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      
      timeSeries0.add((RegularTimePeriod) hour0, (double) int0);
      assertNotSame(hour0, hour1);
      assertFalse(hour0.equals((Object)hour1));
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(225904L, week0.getSerialIndex());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(4264.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(4264.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(14, hour0.getDayOfMonth());
      assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      assertEquals(1392411599999L, hour0.getLastMillisecond());
      assertEquals(1000436L, hour0.getSerialIndex());
      assertEquals(2, hour0.getMonth());
      assertEquals(1392408000000L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour1, (RegularTimePeriod) week0);
      assertNotSame(hour1, hour0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(hour0, hour1);
      assertNotNull(timeSeries1);
      assertFalse(hour1.equals((Object)hour0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(hour0.equals((Object)hour1));
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(225904L, week0.getSerialIndex());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, hour1.getMonth());
      assertEquals(1392413399999L, hour1.getMiddleMillisecond());
      assertEquals(1392415199999L, hour1.getLastMillisecond());
      assertEquals(21, hour1.getHour());
      assertEquals(14, hour1.getDayOfMonth());
      assertEquals(1000437L, hour1.getSerialIndex());
      assertEquals(1392411600000L, hour1.getFirstMillisecond());
      assertEquals(2014, hour1.getYear());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(4264.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(4264.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(4264.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(4264.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(14, hour0.getDayOfMonth());
      assertEquals(1392409799999L, hour0.getMiddleMillisecond());
      assertEquals(1392411599999L, hour0.getLastMillisecond());
      assertEquals(1000436L, hour0.getSerialIndex());
      assertEquals(2, hour0.getMonth());
      assertEquals(1392408000000L, hour0.getFirstMillisecond());
      assertEquals(20, hour0.getHour());
      assertEquals(2014, hour0.getYear());
  }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = 2600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       
//       Hour hour0 = new Hour((Date) mockDate0);
//       assertNotNull(hour0);
//       assertEquals(86910462000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(4724, hour0.getYear());
//       assertEquals(86910465599999L, hour0.getLastMillisecond());
//       assertEquals(3, hour0.getHour());
//       assertEquals(86910463799999L, hour0.getMiddleMillisecond());
//       assertEquals(24755451L, hour0.getSerialIndex());
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) year0, (Number) int0);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2600.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(2600.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2600.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2600.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(86910462000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(4724, hour0.getYear());
//       assertEquals(86910465599999L, hour0.getLastMillisecond());
//       assertEquals(3, hour0.getHour());
//       assertEquals(86910463799999L, hour0.getMiddleMillisecond());
//       assertEquals(24755451L, hour0.getSerialIndex());
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//   }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 1975;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1975L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
//       assertEquals(1975L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getSerialIndex());
//       
//       SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateTimeInstance();
//       assertNotNull(simpleDateFormat0);
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       assertNotNull(hour0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
//       assertEquals(1, hour0.getMonth());
//       assertEquals(1799999L, hour0.getMiddleMillisecond());
//       assertEquals(0, hour0.getHour());
//       assertEquals(0L, hour0.getFirstMillisecond());
//       assertEquals(1970, hour0.getYear());
//       assertEquals(613656L, hour0.getSerialIndex());
//       assertEquals(3599999L, hour0.getLastMillisecond());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(1975L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getSerialIndex());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       Hour hour1 = (Hour)hour0.next();
//       assertNotSame(hour0, hour1);
//       assertNotSame(hour1, hour0);
//       assertNotNull(hour1);
//       assertFalse(hour0.equals((Object)hour1));
//       assertFalse(hour1.equals((Object)hour0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
//       assertEquals(1, hour0.getMonth());
//       assertEquals(1799999L, hour0.getMiddleMillisecond());
//       assertEquals(0, hour0.getHour());
//       assertEquals(0L, hour0.getFirstMillisecond());
//       assertEquals(1970, hour0.getYear());
//       assertEquals(613656L, hour0.getSerialIndex());
//       assertEquals(3599999L, hour0.getLastMillisecond());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(1, hour1.getMonth());
//       assertEquals(7199999L, hour1.getLastMillisecond());
//       assertEquals(1, hour1.getDayOfMonth());
//       assertEquals(5399999L, hour1.getMiddleMillisecond());
//       assertEquals(1970, hour1.getYear());
//       assertEquals(1, hour1.getHour());
//       assertEquals(3600000L, hour1.getFirstMillisecond());
//       assertEquals(613657L, hour1.getSerialIndex());
//       assertEquals(1975L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1975L, fixedMillisecond0.getSerialIndex());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour1, (RegularTimePeriod) hour0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      String string0 = "Column key (";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Column key (", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Column key (", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 4264;
      int int1 = (-123);
      Week week0 = new Week(int0, int1);
      assertNotNull(week0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-66102177600001L), week0.getMiddleMillisecond());
      assertEquals((-6607L), week0.getSerialIndex());
      assertEquals(-88, week0.getWeek());
      assertEquals((-66102480000000L), week0.getFirstMillisecond());
      assertEquals((-66101875200001L), week0.getLastMillisecond());
      assertEquals(-123, week0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertNotNull(timeSeries0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-66102177600001L), week0.getMiddleMillisecond());
      assertEquals((-6607L), week0.getSerialIndex());
      assertEquals(-88, week0.getWeek());
      assertEquals((-66102480000000L), week0.getFirstMillisecond());
      assertEquals((-66101875200001L), week0.getLastMillisecond());
      assertEquals(-123, week0.getYearValue());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1554);
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 1600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int1 = 0;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int1, int0);
//       assertNotNull(mockDate0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("Thu Sep 17 02:40:00 GMT 3637", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("Thu Sep 17 02:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(14551L, quarter0.getSerialIndex());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(52629091199999L, quarter0.getLastMillisecond());
//       assertEquals(52621142400000L, quarter0.getFirstMillisecond());
//       assertEquals(52625116799999L, quarter0.getMiddleMillisecond());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("3637", year0.toString());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(3637, year0.getYear());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals("Thu Sep 17 02:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(14551L, quarter0.getSerialIndex());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(52629091199999L, quarter0.getLastMillisecond());
//       assertEquals(52621142400000L, quarter0.getFirstMillisecond());
//       assertEquals(52625116799999L, quarter0.getMiddleMillisecond());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("3637", year0.toString());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(3637, year0.getYear());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals("Thu Sep 17 02:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(14551L, quarter0.getSerialIndex());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(52629091199999L, quarter0.getLastMillisecond());
//       assertEquals(52621142400000L, quarter0.getFirstMillisecond());
//       assertEquals(52625116799999L, quarter0.getMiddleMillisecond());
//       
//       Quarter quarter1 = new Quarter();
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(quarter1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       
//       Year year1 = quarter1.getYear();
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(2014, year1.getYear());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals("2014", year1.toString());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertFalse(int0 == int1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(2, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2014, year1.getYear());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals("2014", year1.toString());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries0.delete(int1, int1, boolean0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//   }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 2584;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int1 = (-30);
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = 1600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(3637, year0.getYear());
//       assertEquals("3637", year0.toString());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(3637, year0.getYear());
//       assertEquals("3637", year0.toString());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       
//       Quarter quarter1 = new Quarter();
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(quarter1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       
//       Year year1 = quarter1.getYear();
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals("2014", year1.toString());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals("2014", year1.toString());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       
//       timeSeries0.delete((RegularTimePeriod) quarter0);
//       assertNotSame(quarter0, quarter1);
//       assertFalse(quarter0.equals((Object)quarter1));
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1600;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      assertNotNull(quarter0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(14552L, quarter0.getSerialIndex());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(52637039999999L, year0.getLastMillisecond());
      assertEquals(3637, year0.getYear());
      assertEquals("3637", year0.toString());
      assertEquals(52621271999999L, year0.getMiddleMillisecond());
      assertEquals(3637L, year0.getSerialIndex());
      assertEquals(52605504000000L, year0.getFirstMillisecond());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(14552L, quarter0.getSerialIndex());
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(52637039999999L, year0.getLastMillisecond());
      assertEquals(3637, year0.getYear());
      assertEquals("3637", year0.toString());
      assertEquals(52621271999999L, year0.getMiddleMillisecond());
      assertEquals(3637L, year0.getSerialIndex());
      assertEquals(52605504000000L, year0.getFirstMillisecond());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(14552L, quarter0.getSerialIndex());
      
      timeSeries0.delete((RegularTimePeriod) quarter0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(14552L, quarter0.getSerialIndex());
  }

  @Test
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "51DT";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("51DT", timeSeries0.getRangeDescription());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
  }

  @Test
  public void test20()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = ":51DT";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double double0 = 1.0;
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timeSeries0.clear();
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "3|";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timeSeries0.clear();
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "IXAH8<N[";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double double0 = 1.0;
      timeSeries0.add((RegularTimePeriod) day0, double0);
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      long long0 = (-2780L);
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("IXAH8<N[", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      
      String string0 = "JdbcXYDataset: swallowing exception.";
      int int0 = mockDate0.getDay();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(5, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(5L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(5.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(5.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(5L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(5.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(5.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(5L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "51DT";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals("51DT", timeSeries0.getRangeDescription());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals("51DT", timeSeries0.getRangeDescription());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       int int0 = 2584;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Sep 14 11:04:00 GMT 4706", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals("Fri Sep 14 11:04:00 GMT 4706", mockDate0.toString());
//       assertEquals(4706, quarter0.getYearValue());
//       assertEquals(18827L, quarter0.getSerialIndex());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(86355417600000L, quarter0.getFirstMillisecond());
//       assertEquals(86363366399999L, quarter0.getLastMillisecond());
//       assertEquals(86359391999999L, quarter0.getMiddleMillisecond());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals("Fri Sep 14 11:04:00 GMT 4706", mockDate0.toString());
//       assertEquals(86371315199999L, year0.getLastMillisecond());
//       assertEquals(4706, year0.getYear());
//       assertEquals("4706", year0.toString());
//       assertEquals(86355547199999L, year0.getMiddleMillisecond());
//       assertEquals(86339779200000L, year0.getFirstMillisecond());
//       assertEquals(4706L, year0.getSerialIndex());
//       assertEquals(4706, quarter0.getYearValue());
//       assertEquals(18827L, quarter0.getSerialIndex());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(86355417600000L, quarter0.getFirstMillisecond());
//       assertEquals(86363366399999L, quarter0.getLastMillisecond());
//       assertEquals(86359391999999L, quarter0.getMiddleMillisecond());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Fri Sep 14 11:04:00 GMT 4706", mockDate0.toString());
//       assertEquals(86371315199999L, year0.getLastMillisecond());
//       assertEquals(4706, year0.getYear());
//       assertEquals("4706", year0.toString());
//       assertEquals(86355547199999L, year0.getMiddleMillisecond());
//       assertEquals(86339779200000L, year0.getFirstMillisecond());
//       assertEquals(4706L, year0.getSerialIndex());
//       assertEquals(4706, quarter0.getYearValue());
//       assertEquals(18827L, quarter0.getSerialIndex());
//       assertEquals(3, quarter0.getQuarter());
//       assertEquals(86355417600000L, quarter0.getFirstMillisecond());
//       assertEquals(86363366399999L, quarter0.getLastMillisecond());
//       assertEquals(86359391999999L, quarter0.getMiddleMillisecond());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       
//       Quarter quarter1 = new Quarter();
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(quarter1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2584L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       
//       Year year1 = quarter1.getYear();
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals("2014", year1.toString());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(2014, year1.getYear());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2584L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("2014", year1.toString());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(2014, year1.getYear());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//   }

  @Test
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      
      double double0 = timeSeries0.getMaxY();
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, double0, 0.01D);
      
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = 2600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       
//       Hour hour0 = new Hour((Date) mockDate0);
//       assertNotNull(hour0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       assertEquals(3, hour0.getHour());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(86910462000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(24755451L, hour0.getSerialIndex());
//       assertEquals(4724, hour0.getYear());
//       assertEquals(86910463799999L, hour0.getMiddleMillisecond());
//       assertEquals(86910465599999L, hour0.getLastMillisecond());
//       
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) year0, (Number) int0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(2600.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2600.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       assertEquals(3, hour0.getHour());
//       assertEquals(1, hour0.getDayOfMonth());
//       assertEquals(86910462000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(24755451L, hour0.getSerialIndex());
//       assertEquals(4724, hour0.getYear());
//       assertEquals(86910463799999L, hour0.getMiddleMillisecond());
//       assertEquals(86910465599999L, hour0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Hour, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
//          //
//       }
//   }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-18);
      String string0 = "pfHH*S]|cUK?M <C";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("pfHH*S]|cUK?M <C", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("pfHH*S]|cUK?M <C", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = ":51DT";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double double0 = 1.0;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(":51DT", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(":51DT", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) day0, (Number) double0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeriesDataItem0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(":51DT", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(":51DT", timeSeries1.getDomainDescription());
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries2);
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertNull(timeSeries2.getDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(true, timeSeries2.isEmpty());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(1.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(":51DT", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(":51DT", timeSeries1.getDomainDescription());
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(1, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       int int0 = 2600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(4724, quarter0.getYearValue());
//       assertEquals(86911703999999L, quarter0.getMiddleMillisecond());
//       assertEquals(86907772800000L, quarter0.getFirstMillisecond());
//       assertEquals(18897L, quarter0.getSerialIndex());
//       assertEquals(86915635199999L, quarter0.getLastMillisecond());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(4724, year0.getYear());
//       assertEquals(86907772800000L, year0.getFirstMillisecond());
//       assertEquals("4724", year0.toString());
//       assertEquals(86939395199999L, year0.getLastMillisecond());
//       assertEquals(86923583999999L, year0.getMiddleMillisecond());
//       assertEquals(4724L, year0.getSerialIndex());
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(4724, quarter0.getYearValue());
//       assertEquals(86911703999999L, quarter0.getMiddleMillisecond());
//       assertEquals(86907772800000L, quarter0.getFirstMillisecond());
//       assertEquals(18897L, quarter0.getSerialIndex());
//       assertEquals(86915635199999L, quarter0.getLastMillisecond());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(4724, year0.getYear());
//       assertEquals(86907772800000L, year0.getFirstMillisecond());
//       assertEquals("4724", year0.toString());
//       assertEquals(86939395199999L, year0.getLastMillisecond());
//       assertEquals(86923583999999L, year0.getMiddleMillisecond());
//       assertEquals(4724L, year0.getSerialIndex());
//       assertEquals("Fri Feb 01 03:20:00 GMT 4724", mockDate0.toString());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(4724, quarter0.getYearValue());
//       assertEquals(86911703999999L, quarter0.getMiddleMillisecond());
//       assertEquals(86907772800000L, quarter0.getFirstMillisecond());
//       assertEquals(18897L, quarter0.getSerialIndex());
//       assertEquals(86915635199999L, quarter0.getLastMillisecond());
//       
//       Quarter quarter1 = new Quarter();
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(quarter1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       
//       Year year1 = quarter1.getYear();
//       assertNotSame(quarter1, quarter0);
//       assertNotSame(year1, year0);
//       assertNotNull(year1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals("2014", year1.toString());
//       
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(quarter1, quarter0);
//       assertNotSame(year1, year0);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertFalse(year1.equals((Object)year0));
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(2014, year1.getYear());
//       assertEquals("2014", year1.toString());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       timeSeries0.update((RegularTimePeriod) quarter1, (Number) int0);
//       assertNotSame(quarter1, quarter0);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2600.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "r5D";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, double0, 0.01D);
      
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = ColorSpace.TYPE_GRAY;
      assertEquals(6, int0);
      
      String string0 = "Time";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(6L, fixedMillisecond0.getLastMillisecond());
      assertEquals(6L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(6L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(6L, fixedMillisecond0.getSerialIndex());
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 1600;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      assertNotNull(quarter0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(14552L, quarter0.getSerialIndex());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(14552L, quarter0.getSerialIndex());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals("3637", year0.toString());
      assertEquals(52637039999999L, year0.getLastMillisecond());
      assertEquals(52605504000000L, year0.getFirstMillisecond());
      assertEquals(3637L, year0.getSerialIndex());
      assertEquals(52621271999999L, year0.getMiddleMillisecond());
      assertEquals(3637, year0.getYear());
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(14552L, quarter0.getSerialIndex());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
      assertEquals("3637", year0.toString());
      assertEquals(52637039999999L, year0.getLastMillisecond());
      assertEquals(52605504000000L, year0.getFirstMillisecond());
      assertEquals(3637L, year0.getSerialIndex());
      assertEquals(52621271999999L, year0.getMiddleMillisecond());
      assertEquals(3637, year0.getYear());
      
      timeSeries0.update((RegularTimePeriod) quarter0, (Number) int0);
      assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
      assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(1600.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(3637, quarter0.getYearValue());
      assertEquals(52637039999999L, quarter0.getLastMillisecond());
      assertEquals(14552L, quarter0.getSerialIndex());
      assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
      assertEquals(4, quarter0.getQuarter());
      assertEquals(52629091200000L, quarter0.getFirstMillisecond());
  }

  @Test
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      String string0 = "3|";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      assertNull(timeSeries0.getDescription());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       int int0 = 1600;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       Quarter quarter0 = new Quarter((Date) mockDate0);
//       assertNotNull(quarter0);
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       Year year0 = quarter0.getYear();
//       assertNotNull(year0);
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals("3637", year0.toString());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals(3637, year0.getYear());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       
//       float float0 = Component.TOP_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(52637039999999L, year0.getLastMillisecond());
//       assertEquals("3637", year0.toString());
//       assertEquals(52621271999999L, year0.getMiddleMillisecond());
//       assertEquals(3637, year0.getYear());
//       assertEquals(3637L, year0.getSerialIndex());
//       assertEquals(52605504000000L, year0.getFirstMillisecond());
//       assertEquals(52629091200000L, quarter0.getFirstMillisecond());
//       assertEquals(3637, quarter0.getYearValue());
//       assertEquals(52633065599999L, quarter0.getMiddleMillisecond());
//       assertEquals(14552L, quarter0.getSerialIndex());
//       assertEquals(4, quarter0.getQuarter());
//       assertEquals(52637039999999L, quarter0.getLastMillisecond());
//       assertEquals("Sun Nov 22 18:40:00 GMT 3637", mockDate0.toString());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       Quarter quarter1 = new Quarter();
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(quarter1);
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       
//       Year year1 = quarter1.getYear();
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertNotNull(year1);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(2014, year1.getYear());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals("2014", year1.toString());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) year1, (Number) int0);
//       assertNotSame(year1, year0);
//       assertNotSame(quarter1, quarter0);
//       assertFalse(year1.equals((Object)year0));
//       assertFalse(quarter1.equals((Object)quarter0));
//       assertEquals(2014, year1.getYear());
//       assertEquals(1420070399999L, year1.getLastMillisecond());
//       assertEquals(1404302399999L, year1.getMiddleMillisecond());
//       assertEquals(1388534400000L, year1.getFirstMillisecond());
//       assertEquals("2014", year1.toString());
//       assertEquals(2014L, year1.getSerialIndex());
//       assertEquals(1, quarter1.getQuarter());
//       assertEquals(2014, quarter1.getYearValue());
//       assertEquals(1396310399999L, quarter1.getLastMillisecond());
//       assertEquals(1392422399999L, quarter1.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter1.getFirstMillisecond());
//       assertEquals(8057L, quarter1.getSerialIndex());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(1600.0, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1600.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 2623;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Mon Jan 24 02:43:00 GMT 4749", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      assertNotNull(quarter0);
      assertEquals(87696777600000L, quarter0.getFirstMillisecond());
      assertEquals(87704553599999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4749, quarter0.getYearValue());
      assertEquals(18997L, quarter0.getSerialIndex());
      assertEquals(87700665599999L, quarter0.getMiddleMillisecond());
      assertEquals("Mon Jan 24 02:43:00 GMT 4749", mockDate0.toString());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals(87728313599999L, year0.getLastMillisecond());
      assertEquals(87696777600000L, year0.getFirstMillisecond());
      assertEquals(87712545599999L, year0.getMiddleMillisecond());
      assertEquals(4749L, year0.getSerialIndex());
      assertEquals(4749, year0.getYear());
      assertEquals("4749", year0.toString());
      assertEquals(87696777600000L, quarter0.getFirstMillisecond());
      assertEquals(87704553599999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4749, quarter0.getYearValue());
      assertEquals(18997L, quarter0.getSerialIndex());
      assertEquals(87700665599999L, quarter0.getMiddleMillisecond());
      assertEquals("Mon Jan 24 02:43:00 GMT 4749", mockDate0.toString());
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) float0);
      assertNull(timeSeriesDataItem0);
      assertEquals(87728313599999L, year0.getLastMillisecond());
      assertEquals(87696777600000L, year0.getFirstMillisecond());
      assertEquals(87712545599999L, year0.getMiddleMillisecond());
      assertEquals(4749L, year0.getSerialIndex());
      assertEquals(4749, year0.getYear());
      assertEquals("4749", year0.toString());
      assertEquals(87696777600000L, quarter0.getFirstMillisecond());
      assertEquals(87704553599999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(4749, quarter0.getYearValue());
      assertEquals(18997L, quarter0.getSerialIndex());
      assertEquals(87700665599999L, quarter0.getMiddleMillisecond());
      assertEquals("Mon Jan 24 02:43:00 GMT 4749", mockDate0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) quarter0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
      }
  }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       float float0 = Component.LEFT_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (double) float0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       int int0 = SwingConstants.CENTER;
//       assertEquals(0, int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0);
//       assertNotNull(timeSeries0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = 0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
      assertNull(number0);
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      
      String string0 = "IXAH8<N[";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("IXAH8<N[", timeSeries0.getDomainDescription());
      assertEquals("IXAH8<N[", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      
      Minute minute0 = Minute.parseMinute(string0);
      assertNull(minute0);
      
      // Undeclared exception!
      try {
        Number number0 = timeSeries0.getValue((RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      String string0 = "3|";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      double double0 = 1.0;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("3|", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("3|", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      boolean boolean0 = false;
      timeSeries1.add((RegularTimePeriod) day0, double0, boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("3|", timeSeries1.getDomainDescription());
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("3|", timeSeries1.getRangeDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(collection0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("3|", timeSeries1.getDomainDescription());
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1.0, timeSeries1.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("3|", timeSeries1.getRangeDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
  }

  @Test
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      String string0 = "3|";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      double double0 = 1.0;
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, double0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      String string0 = "JdbcXYDataset: swallowing exception.";
      int int0 = mockDate0.getDay();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(5, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(5.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertEquals(5.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(day0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(5.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getDomainDescription());
      assertEquals(5.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("JdbcXYDataset: swallowing exception.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "51DT";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(week0);
      assertNull(timeSeriesDataItem0);
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-1554);
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      Year year0 = new Year(int0);
      assertNotNull(year0);
      assertEquals("-1554", year0.toString());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-1554L), year0.getSerialIndex());
      assertEquals((-13063766400001L), year0.getLastMillisecond());
      assertEquals((-111207859200000L), year0.getFirstMillisecond());
      assertEquals(-1554, year0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertNull(timeSeriesDataItem0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("-1554", year0.toString());
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals((-1554L), year0.getSerialIndex());
      assertEquals((-13063766400001L), year0.getLastMillisecond());
      assertEquals((-111207859200000L), year0.getFirstMillisecond());
      assertEquals(-1554, year0.getYear());
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = (-17L);
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod(long0, long0);
      assertNotNull(simpleTimePeriod0);
      assertEquals((-17L), simpleTimePeriod0.getEndMillis());
      assertEquals((-17L), simpleTimePeriod0.getStartMillis());
      
      MockDate mockDate0 = (MockDate)simpleTimePeriod0.getStart();
      assertNotNull(mockDate0);
      assertEquals((-17L), simpleTimePeriod0.getEndMillis());
      assertEquals((-17L), simpleTimePeriod0.getStartMillis());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertNotNull(simpleDateFormat0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
      assertNotNull(year0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals((-17L), simpleTimePeriod0.getEndMillis());
      assertEquals((-17L), simpleTimePeriod0.getStartMillis());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-31536000000L), year0.getFirstMillisecond());
      assertEquals((-1L), year0.getLastMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals("1969", year0.toString());
      assertEquals((-15768000001L), year0.getMiddleMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      
      String string0 = ".})Z/4N+!S[8";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(".})Z/4N+!S[8", timeSeries0.getRangeDescription());
      assertEquals(".})Z/4N+!S[8", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals((-17L), simpleTimePeriod0.getEndMillis());
      assertEquals((-17L), simpleTimePeriod0.getStartMillis());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals((-31536000000L), year0.getFirstMillisecond());
      assertEquals((-1L), year0.getLastMillisecond());
      assertEquals(1969, year0.getYear());
      assertEquals("1969", year0.toString());
      assertEquals((-15768000001L), year0.getMiddleMillisecond());
      assertEquals(1969L, year0.getSerialIndex());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "Y~";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = (-8);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = ":51DT";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      
      double double0 = 1.0;
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      
      Double double1 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      assertTrue(double1.equals((Object)double0));
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1.0, (double)double1, 0.01D);
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       // Undeclared exception!
//       try {
//         RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
//         fail("Expecting exception: ArrayIndexOutOfBoundsException");
//       
//       } catch(ArrayIndexOutOfBoundsException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       List list0 = timeSeries0.getItems();
//       assertNotNull(list0);
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      String string0 = ":51DT";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      double double0 = 1.0;
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      assertNotNull(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(":51DT", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(":51DT", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeriesDataItem0.isSelected());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 4264;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals(225904L, week0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals(225904L, week0.getSerialIndex());
      
      Class class0 = timeSeries0.getTimePeriodClass();
      assertNull(class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(72338659199999L, week0.getLastMillisecond());
      assertEquals(-88, week0.getWeek());
      assertEquals(72338356799999L, week0.getMiddleMillisecond());
      assertEquals(72338054400000L, week0.getFirstMillisecond());
      assertEquals(4264, week0.getYearValue());
      assertEquals(225904L, week0.getSerialIndex());
  }

  @Test
  public void test53()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "3|";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      double double0 = 1.0;
      timeSeries0.add((RegularTimePeriod) day0, double0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(1.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      assertEquals("3|", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("3|", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      Day day0 = new Day((Date) mockDate0);
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      
      String string0 = "51DT";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals("51DT", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("51DT", timeSeries0.getDomainDescription());
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "r5D";
      int int0 = SwingConstants.BOTTOM;
      assertEquals(3, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals("r5D", timeSeries1.getDomainDescription());
      assertEquals("r5D", timeSeries1.getRangeDescription());
      assertEquals("r5D", timeSeries0.getDomainDescription());
      assertEquals("r5D", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
  }

  @Test
  public void test56() {}
//   @Test
//   public void test56()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       float float0 = Component.LEFT_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (double) float0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//   }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 2600;
      String string0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test58()  throws Throwable  {
      double double0 = (-2713.57518598);
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(double0, double0, double0, double0);
      assertNotNull(spinnerNumberModel0);
      
      Comparable comparable0 = spinnerNumberModel0.getMinimum();
      assertNotNull(comparable0);
      assertEquals((-2713.57518598), comparable0);
      
      String string0 = "M4MT\";/&D+GbizV";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) comparable0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      int int0 = 48;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals("M4MT\";/&D+GbizV", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("M4MT\";/&D+GbizV", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals("M4MT\";/&D+GbizV", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals("M4MT\";/&D+GbizV", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("M4MT\";/&D+GbizV", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = "Y~";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.setRangeDescription(string0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Y~", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }
}
