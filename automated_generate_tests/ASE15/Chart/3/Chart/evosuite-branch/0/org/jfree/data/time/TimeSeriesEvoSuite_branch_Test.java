/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:39:24 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.JLayeredPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.SpinnerDateModel;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = "tM\\#lq L)5DFA";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond1, fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(fixedMillisecond1);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) int0);
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond1, fixedMillisecond0);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420880001L, fixedMillisecond1.getSerialIndex());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      FixedMillisecond fixedMillisecond2 = (FixedMillisecond)fixedMillisecond0.previous();
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond2);
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond2, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond2, fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(fixedMillisecond2);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond2, (Number) int0);
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond2);
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond2, fixedMillisecond1);
      //  // Unstable assertion: assertNotSame(fixedMillisecond2, fixedMillisecond0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15203420879999L, fixedMillisecond2.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int0);
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond2);
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem1.isSelected());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      //  // Unstable assertion: assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond2);
      //  // Unstable assertion: assertNotSame(fixedMillisecond0, fixedMillisecond1);
      //  // Unstable assertion: assertNull(timeSeriesDataItem2);
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(3, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeriesDataItem1.isSelected());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals((-1452064453), int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(3, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
  }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = 538;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate(timeSeriesDataItem0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNull(timeSeriesDataItem1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(538.0, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(538.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       
//       boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertFalse(boolean0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(538.0, timeSeries1.getMaxY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(538.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//   }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 519;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      String string0 = mockDate0.toString();
      assertNotNull(string0);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      String string1 = "tM\\#lq L)53DFA3";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals(2463, week0.getYearValue());
      assertEquals(15580598399999L, week0.getLastMillisecond());
      assertEquals(15579993600000L, week0.getFirstMillisecond());
      assertEquals(15580295999999L, week0.getMiddleMillisecond());
      assertEquals(130577L, week0.getSerialIndex());
      assertEquals(38, week0.getWeek());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0, string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(string0, string1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(2463, week0.getYearValue());
      assertEquals(15580598399999L, week0.getLastMillisecond());
      assertEquals(15579993600000L, week0.getFirstMillisecond());
      assertEquals(15580295999999L, week0.getMiddleMillisecond());
      assertEquals(130577L, week0.getSerialIndex());
      assertEquals(38, week0.getWeek());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(boolean0);
      assertEquals(2463, week0.getYearValue());
      assertEquals(15580598399999L, week0.getLastMillisecond());
      assertEquals(15579993600000L, week0.getFirstMillisecond());
      assertEquals(15580295999999L, week0.getMiddleMillisecond());
      assertEquals(130577L, week0.getSerialIndex());
      assertEquals(38, week0.getWeek());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
  }

  @Test
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      Action action0 = TransferHandler.getCutAction();
      assertNotNull(action0);
      
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(action0);
      assertNotNull(jRadioButtonMenuItem0);
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      
      String string0 = jRadioButtonMenuItem0.toString();
      assertNotNull(string0);
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      
      boolean boolean0 = timeSeries0.equals((Object) evoSuiteFile0);
      assertFalse(boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       timeSeries1.add(timeSeriesDataItem1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries2 = timeSeries1.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(timeSeries2, timeSeries0);
//       assertNotSame(timeSeries2, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(timeSeries2);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(0, timeSeries2.getItemCount());
//       assertEquals(true, timeSeries2.isEmpty());
//       assertEquals(519.0, timeSeries2.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries2.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries2.getRangeDescription());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertEquals(519.0, timeSeries2.getMinY(), 0.01D);
//       assertNull(timeSeries2.getDescription());
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries2.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//   }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
//   }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-3970);
      String string0 = "w}e~@iF##";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("w}e~@iF##", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=w}e~@iF##,offset=-3970,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-3970, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Apr 16 00:00:00 GMT 2413", mockDate0.toString());
      
      Quarter quarter0 = new Quarter((Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertNotNull(quarter0);
      assertEquals(2413, quarter0.getYearValue());
      assertEquals((-138276460796030L), quarter0.getFirstMillisecond());
      assertEquals((-138268598396031L), quarter0.getLastMillisecond());
      assertEquals((-138272529596031L), quarter0.getMiddleMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(9654L, quarter0.getSerialIndex());
      assertEquals("Sun Apr 16 00:00:00 GMT 2413", mockDate0.toString());
      assertEquals("w}e~@iF##", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=w}e~@iF##,offset=-3970,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-3970, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Quarter quarter1 = (Quarter)quarter0.next();
      assertFalse(quarter1.equals((Object)quarter0));
      assertFalse(quarter0.equals((Object)quarter1));
      assertNotSame(quarter1, quarter0);
      assertNotSame(quarter0, quarter1);
      assertNotNull(quarter1);
      assertEquals(14003366399999L, quarter1.getLastMillisecond());
      assertEquals(13995417600000L, quarter1.getFirstMillisecond());
      assertEquals(2413, quarter1.getYearValue());
      assertEquals(13999391999999L, quarter1.getMiddleMillisecond());
      assertEquals(3, quarter1.getQuarter());
      assertEquals(9655L, quarter1.getSerialIndex());
      assertEquals(2413, quarter0.getYearValue());
      assertEquals((-138276460796030L), quarter0.getFirstMillisecond());
      assertEquals((-138268598396031L), quarter0.getLastMillisecond());
      assertEquals((-138272529596031L), quarter0.getMiddleMillisecond());
      assertEquals(2, quarter0.getQuarter());
      assertEquals(9654L, quarter0.getSerialIndex());
      assertEquals("Sun Apr 16 00:00:00 GMT 2413", mockDate0.toString());
      assertEquals("w}e~@iF##", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=w}e~@iF##,offset=-3970,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-3970, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter1, (RegularTimePeriod) quarter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("contentAreaFilled", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("contentAreaFilled", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("contentAreaFilled", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       Second second0 = millisecond0.getSecond();
//       assertNotNull(second0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("", timeSeries1.getRangeDescription());
//       assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("", timeSeries1.getDomainDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test
  public void test09()  throws Throwable  {
      long long0 = 2L;
      String string0 = "org.jfree.data.general.DefaultKeyedValueDataset";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("org.jfree.data.general.DefaultKeyedValueDataset", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("org.jfree.data.general.DefaultKeyedValueDataset", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      int int0 = 1897;
      int int1 = 1499;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "j&'BPGG";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("j&'BPGG", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("j&'BPGG", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = (-881);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       Integer integer0 = JLayeredPane.POPUP_LAYER;
//       assertEquals(300, (int)integer0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) integer0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int0 = (-1);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertFalse(integer0.equals((Object)int0));
//       assertNull(timeSeriesDataItem0);
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-1.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       int int1 = Integer.MAX_VALUE;
//       boolean boolean0 = false;
//       timeSeries0.delete(int0, int1, boolean0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(integer0.equals((Object)int1));
//       assertFalse(integer0.equals((Object)int0));
//       assertEquals((-1.0), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals((-1.0), timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test12()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("disabledIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = 4;
      int int1 = (-37);
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       int int1 = mockDate0.getYear();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(563, int1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53(FA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
//       assertEquals(563.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//   }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       int int1 = mockDate0.getYear();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(563, int1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(563.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(563.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertFalse(int0 == int1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//   }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//   }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-1552660357), int0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) second0, (double) int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-1.552660357E9), timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals((-1.552660357E9), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       
//       timeSeries0.clear();
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//   }

  @Test
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      timeSeries0.clear();
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = mockDate0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", string0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1968130881, int1);
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int1, boolean0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
  }

  @Test
  public void test19() {}
//   @Test
//   public void test19()  throws Throwable  {
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertNotNull(timeSeries0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 0;
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = mockDate0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", string0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) week0, string0, string0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(508.0, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(508.0, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(1699331298, int1);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      timeSeries0.add((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int1, boolean0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      timeSeries1.removeAgedItems((long) int1, boolean0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      //  // Unstable assertion: assertEquals(15203203200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2451, week0.getYearValue());
      //  // Unstable assertion: assertEquals(15203807999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41, week0.getWeek());
      //  // Unstable assertion: assertEquals(15203505599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(129944L, week0.getSerialIndex());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = "tM\\#lq L)5DFA";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-6679552), int1);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int1, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       int int1 = mockDate0.getYear();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(563, int1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       
//       long long0 = 0L;
//       timeSeries0.setMaximumItemAge(long0);
//       assertFalse(int0 == int1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(int0 == int1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem2);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(563.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(563.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//   }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235127859), int0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) int0);
//       assertFalse(int0 == int1);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//   }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = "tM\\#lq L)5DFA";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotNull(fixedMillisecond1);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15203420880001L, fixedMillisecond1.getLastMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getSerialIndex());
      
      int int1 = 509;
      timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (Number) int1);
      assertFalse(int1 == int0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(509.0, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(509.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(15203420880001L, fixedMillisecond1.getLastMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(15203420880001L, fixedMillisecond1.getSerialIndex());
      
      FixedMillisecond fixedMillisecond2 = (FixedMillisecond)fixedMillisecond0.previous();
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond2, fixedMillisecond0);
      assertNotSame(fixedMillisecond2, fixedMillisecond1);
      assertNotNull(fixedMillisecond2);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15203420879999L, fixedMillisecond2.getMiddleMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getSerialIndex());
      assertEquals(15203420879999L, fixedMillisecond2.getFirstMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond2, (Number) int0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond2, fixedMillisecond0);
      assertNotSame(fixedMillisecond2, fixedMillisecond1);
      assertNull(timeSeriesDataItem0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15203420879999L, fixedMillisecond2.getMiddleMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getSerialIndex());
      assertEquals(15203420879999L, fixedMillisecond2.getFirstMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(509.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      
      double double0 = (-2572.7614836439);
      TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, double0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotNull(timeSeriesDataItem1);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNull(timeSeriesDataItem2);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(false, timeSeriesDataItem1.isSelected());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(509.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(3, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem3 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond2, (double) int0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond2));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(timeSeriesDataItem3.equals((Object)timeSeriesDataItem1));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond2.equals((Object)fixedMillisecond1));
      assertFalse(int0 == int1);
      assertNotSame(fixedMillisecond0, fixedMillisecond2);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(timeSeriesDataItem3, timeSeriesDataItem1);
      assertNotSame(fixedMillisecond2, fixedMillisecond0);
      assertNotSame(fixedMillisecond2, fixedMillisecond1);
      assertNotNull(timeSeriesDataItem3);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(false, timeSeriesDataItem3.isSelected());
      assertEquals(15203420879999L, fixedMillisecond2.getMiddleMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getSerialIndex());
      assertEquals(15203420879999L, fixedMillisecond2.getFirstMillisecond());
      assertEquals(15203420879999L, fixedMillisecond2.getLastMillisecond());
      assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertEquals(3, timeSeries0.getItemCount());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       int int0 = 508;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)5DFA";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       
//       double double0 = (-2572.7614836439);
//       TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, double0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem2);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem3 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) int0);
//       assertFalse(timeSeriesDataItem3.equals((Object)timeSeriesDataItem1));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(timeSeriesDataItem3, timeSeriesDataItem1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(timeSeriesDataItem3);
//       assertEquals(false, timeSeriesDataItem3.isSelected());
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       
//       int int0 = 0;
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//          //
//       }
//   }

  @Test
  public void test27()  throws Throwable  {
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("icon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("icon", timeSeries0.getDomainDescription());
      assertEquals("icon", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = 3;
      Month month0 = new Month(int0, int0);
      assertNotNull(month0);
      assertEquals(3, month0.getYearValue());
      assertEquals(3, month0.getMonth());
      assertEquals((-62064921600001L), month0.getLastMillisecond());
      assertEquals(39L, month0.getSerialIndex());
      assertEquals((-62067600000000L), month0.getFirstMillisecond());
      assertEquals((-62066260800001L), month0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("icon", timeSeries0.getDomainDescription());
      assertEquals("icon", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(3.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(3.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(3, month0.getYearValue());
      assertEquals(3, month0.getMonth());
      assertEquals((-62064921600001L), month0.getLastMillisecond());
      assertEquals(39L, month0.getSerialIndex());
      assertEquals((-62067600000000L), month0.getFirstMillisecond());
      assertEquals((-62066260800001L), month0.getMiddleMillisecond());
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertNotNull(timeSeries0);
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       int int0 = 0;
//       String string0 = "+r<I:3]Nm/NFzI)OW^G";
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//       
//       TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertNotSame(timeSeries2, timeSeries1);
//       assertNotSame(timeSeries2, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotNull(timeSeries2);
//       assertEquals(true, timeSeries2.getNotify());
//       assertEquals("Time", timeSeries2.getDomainDescription());
//       assertEquals(0, timeSeries2.getItemCount());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertEquals(true, timeSeries2.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries2.getMaxY(), 0.01D);
//       assertEquals("Value", timeSeries2.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries2.getMinY(), 0.01D);
//       assertNull(timeSeries2.getDescription());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("+r<I:3]Nm/NFzI)OW^G", timeSeries1.getDomainDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
//       assertNull(timeSeries1.getDescription());
//   }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) year0);
//       assertNotNull(timeSeries0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       int int0 = 0;
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)millisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(2014, year0.getYear());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(0.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries1.isEmpty());
//   }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       int int0 = 508;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)5DFA";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       
//       double double0 = (-2572.7614836439);
//       TimeSeriesDataItem timeSeriesDataItem1 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, double0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       
//       TimeSeriesDataItem timeSeriesDataItem2 = timeSeries0.addOrUpdate(timeSeriesDataItem1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem2);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       
//       int int1 = timeSeries0.hashCode();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals((-1930102921), int1);
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals((-2572.7614836439), timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond1, (Number) int1);
//       assertFalse(int1 == int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals((-1.930102921E9), timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals((-2572.7614836439), timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       int int0 = 538;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       
//       Week week0 = new Week((Date) mockDate0);
//       assertNotNull(week0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(2484, week0.getYearValue());
//       assertEquals(19, week0.getWeek());
//       assertEquals(16231967999999L, week0.getLastMillisecond());
//       assertEquals(131671L, week0.getSerialIndex());
//       assertEquals(16231363200000L, week0.getFirstMillisecond());
//       assertEquals(16231665599999L, week0.getMiddleMillisecond());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) week0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNull(number0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(2484, week0.getYearValue());
//       assertEquals(19, week0.getWeek());
//       assertEquals(16231967999999L, week0.getLastMillisecond());
//       assertEquals(131671L, week0.getSerialIndex());
//       assertEquals(16231363200000L, week0.getFirstMillisecond());
//       assertEquals(16231665599999L, week0.getMiddleMillisecond());
//       
//       timeSeries1.add((RegularTimePeriod) week0, number0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2484, week0.getYearValue());
//       assertEquals(19, week0.getWeek());
//       assertEquals(16231967999999L, week0.getLastMillisecond());
//       assertEquals(131671L, week0.getSerialIndex());
//       assertEquals(16231363200000L, week0.getFirstMillisecond());
//       assertEquals(16231665599999L, week0.getMiddleMillisecond());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) week0, (double) int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2484, week0.getYearValue());
//       assertEquals(19, week0.getWeek());
//       assertEquals(16231967999999L, week0.getLastMillisecond());
//       assertEquals(131671L, week0.getSerialIndex());
//       assertEquals(16231363200000L, week0.getFirstMillisecond());
//       assertEquals(16231665599999L, week0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(538.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(538.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2484, week0.getYearValue());
//       assertEquals(19, week0.getWeek());
//       assertEquals(16231967999999L, week0.getLastMillisecond());
//       assertEquals(131671L, week0.getSerialIndex());
//       assertEquals(16231363200000L, week0.getFirstMillisecond());
//       assertEquals(16231665599999L, week0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(538.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(538.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       
//       DefaultCaret defaultCaret0 = new DefaultCaret();
//       assertNotNull(defaultCaret0);
//       assertEquals(0, defaultCaret0.width);
//       assertEquals(0, defaultCaret0.y);
//       assertEquals(0, defaultCaret0.height);
//       assertEquals(0, defaultCaret0.x);
//       assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
//       assertEquals(true, defaultCaret0.isEmpty());
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) defaultCaret0.width);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals(0, defaultCaret0.width);
//       assertEquals(0, defaultCaret0.y);
//       assertEquals(0, defaultCaret0.height);
//       assertEquals(0, defaultCaret0.x);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
//       assertEquals(true, defaultCaret0.isEmpty());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53(FA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // There is no existing value for the specified 'period'.
//          //
//       }
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       int int0 = 538;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       
//       timeSeries0.add(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(538.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(538.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       DefaultCaret defaultCaret0 = new DefaultCaret();
//       assertNotNull(defaultCaret0);
//       assertEquals(0, defaultCaret0.width);
//       assertEquals(0, defaultCaret0.height);
//       assertEquals(0, defaultCaret0.y);
//       assertEquals(0, defaultCaret0.x);
//       assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getX(), 0.01D);
//       assertEquals(true, defaultCaret0.isEmpty());
//       assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) defaultCaret0.width);
//       assertEquals(0, defaultCaret0.width);
//       assertEquals(0, defaultCaret0.height);
//       assertEquals(0, defaultCaret0.y);
//       assertEquals(0, defaultCaret0.x);
//       assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getX(), 0.01D);
//       assertEquals(true, defaultCaret0.isEmpty());
//       assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
//       assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//   }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235127859), int0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) int0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       boolean boolean0 = false;
//       timeSeries0.add(timeSeriesDataItem0, boolean0);
//       assertFalse(int0 == int1);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       timeSeries0.add((RegularTimePeriod) fixedMillisecond1, (double) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       int int1 = mockDate0.getYear();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(563, int1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertFalse(int0 == int1);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertFalse(int0 == int1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeries1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.previous();
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotNull(fixedMillisecond1);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       
//       TimeSeriesDataItem timeSeriesDataItem2 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(timeSeriesDataItem2.equals((Object)timeSeriesDataItem1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(timeSeriesDataItem2, timeSeriesDataItem1);
//       assertNotNull(timeSeriesDataItem2);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(false, timeSeriesDataItem2.isSelected());
//       
//       timeSeries1.add(timeSeriesDataItem1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(timeSeriesDataItem1.equals((Object)timeSeriesDataItem2));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(int0 == int1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(timeSeriesDataItem1, timeSeriesDataItem2);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals(1392409281319L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281319L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281319L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       
//       boolean boolean0 = true;
//       timeSeries1.add(timeSeriesDataItem2, boolean0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(timeSeriesDataItem2.equals((Object)timeSeriesDataItem1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(timeSeriesDataItem2, timeSeriesDataItem1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(false, timeSeriesDataItem2.isSelected());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       assertEquals(false, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
//       assertEquals(2, timeSeries1.getItemCount());
//       assertEquals(563.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       Week week0 = new Week((Date) mockDate0);
//       assertNotNull(week0);
//       assertEquals(15579993600000L, week0.getFirstMillisecond());
//       assertEquals(38, week0.getWeek());
//       assertEquals(15580295999999L, week0.getMiddleMillisecond());
//       assertEquals(130577L, week0.getSerialIndex());
//       assertEquals(2463, week0.getYearValue());
//       assertEquals(15580598399999L, week0.getLastMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) week0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.FixedMillisecond.
//          //
//       }
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(false, timeSeriesDataItem1.isSelected());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(519.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(519.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem1);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getRangeDescription());
//       
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       
//       Second second0 = millisecond0.getSecond();
//       assertNotNull(second0);
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test40()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("disabledIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
      SpinnerDateModel spinnerDateModel0 = new SpinnerDateModel();
      //  // Unstable assertion: assertNotNull(spinnerDateModel0);
      
      Date date0 = spinnerDateModel0.getDate();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:39:12 GMT 2014", date0.toString());
      
      int int0 = 0;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      //  // Unstable assertion: assertNotNull(dynamicTimeSeriesCollection0);
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)dynamicTimeSeriesCollection0.workingCalendar;
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)gregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:39:12 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(timeSeries1);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries1.getItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getDomainDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries1.getRangeDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(519.0, timeSeries1.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(519.0, timeSeries1.getMinY(), 0.01D);
//   }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 508;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      String string0 = "tM\\#lq L)5DFA";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((Date) mockDate0);
      assertNotNull(fixedMillisecond0);
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertEquals(15203420880000L, fixedMillisecond0.getSerialIndex());
      assertEquals(15203420880000L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(15203420880000L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertEquals("Wed Oct 11 12:28:00 GMT 2451", mockDate0.toString());
      assertEquals(508.0, timeSeries0.getMaxY(), 0.01D);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getRangeDescription());
      assertEquals(508.0, timeSeries0.getMinY(), 0.01D);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("tM\\#lq L)5DFA", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       
//       String string0 = "2)h&gFl>T\\]jds%|";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       
//       long long0 = 1080L;
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) week0, (Number) long0, boolean0);
//       assertEquals(1080.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1080.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals(1080.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1080.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       Week week0 = new Week();
//       assertNotNull(week0);
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       
//       String string0 = "2)h&gFl>T\\]jds%|";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       
//       long long0 = 1080L;
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) week0, (Number) long0, boolean0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(1080.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1080.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1080L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1080L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1080L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1080L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1080L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1080L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1080L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1080L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getDomainDescription());
//       assertEquals(1080.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1080.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("2)h&gFl>T\\]jds%|", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(1392595199999L, week0.getLastMillisecond());
//       assertEquals(7, week0.getWeek());
//       assertEquals(1392292799999L, week0.getMiddleMillisecond());
//       assertEquals(2014, week0.getYearValue());
//       assertEquals(106749L, week0.getSerialIndex());
//       assertEquals(1391990400000L, week0.getFirstMillisecond());
//   }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 519;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      String string0 = "tM\\#lq L)53(FA3";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals(38, week0.getWeek());
      assertEquals(2463, week0.getYearValue());
      assertEquals(130577L, week0.getSerialIndex());
      assertEquals(15580598399999L, week0.getLastMillisecond());
      assertEquals(15580295999999L, week0.getMiddleMillisecond());
      assertEquals(15579993600000L, week0.getFirstMillisecond());
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(week0);
      assertNull(timeSeriesDataItem0);
      assertEquals(38, week0.getWeek());
      assertEquals(2463, week0.getYearValue());
      assertEquals(130577L, week0.getSerialIndex());
      assertEquals(15580598399999L, week0.getLastMillisecond());
      assertEquals(15580295999999L, week0.getMiddleMillisecond());
      assertEquals(15579993600000L, week0.getFirstMillisecond());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("tM\\#lq L)53(FA3", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("tM\\#lq L)53(FA3", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
  }

  @Test
  public void test46() {}
//   @Test
//   public void test46()  throws Throwable  {
//       int int0 = 519;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       String string0 = mockDate0.toString();
//       assertNotNull(string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", string0);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Sat Sep 22 23:39:00 GMT 2463", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       long long0 = (-263L);
//       // Undeclared exception!
//       try {
//         timeSeries0.setMaximumItemAge(long0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Negative 'periods' argument.
//          //
//       }
//   }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 556;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Nov 30 13:16:00 GMT 2503", mockDate0.toString());
      
      String string0 = "";
      Week week0 = new Week((Date) mockDate0);
      assertNotNull(week0);
      assertEquals("Fri Nov 30 13:16:00 GMT 2503", mockDate0.toString());
      assertEquals(2503, week0.getYearValue());
      assertEquals(132707L, week0.getSerialIndex());
      assertEquals(16848259200000L, week0.getFirstMillisecond());
      assertEquals(16848561599999L, week0.getMiddleMillisecond());
      assertEquals(16848863999999L, week0.getLastMillisecond());
      assertEquals(48, week0.getWeek());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("Fri Nov 30 13:16:00 GMT 2503", mockDate0.toString());
      assertEquals(2503, week0.getYearValue());
      assertEquals(132707L, week0.getSerialIndex());
      assertEquals(16848259200000L, week0.getFirstMillisecond());
      assertEquals(16848561599999L, week0.getMiddleMillisecond());
      assertEquals(16848863999999L, week0.getLastMillisecond());
      assertEquals(48, week0.getWeek());
      
      int int1 = (-49);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test49() {}
//   @Test
//   public void test49()  throws Throwable  {
//       int int0 = 538;
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       
//       String string0 = "tM\\#lq L)53DFA3";
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertNotNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate(timeSeriesDataItem0);
//       assertNull(timeSeriesDataItem1);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(false, timeSeriesDataItem0.isSelected());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(538.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(538.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(538.0, (double)double0, 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
//       assertEquals(538.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(538.0, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 1033;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("disabledIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
  }

  @Test
  public void test52() {}
//   @Test
//   public void test52()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       Class class0 = timeSeries0.getTimePeriodClass();
//       assertNull(class0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//   }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
      
      double double0 = timeSeries0.getMaxY();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test
  public void test54() {}
//   @Test
//   public void test54()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       
//       double double0 = timeSeries0.getMinY();
//       assertEquals(Double.NaN, double0, 0.01D);
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//   }

  @Test
  public void test55() {}
//   @Test
//   public void test55()  throws Throwable  {
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       int int0 = 0;
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0.0, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0.0, timeSeries0.getMinY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       
//       timeSeries0.setMaximumItemCount(int0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//   }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 538;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
      
      String string0 = "tM\\#lq L)53DFA3";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("tM\\#lq L)53DFA3", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Sat May 13 18:58:00 GMT 2484", mockDate0.toString());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("tM\\#lq L)53DFA3", timeSeries1.getDomainDescription());
      assertEquals("tM\\#lq L)53DFA3", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
  }

  @Test
  public void test57() {}
//   @Test
//   public void test57()  throws Throwable  {
//       Second second0 = new Second();
//       assertNotNull(second0);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, string0, string0);
//       assertNotNull(timeSeries0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       
//       timeSeries0.setDomainDescription(string0);
//       assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(1392409281499L, second0.getMiddleMillisecond());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//   }

  @Test
  public void test58()  throws Throwable  {
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("disabledIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      int int0 = 4;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01D);
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01D);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = "Null 'start' argument.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Null 'start' argument.", timeSeries0.getDomainDescription());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Null 'start' argument.", timeSeries0.getDomainDescription());
      assertEquals("Null 'start' argument.", timeSeries0.getRangeDescription());
  }
}
