/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:43:20 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.color.ICC_Profile;
import java.text.NumberFormat;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;


public class XYSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-763607046), int1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1553156067, int1);
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(xYSeries0);
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.isEmpty());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 212;
      xYSeries0.add((Number) int0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(1, xYSeries0.getItemCount());
      
      int int1 = xYSeries0.hashCode();
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(1, xYSeries0.getItemCount());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-2061781543), int1);
  }

  @Test
  public void test03()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      int int0 = 352;
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) long0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(int1 == int0);
      assertEquals((-2143948083), int1);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int1);
      assertNotNull(xYSeries1);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(int1 == int0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(boolean1);
  }

  @Test
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean1 = true;
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean1, boolean0);
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean2 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(boolean2);
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      
      int int0 = defaultTableXYDataset0.indexOf((Comparable) boolean0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals((-1), int0);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries1);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      
      xYSeriesCollection0.removeSeries(xYSeries1);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      boolean boolean1 = xYSeries0.equals((Object) int0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test07()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, long0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      
      int int0 = 0;
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertFalse(int1 == int0);
      assertEquals((-2146777178), int1);
      
      boolean boolean0 = true;
      xYSeries0.add((double) int0, (double) long0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertFalse(int0 == int1);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int1);
      assertNotNull(xYSeries1);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(int1 == int0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int0 = 352;
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) long0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      Number number0 = null;
      xYSeries0.add((Number) int0, number0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
  }

  @Test
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      
      int int0 = 352;
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) long0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) long0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1392409281320
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      xYSeries0.setMaximumItemCount(int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byte byte0 = (byte)73;
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) byteArray0[0], boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) byte0, (Number) byte0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 0L;
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) long0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, (Number) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("ApproveButtonMnemonicChangedProperty", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = (-635);
      // Undeclared exception!
      try {
        xYSeries0.delete(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      int int1 = MonthConstants.APRIL;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      xYSeries0.delete(int1, int0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = defaultTableXYDataset0.indexOf((Comparable) boolean0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals((-1), int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      xYSeries0.setMaximumItemCount(int1);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertFalse(int0 == int1);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = 212;
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNotNull(xYDataItem0);
      assertEquals(212.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(212.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      int int0 = 275;
      int int1 = ICC_Profile.icSigPs2CRD3Tag;
      assertFalse(int1 == int0);
      assertEquals(1886610483, int1);
      
      xYSeries0.add((Number) long0, (Number) int1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertFalse(int1 == int0);
      
      xYSeries0.add((double) int0, (double) long0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertFalse(int0 == int1);
      
      xYSeries0.add((double) int0, (double) int1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = NumberFormat.INTEGER_FIELD;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        xYSeries0.add((Number) int0, (Number) int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertNotNull(string0);
      assertEquals("ToolTipText", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      
      double double0 = (-1028.9844424718);
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(double0, double0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = JOptionPane.ERROR_MESSAGE;
      assertEquals(0, int0);
      
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int0 = 352;
      long long0 = millisecond0.getLastMillisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, long0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) long0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean1 = xYSeries0.getAutoSort();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      boolean boolean1 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = xYSeries0.getMaximumItemCount();
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test
  public void test30()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0);
      assertNotNull(xYSeries0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = SwingConstants.NEXT;
      assertEquals(12, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) byteArray0[0], boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex((int) byteArray0[0], (Number) byteArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }
}
