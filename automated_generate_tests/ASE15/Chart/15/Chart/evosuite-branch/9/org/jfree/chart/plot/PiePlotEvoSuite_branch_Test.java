/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:17:40 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.Paint;
import java.awt.Panel;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import javax.swing.Action;
import javax.swing.CellRendererPane;
import javax.swing.JButton;
import javax.swing.JLayeredPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.table.JTableHeader;
import javax.swing.text.StyledEditorKit;




import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.LineNeedle;
import org.jfree.chart.needle.WindNeedle;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.util.ObjectUtilities;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.time.Second;
import org.junit.runner.RunWith;


public class PiePlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertNotNull(piePlot3D1);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D1.isSubplot());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test001()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertNotNull(ringPlot1);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(false, ringPlot1.isSubplot());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot1.getLabelLinksVisible());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot1.getIgnoreNullValues());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot1.isCircular());
      assertEquals(true, ringPlot1.isOutlineVisible());
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot1.getSimpleLabels());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot1.getSeparatorsVisible());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot1.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot1.getIgnoreZeroValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      defaultPieDataset0.removeChangeListener((DatasetChangeListener) ringPlot0);
      assertNotSame(ringPlot0, ringPlot1);
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test002()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (int) byteArray0[2], (int) byteArray0[1]);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = piePlot0.equals((Object) byteArrayInputStream0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test003()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      
      int int0 = 0;
      JTable jTable0 = new JTable(int0, int0);
      assertNotNull(jTable0);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(1, jTable0.countComponents());
      
      boolean boolean0 = false;
      Rectangle rectangle0 = jTable0.getCellRect(int0, int0, boolean0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(1, jTable0.countComponents());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      
      Rectangle rectangle1 = (Rectangle)ringPlot0.getArcBounds(rectangle0, rectangle0, rectangle0.y, rectangle0.y, rectangle0.x);
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle0, rectangle1);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle1);
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(1, jTable0.countComponents());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = 1;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertNotNull(jTableHeader0);
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      
      Rectangle rectangle0 = jTableHeader0.getHeaderRect(int0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle0, rectangle0, rectangle0.height, int0, int0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test005()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      float float0 = (-1615.1951F);
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue((Comparable) float0, (double) float0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test006()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, legendItemCollection0.getItemCount());
  }

  @Test
  public void test007()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      int int0 = 1415;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1415, bufferedImage0.getTileWidth());
      assertEquals(1415, bufferedImage0.getTileHeight());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1415, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1415, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
  }

  @Test
  public void test008()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      float float0 = (-1615.1951F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals((-1615.1951F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-3230.39013671875), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-3230.39013671875), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-1615.195068359375), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-1615.195068359375), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-2422.7926025390625), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2422.7926025390625), rectangle2D_Float0.getCenterX(), 0.01D);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Graphics2D graphics2D0 = null;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      PiePlotState piePlotState0 = ringPlot0.initialise(graphics2D0, (Rectangle2D) rectangle2D_Float0, (PiePlot) ringPlot0, integer0, plotRenderingInfo0);
      assertEquals((-1615.1951F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-1615.1951F), rectangle2D_Float0.y, 0.01F);
      assertNotNull(piePlotState0);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01D);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01D);
      assertEquals(3, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01D);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals((-3230.39013671875), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-3230.39013671875), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-1615.195068359375), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-1615.195068359375), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-2422.7926025390625), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2422.7926025390625), rectangle2D_Float0.getCenterX(), 0.01D);
  }

  @Test
  public void test009()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      PiePlotState piePlotState0 = piePlot3D0.initialise(graphics2D0, (Rectangle2D) rectangle2D_Float0, (PiePlot) piePlot3D0, integer0, plotRenderingInfo0);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(piePlotState0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, piePlotState0.getTotal(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01D);
      assertEquals(2, piePlotState0.getPassesRequired());
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = ringPlot0.getLegendLabelToolTipGenerator();
      assertNull(pieSectionLabelGenerator0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      
      // Undeclared exception!
      try {
        ringPlot0.setLegendLabelGenerator(pieSectionLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
  }

  @Test
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      assertNotNull(cellRendererPane0);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isCursorSet());
      
      LayoutManager layoutManager0 = cellRendererPane0.getLayout();
      assertNull(layoutManager0);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isCursorSet());
      
      Panel panel0 = new Panel(layoutManager0);
      assertNotNull(panel0);
      assertEquals(false, panel0.isShowing());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getComponentCount());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.isValid());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(0, panel0.countComponents());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(0, panel0.getWidth());
      assertEquals(true, panel0.isVisible());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(false, panel0.isLightweight());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertEquals(false, panel0.isFontSet());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isOpaque());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isCursorSet());
      
      Rectangle rectangle0 = panel0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(false, panel0.isShowing());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getComponentCount());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.isValid());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(0, panel0.countComponents());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(0, panel0.getWidth());
      assertEquals(true, panel0.isVisible());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(false, panel0.isLightweight());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertEquals(false, panel0.isFontSet());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isOpaque());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isCursorSet());
      
      piePlot3D0.setLegendItemShape((Shape) rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, panel0.isShowing());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getComponentCount());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.isValid());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(0, panel0.countComponents());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(0, panel0.getWidth());
      assertEquals(true, panel0.isVisible());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(false, panel0.isLightweight());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertEquals(false, panel0.isFontSet());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isOpaque());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isCursorSet());
  }

  @Test
  public void test013()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)piePlot3D0.getLabelDistributor();
      assertNotNull(pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      
      piePlot3D0.setLabelDistributor((AbstractPieLabelDistributor) pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
  }

  @Test
  public void test014()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        piePlot0.setSimpleLabelOffset(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      
      piePlot3D0.setSimpleLabelOffset(rectangleInsets0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      
      ringPlot0.setLabelPadding(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test017()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      
      LineNeedle lineNeedle0 = new LineNeedle();
      assertNotNull(lineNeedle0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      
      Paint paint0 = lineNeedle0.getOutlinePaint();
      assertNull(paint0);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      
      // Undeclared exception!
      try {
        ringPlot0.setLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(151, color0.getRed());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(3, color0.getTransparency());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getBlue());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals(151, color0.getGreen());
      
      ringPlot0.setLabelPaint((Paint) color0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(151, color0.getRed());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(3, color0.getTransparency());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getBlue());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals(151, color0.getGreen());
  }

  @Test
  public void test019()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      
      piePlot0.setLabelFont(font0);
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isItalic());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
  }

  @Test
  public void test020()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      Stroke stroke0 = piePlot3D0.getSectionOutlineStroke((Comparable) second0);
      assertNull(stroke0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test021()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      ringPlot0.setLabelLinkStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test022()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      
      int int0 = (-1024);
      Paint paint0 = xYStepRenderer0.getSeriesFillPaint(int0);
      assertNull(paint0);
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test023()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      
      Color color0 = (Color)piePlot0.getBaseSectionPaint();
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      
      piePlot3D0.setLabelLinkPaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      int int0 = 0;
      defaultPieDataset0.insertValue(int0, (Comparable) int0, (Number) int0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      double double0 = ringPlot0.getMaximumExplodePercent();
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      
      double double0 = ringPlot0.getMaximumExplodePercent();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      
      piePlot0.setExplodePercent((Comparable) line2D_Float0.y1, (double) line2D_Float0.x2);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test027()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      double double0 = 79.68357;
      double double1 = piePlot3D0.getExplodePercent((Comparable) double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        piePlot0.setBaseSectionOutlineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test029()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      int int0 = 945;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      byte[] byteArray0 = new byte[4];
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (int) byteArray0[0]);
      assertNotNull(categoryToPieDataset0);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      WindNeedle windNeedle0 = new WindNeedle();
      assertNotNull(windNeedle0);
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)windNeedle0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      ringPlot0.setBaseSectionOutlineStroke((Stroke) basicStroke0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test030()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      
      boolean boolean0 = ringPlot0.isCircular();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertTrue(boolean0);
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertNotNull(areaRenderer0);
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      
      DrawingSupplier drawingSupplier0 = areaRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      
      ringPlot0.setDrawingSupplier(drawingSupplier0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesStroke());
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(boolean0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test031()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      
      boolean boolean0 = ringPlot0.isCircular();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertTrue(boolean0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(boolean0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
  }

  @Test
  public void test032()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertNotNull(defaultXYItemRenderer0);
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      int int0 = (-1654);
      Paint paint0 = defaultXYItemRenderer0.getSeriesItemLabelPaint(int0);
      assertNull(paint0);
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      // Undeclared exception!
      try {
        piePlot3D0.setBaseSectionOutlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test033()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      
      piePlot3D0.setBaseSectionOutlinePaint((Paint) color0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
  }

  @Test
  public void test034()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(line2D_Float0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = true;
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(line2D_Float0.y1, boolean0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(color0);
      assertEquals(-4144960, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getGreen());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test035()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setBaseSectionPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test036()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      Color color0 = (Color)ringPlot0.getLabelLinkPaint();
      assertNotNull(color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      piePlot3D0.setBaseSectionPaint((Paint) color0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
  }

  @Test
  public void test037()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      double double0 = 2068.535841688127;
      defaultPieDataset0.setValue((Comparable) double0, (Number) double0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      int int0 = 0;
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(2068.535841688127, comparable0);
  }

  @Test
  public void test038()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      int int0 = (-9);
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals((-9), comparable0);
  }

  @Test
  public void test039()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      int int0 = 0;
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, comparable0);
  }

  @Test
  public void test040()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      
      int int0 = (-3133);
      Comparable comparable0 = piePlot0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals((-3133), comparable0);
  }

  @Test
  public void test041()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      
      double double0 = ringPlot0.getInteriorGap();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, double0, 0.01D);
      
      ringPlot0.setInteriorGap(double0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      
      double double0 = 3010.0;
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (3010.0) argument.
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      
      ringPlot0.setInteriorGap(rectangle2D_Double0.x);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      double double0 = (-3639.39);
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-3639.39) argument.
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      
      Rotation rotation0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setDirection(rotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      Rotation rotation0 = Rotation.CLOCKWISE;
      assertNotNull(rotation0);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      
      piePlot3D0.setDirection(rotation0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      
      piePlot3D0.setDataset(pieDataset0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
  }

  @Test
  public void test048()  throws Throwable  {
      JToolBar jToolBar0 = new JToolBar();
      assertNotNull(jToolBar0);
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      
      String string0 = null;
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction(string0, string0);
      assertNotNull(styledEditorKit_FontFamilyAction0);
      
      JButton jButton0 = jToolBar0.add((Action) styledEditorKit_FontFamilyAction0);
      assertNotNull(jButton0);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      
      Point point0 = jButton0.getLocation();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      
      CategoryDataset categoryDataset0 = null;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(categoryDataset0);
      assertNotNull(spiderWebPlot0);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, point0.x);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(categoryToPieDataset0);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(piePlot0);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      
      piePlot0.setDataset((PieDataset) categoryToPieDataset0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
  }

  @Test
  public void test049()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      double double0 = 907.4302;
      piePlot0.setMaximumLabelWidth(double0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(907.4302, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test050()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      double double0 = ringPlot0.getMaximumLabelWidth();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, double0, 0.01D);
  }

  @Test
  public void test051()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      
      double double0 = ringPlot0.getShadowXOffset();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, double0, 0.01D);
      
      ringPlot0.setShadowYOffset(double0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
  }

  @Test
  public void test052()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      Color color0 = Color.PINK;
      assertNotNull(color0);
      assertEquals(175, color0.getGreen());
      assertEquals(-20561, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=175,b=175]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(175, color0.getBlue());
      
      piePlot3D0.setLabelOutlinePaint((Paint) color0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(175, color0.getGreen());
      assertEquals(-20561, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=175,b=175]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(175, color0.getBlue());
  }

  @Test
  public void test053()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      
      double double0 = 0.0;
      piePlot3D0.setLabelLinkMargin(double0);
      assertEquals(0.0, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = true;
      ringPlot0.setSimpleLabels(boolean0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      Color color0 = (Color)ringPlot0.getShadowPaint();
      assertNotNull(color0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      
      ringPlot0.setSectionOutlinePaint((Comparable) rectangle2D_Double0.width, (Paint) color0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      
      double double0 = ringPlot0.getLabelLinkMargin();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, double0, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      
      boolean boolean0 = false;
      piePlot0.setLabelLinksVisible(boolean0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test
  public void test059()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      PieURLGenerator pieURLGenerator0 = piePlot3D0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      piePlot3D0.setLegendLabelURLGenerator(pieURLGenerator0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
  }

  @Test
  public void test060()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
  }

  @Test
  public void test061()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      boolean boolean0 = ringPlot0.getIgnoreZeroValues();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(0.18, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test063()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = ObjectUtilities.isJDK14();
      assertTrue(boolean0);
      
      LineNeedle lineNeedle0 = new LineNeedle();
      assertNotNull(lineNeedle0);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      
      Paint paint0 = lineNeedle0.getOutlinePaint();
      assertNull(paint0);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      
      ringPlot0.setSectionPaint((Comparable) boolean0, paint0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test064()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      
      boolean boolean0 = false;
      piePlot0.setSectionOutlinesVisible(boolean0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
  }

  @Test
  public void test065()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isBold());
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
  }

  @Test
  public void test066()  throws Throwable  {
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      
      piePlot0.setShadowXOffset((double) point2D_Float0.y);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
  }

  @Test
  public void test067()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
  }

  @Test
  public void test068()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      PieToolTipGenerator pieToolTipGenerator0 = piePlot3D0.getToolTipGenerator();
      assertNull(pieToolTipGenerator0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
  }

  @Test
  public void test069()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      piePlot0.setLabelGap(point2D_Double0.y);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.0, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test070()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
  }

  @Test
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      
      boolean boolean0 = ringPlot0.getSectionOutlinesVisible();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = 945;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertNotNull(spiderWebPlot0);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      
      byte[] byteArray0 = new byte[4];
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, (int) byteArray0[1]);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Color color0 = (Color)ringPlot0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-64, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test073()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Stroke stroke0 = null;
      piePlot3D0.setLabelOutlineStroke(stroke0);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test074()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      double double0 = piePlot3D0.getShadowYOffset();
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test076()  throws Throwable  {
      int int0 = 1;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      boolean boolean0 = false;
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertNotNull(defaultXYItemRenderer0);
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      
      XYToolTipGenerator xYToolTipGenerator0 = defaultXYItemRenderer0.getBaseToolTipGenerator();
      assertNull(xYToolTipGenerator0);
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) int0, boolean0, xYToolTipGenerator0);
      assertNotNull(candlestickRenderer0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getDrawVolume());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      
      Color color0 = (Color)candlestickRenderer0.getUpPaint();
      assertNotNull(color0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getDrawVolume());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      
      ringPlot0.setShadowPaint((Paint) color0);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getDrawVolume());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test077()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      
      boolean boolean0 = true;
      piePlot3D0.setIgnoreZeroValues(boolean0);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
  }

  @Test
  public void test078()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      
      double double0 = piePlot3D0.getLabelGap();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(int0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      
      Stroke stroke0 = cyclicXYItemRenderer0.getSeriesOutlineStroke(int0);
      assertNull(stroke0);
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      
      ringPlot0.setSectionOutlineStroke((Comparable) arc2D_Double0.width, stroke0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
  }

  @Test
  public void test080()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      int int0 = (-285);
      piePlot3D0.setPieIndex(int0);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(-285, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test081()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      assertNotNull(yIntervalRenderer0);
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      
      Color color0 = (Color)yIntervalRenderer0.getBaseFillPaint();
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      
      ringPlot0.setLabelBackgroundPaint((Paint) color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test082()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      ringPlot0.setURLGenerator(pieURLGenerator0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      String string0 = "\"*";
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator(string0);
      assertNotNull(standardPieToolTipGenerator0);
      assertEquals("\"*", standardPieToolTipGenerator0.getLabelFormat());
      
      piePlot3D0.setToolTipGenerator((PieToolTipGenerator) standardPieToolTipGenerator0);
      assertEquals("\"*", standardPieToolTipGenerator0.getLabelFormat());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test085()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      float float0 = (-1615.1951F);
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(float0);
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test086()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      piePlot0.setMinimumArcAngleToDraw((double) line2D_Float0.x2);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.0, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test087()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      
      Color color0 = (Color)ringPlot0.getLabelOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
  }

  @Test
  public void test088()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      
      int int0 = piePlot0.getPieIndex();
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, int0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "=vh-];I5";
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      Paint paint0 = piePlot3D0.getSectionPaint((Comparable) string0);
      assertNull(paint0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
  }

  @Test
  public void test090()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      
      Color color0 = (Color)piePlot0.getBaseSectionPaint();
      assertNotNull(color0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
      
      piePlot0.setLabelShadowPaint((Paint) color0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
  }

  @Test
  public void test091()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      boolean boolean0 = piePlot3D0.getSimpleLabels();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      
      JToolBar jToolBar0 = new JToolBar();
      assertNotNull(jToolBar0);
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      
      String string0 = null;
      StyledEditorKit.FontFamilyAction styledEditorKit_FontFamilyAction0 = new StyledEditorKit.FontFamilyAction(string0, string0);
      assertNotNull(styledEditorKit_FontFamilyAction0);
      
      JButton jButton0 = jToolBar0.add((Action) styledEditorKit_FontFamilyAction0);
      assertNotNull(jButton0);
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      
      Point point0 = jButton0.getLocation();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      
      CategoryDataset categoryDataset0 = null;
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot(categoryDataset0);
      assertNotNull(spiderWebPlot0);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(categoryToPieDataset0);
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(ringPlot0);
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      
      ringPlot0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(0, jButton0.countComponents());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isVisible());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(1, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(1, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
  }

  @Test
  public void test093()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = ringPlot0.getLabelLinksVisible();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertTrue(boolean0);
  }

  @Test
  public void test094()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = piePlot3D0.getLabelPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      float float0 = 2485.1433F;
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue((Comparable) float0, (double) float0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test096()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      
      double double0 = piePlot3D0.getMinimumArcAngleToDraw();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0E-5, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      boolean boolean0 = true;
      piePlot3D0.setIgnoreNullValues(boolean0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      piePlot3D0.setLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
  }

  @Test
  public void test099()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      
      boolean boolean0 = ringPlot0.getIgnoreNullValues();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test100()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test101()  throws Throwable  {
      double double0 = 0.9;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      piePlot3D0.setStartAngle(double0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.9, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
  }

  @Test
  public void test102()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertNotNull(color0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
  }

  @Test
  public void test103()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      boolean boolean0 = false;
      piePlot3D0.setCircular(boolean0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
  }

  @Test
  public void test104()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Paint paint0 = ringPlot0.getSectionOutlinePaint((Comparable) point2D_Double0.x);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNull(paint0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test105()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      String string0 = piePlot0.getPlotType();
      assertNotNull(string0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals("Pie Plot", string0);
  }
}
