/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:49:07 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Date;
import java.util.EventListener;
import java.util.Locale;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.FontUIResource;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.DateTickUnit;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.xy.YIntervalRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class PiePlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertNotNull(ringPlot1);
      assertNotSame(ringPlot0, ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, ringPlot1.isOutlineVisible());
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot1.getIgnoreZeroValues());
      assertEquals(false, ringPlot1.getSimpleLabels());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01D);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot1.isCircular());
      assertEquals(true, ringPlot1.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot1.getIgnoreNullValues());
      assertEquals(true, ringPlot1.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot1.isSubplot());
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0, ringPlot1.getPieIndex());
  }

  @Test
  public void test001()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      
      PiePlot piePlot1 = (PiePlot)piePlot0.clone();
      assertTrue(piePlot0.equals((Object)piePlot1));
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertNotNull(piePlot1);
      assertNotSame(piePlot0, piePlot1);
      assertNotSame(piePlot1, piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(true, piePlot1.getSectionOutlinesVisible());
      assertEquals(false, piePlot1.getIgnoreNullValues());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(false, piePlot1.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot1.isCircular());
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot1.getLabelLinksVisible());
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot1.isOutlineVisible());
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(false, piePlot1.getSimpleLabels());
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot1.isSubplot());
  }

  @Test
  public void test002()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) taskSeriesCollection0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      categoryToPieDataset0.removeChangeListener((DatasetChangeListener) piePlot3D0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
  }

  @Test
  public void test003()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) taskSeriesCollection0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      
      piePlot0.setDataset((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      
      boolean boolean0 = defaultPieDataset0.hasListener((EventListener) piePlot0);
      assertTrue(boolean0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
  }

  @Test
  public void test005()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      
      Rectangle2D.Float rectangle2D_Float1 = (Rectangle2D.Float)piePlot0.getArcBounds(rectangle2D_Float0, rectangle2D_Float0, line2D_Float0.x2, line2D_Float0.x2, rectangle2D_Float0.y);
      assertNotNull(rectangle2D_Float1);
      assertSame(rectangle2D_Float1, rectangle2D_Float0);
      assertSame(rectangle2D_Float0, rectangle2D_Float1);
      assertEquals(0.0, rectangle2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float1.getCenterX(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float1.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float1.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
  }

  @Test
  public void test006()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      int int0 = 2;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      
      double double0 = 138.238256264;
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getBounds2D();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double1 = new Rectangle2D.Double(arc2D_Double0.start, arc2D_Double0.start, arc2D_Double0.start, arc2D_Double0.width);
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double2 = (Rectangle2D.Double)piePlot3D0.getArcBounds(rectangle2D_Double0, rectangle2D_Double1, int0, arc2D_Double0.x, double0);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double2));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double0));
      assertTrue(rectangle2D_Double2.equals((Object)rectangle2D_Double1));
      assertNotNull(rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double2);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double0);
      assertNotSame(rectangle2D_Double2, rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(2, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double2.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double2.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double2.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double2.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double2.x, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
  }

  @Test
  public void test008()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      
      Graphics2D graphics2D0 = null;
      JSpinner jSpinner0 = new JSpinner();
      assertNotNull(jSpinner0);
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(true, jSpinner0.isForegroundSet());
      
      String string0 = "";
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, string0);
      assertNotNull(jSpinner_NumberEditor0);
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      
      Rectangle rectangle0 = jSpinner_NumberEditor0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try {
        piePlot0.drawPie(graphics2D0, rectangle0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = 1267;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1267, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1267, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1267, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1267, bufferedImage0.getTileWidth());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test
  public void test010()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setLegendLabelGenerator(pieSectionLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test011()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      Locale locale0 = JComponent.getDefaultLocale();
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(locale0);
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      piePlot0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      piePlot3D0.setLegendItemShape((Shape) line2D_Float0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)piePlot0.getLabelDistributor();
      assertNotNull(pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      piePlot0.setLabelDistributor((AbstractPieLabelDistributor) pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test014()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        piePlot0.setSimpleLabelOffset(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
      }
  }

  @Test
  public void test015()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      
      int int0 = 0;
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(int0);
      assertNotNull(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      RectangleInsets rectangleInsets0 = categoryAxis0.getLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      
      ringPlot0.setSimpleLabelOffset(rectangleInsets0);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setLabelPadding(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
      }
  }

  @Test
  public void test017()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      
      int int0 = 0;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertNull(valueAxis0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      
      ringPlot0.setLabelPadding(rectangleInsets0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
  }

  @Test
  public void test018()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      
      YIntervalRenderer yIntervalRenderer0 = new YIntervalRenderer();
      assertNotNull(yIntervalRenderer0);
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      
      int int0 = 0;
      Color color0 = (Color)yIntervalRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
      
      ringPlot0.setLabelPaint((Paint) color0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, yIntervalRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisible());
      assertEquals(3, yIntervalRenderer0.getDefaultEntityRadius());
      assertEquals(true, yIntervalRenderer0.getBaseCreateEntities());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, yIntervalRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, yIntervalRenderer0.getPassCount());
      assertEquals(2.0, yIntervalRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, yIntervalRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, yIntervalRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test019()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      
      Font font0 = null;
      // Undeclared exception!
      try {
        piePlot0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test020()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      assertNotNull(jFormattedTextField0);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      
      FontUIResource fontUIResource0 = (FontUIResource)jFormattedTextField0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      
      ringPlot0.setLabelFont((Font) fontUIResource0);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
  }

  @Test
  public void test021()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setLabelLinkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertNotNull(categoryStepRenderer0);
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      int int0 = 201;
      BasicStroke basicStroke0 = (BasicStroke)categoryStepRenderer0.lookupSeriesStroke(int0);
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      ringPlot0.setLabelLinkStroke((Stroke) basicStroke0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test023()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertNotNull(defaultPolarItemRenderer0);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      int int0 = (-631);
      Paint paint0 = defaultPolarItemRenderer0.getSeriesOutlinePaint(int0);
      assertNull(paint0);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      // Undeclared exception!
      try {
        ringPlot0.setLabelLinkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test024()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      
      Color color0 = (Color)piePlot0.getBackgroundPaint();
      assertNotNull(color0);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getBlue());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      
      piePlot0.setLabelLinkPaint((Paint) color0);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getBlue());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      int int0 = 0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue((Comparable) int0, (Number) int0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      double double0 = piePlot3D0.getMaximumExplodePercent();
      assertEquals(0.0, double0, 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test026()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      ringPlot0.setExplodePercent((Comparable) line2D_Float0.y1, (double) line2D_Float0.y2);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
  }

  @Test
  public void test027()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      boolean boolean0 = false;
      double double0 = piePlot0.getExplodePercent((Comparable) boolean0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test028()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setBaseSectionOutlineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test029()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      
      boolean boolean0 = piePlot0.getIgnoreNullValues();
      assertFalse(boolean0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      
      float float0 = 0.0F;
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.lookupSectionOutlineStroke(float0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      
      piePlot0.setBaseSectionOutlineStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
  }

  @Test
  public void test030()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertNotNull(dateTickUnit0);
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      
      double double0 = 360.0;
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, double0);
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(dateTickUnit0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test031()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        piePlot0.setBaseSectionOutlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test032()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      
      Color color0 = (Color)ringPlot0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(3, color0.getTransparency());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getRed());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(151, color0.getBlue());
      
      ringPlot0.setBaseSectionOutlinePaint((Paint) color0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(3, color0.getTransparency());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getRed());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(151, color0.getBlue());
  }

  @Test
  public void test033()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      assertNotNull(numberTickUnit0);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      
      boolean boolean0 = true;
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(numberTickUnit0, boolean0);
      assertNotNull(color0);
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) taskSeriesCollection0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      assertNotNull(customPieURLGenerator0);
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      boolean boolean0 = tableOrder0.equals((Object) customPieURLGenerator0);
      assertFalse(boolean0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      Paint paint0 = stackedBarRenderer0.getSeriesItemLabelPaint(int0);
      assertNull(paint0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      // Undeclared exception!
      try {
        piePlot3D0.setBaseSectionPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test035()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      Color color0 = (Color)TextTitle.DEFAULT_TEXT_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      
      ringPlot0.setBaseSectionPaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test036()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertNotNull(dateTickUnit0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(1, dateTickUnit0.getRollCount());
      
      double double0 = 0.0;
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, double0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      int int0 = 0;
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test037()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      int int0 = (-5025);
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals((-5025), comparable0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test038()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      int int0 = 1;
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(1, comparable0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
  }

  @Test
  public void test039()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      int int0 = 958;
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(958, comparable0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      
      double double0 = 6270.5438;
      float float0 = (-3083.8325F);
      Point2D.Float point2D_Float0 = new Point2D.Float(float0, float0);
      assertNotNull(point2D_Float0);
      assertEquals((-3083.8325F), point2D_Float0.x, 0.01F);
      assertEquals((-3083.8325F), point2D_Float0.y, 0.01F);
      
      double double1 = point2D_Float0.distanceSq(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.75008712654814E8, double1, 0.01D);
      assertEquals((-3083.8325F), point2D_Float0.x, 0.01F);
      assertEquals((-3083.8325F), point2D_Float0.y, 0.01F);
      
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (1.75008712654814E8) argument.
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      ringPlot0.setInteriorGap(rectangle2D_Double0.x);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      double double0 = (-40.00954561790578);
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-40.00954561790578) argument.
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      
      Rotation rotation0 = null;
      // Undeclared exception!
      try {
        piePlot0.setDirection(rotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertNotNull(rotation0);
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      
      ringPlot0.setDirection(rotation0);
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      
      PieDataset pieDataset0 = ringPlot0.getDataset();
      assertNull(pieDataset0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      
      ringPlot0.setDataset(pieDataset0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
  }

  @Test
  public void test046()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      float float0 = ringPlot0.getBackgroundImageAlpha();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      ringPlot0.setMaximumLabelWidth((double) float0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      
      double double0 = ringPlot0.getMaximumLabelWidth();
      assertEquals(0.14, double0, 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
  }

  @Test
  public void test048()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      double double0 = piePlot3D0.getShadowXOffset();
      assertEquals(4.0, double0, 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      piePlot3D0.setShadowYOffset(double0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      
      Paint paint0 = stackedBarRenderer0.getSeriesOutlinePaint(rectangle0.x);
      assertNull(paint0);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      piePlot3D0.setLabelOutlinePaint(paint0);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test050()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      
      double double0 = (-1113.698909614085);
      piePlot0.setLabelLinkMargin(double0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals((-1113.698909614085), piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
  }

  @Test
  public void test051()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test
  public void test052()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      boolean boolean0 = false;
      piePlot0.setSimpleLabels(boolean0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      
      double double0 = (-1113.698909614085);
      Color color0 = (Color)Axis.DEFAULT_AXIS_LINE_PAINT;
      assertNotNull(color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      
      piePlot0.setSectionOutlinePaint((Comparable) double0, (Paint) color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      
      double double0 = piePlot3D0.getLabelLinkMargin();
      assertEquals(0.025, double0, 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      boolean boolean0 = false;
      piePlot0.setLabelLinksVisible(boolean0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test057()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      
      String string0 = "";
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator(string0, string0);
      assertNotNull(standardPieURLGenerator0);
      
      ringPlot0.setLegendLabelURLGenerator((PieURLGenerator) standardPieURLGenerator0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
  }

  @Test
  public void test058()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      
      boolean boolean0 = piePlot0.getIgnoreZeroValues();
      assertFalse(boolean0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
  }

  @Test
  public void test059()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(0.18, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test060()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      
      Color color0 = (Color)piePlot0.getLabelLinkPaint();
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      
      String string0 = "{0}: ({1}, {2}, {3})";
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      
      piePlot3D0.setSectionPaint((Comparable) string0, (Paint) color0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test061()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Point2D.Float point2D_Float0 = new Point2D.Float(line2D_Float0.x2, line2D_Float0.x2);
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      
      boolean boolean0 = point2D_Float0.equals((Object) line2D_Float0.y1);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      
      ringPlot0.setSectionOutlinesVisible(boolean0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
  }

  @Test
  public void test062()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      
      Font font0 = ringPlot0.getLabelFont();
      assertNotNull(font0);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, font0.isPlain());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isTransformed());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
  }

  @Test
  public void test063()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      
      piePlot3D0.setShadowXOffset(line2D_Double0.y2);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
  }

  @Test
  public void test064()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      
      PieToolTipGenerator pieToolTipGenerator0 = piePlot3D0.getToolTipGenerator();
      assertNull(pieToolTipGenerator0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      piePlot3D0.setLabelGap(line2D_Double0.y1);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.0, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test066()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Color color0 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
  }

  @Test
  public void test067()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      
      PieDataset pieDataset0 = piePlot3D0.getDataset();
      assertNull(pieDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)ringPlot0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      Color color0 = (Color)piePlot3D0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-64, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
  }

  @Test
  public void test069()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      Color color0 = (Color)piePlot3D0.getShadowPaint();
      assertNotNull(color0);
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test070()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = "L5/GuS)NX";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertNotNull(extendedCategoryAxis0);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("L5/GuS)NX", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("L5/GuS)NX", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("L5/GuS)NX", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      ringPlot0.setLabelOutlineStroke((Stroke) basicStroke0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals("L5/GuS)NX", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test071()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      double double0 = ringPlot0.getShadowYOffset();
      assertEquals(4.0, double0, 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test072()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      double double0 = piePlot0.getInteriorGap();
      assertEquals(0.08, double0, 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test074()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      
      Paint paint0 = null;
      piePlot0.setShadowPaint(paint0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) taskSeriesCollection0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      assertNotNull(customPieURLGenerator0);
      assertEquals(0, customPieURLGenerator0.getListCount());
      
      boolean boolean0 = tableOrder0.equals((Object) customPieURLGenerator0);
      assertFalse(boolean0);
      assertEquals(0, customPieURLGenerator0.getListCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      piePlot3D0.setIgnoreZeroValues(boolean0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, customPieURLGenerator0.getListCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
  }

  @Test
  public void test076()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      
      double double0 = piePlot0.getLabelGap();
      assertEquals(0.025, double0, 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
  }

  @Test
  public void test077()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      float float0 = Component.BOTTOM_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertNotNull(categoryStepRenderer0);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      
      int int0 = 201;
      BasicStroke basicStroke0 = (BasicStroke)categoryStepRenderer0.lookupSeriesStroke(int0);
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      
      ringPlot0.setSectionOutlineStroke((Comparable) float0, (Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 0;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      piePlot3D0.setPieIndex(int0);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test079()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      
      Paint paint0 = null;
      ringPlot0.setLabelBackgroundPaint(paint0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test080()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      
      PieURLGenerator pieURLGenerator0 = null;
      ringPlot0.setURLGenerator(pieURLGenerator0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
  }

  @Test
  public void test081()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      
      String string0 = "";
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertNotNull(decimalFormat0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator(string0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertNotNull(standardPieToolTipGenerator0);
      assertEquals("", standardPieToolTipGenerator0.getLabelFormat());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      
      piePlot3D0.setToolTipGenerator((PieToolTipGenerator) standardPieToolTipGenerator0);
      assertEquals("", standardPieToolTipGenerator0.getLabelFormat());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
  }

  @Test
  public void test082()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test
  public void test083()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(line2D_Float0.x1);
      assertNotNull(color0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
  }

  @Test
  public void test084()  throws Throwable  {
      int int0 = 0;
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      
      ringPlot0.setMinimumArcAngleToDraw((double) int0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.0, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test085()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      
      Color color0 = (Color)piePlot0.getLabelOutlinePaint();
      assertNotNull(color0);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
  }

  @Test
  public void test086()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      int int0 = ringPlot0.getPieIndex();
      assertEquals(0, int0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      PieDataset pieDataset0 = ringPlot0.getDataset();
      assertNull(pieDataset0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      
      MockDate mockDate0 = (MockDate)year0.getStart();
      assertNotNull(mockDate0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      
      Hour hour0 = new Hour((Date) mockDate0);
      assertNotNull(hour0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1388537999999L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(1388534400000L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      assertEquals(999360L, hour0.getSerialIndex());
      assertEquals(1, hour0.getMonth());
      
      Day day0 = hour0.getDay();
      assertNotNull(day0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, day0.getFirstMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41640L, day0.getSerialIndex());
      assertEquals(1388620799999L, day0.getLastMillisecond());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1388537999999L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(1388534400000L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      assertEquals(999360L, hour0.getSerialIndex());
      assertEquals(1, hour0.getMonth());
      
      Paint paint0 = piePlot3D0.getSectionPaint((Comparable) day0);
      assertNull(paint0);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, day0.getFirstMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41640L, day0.getSerialIndex());
      assertEquals(1388620799999L, day0.getLastMillisecond());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1388537999999L, hour0.getLastMillisecond());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(1388534400000L, hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(2014, hour0.getYear());
      assertEquals(999360L, hour0.getSerialIndex());
      assertEquals(1, hour0.getMonth());
  }

  @Test
  public void test088()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      
      Color color0 = (Color)piePlot0.getBaseSectionPaint();
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      
      double double0 = 0.0;
      Stroke stroke0 = piePlot3D0.getSectionOutlineStroke((Comparable) double0);
      assertNull(stroke0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
  }

  @Test
  public void test090()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      int int0 = (-1375);
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(int0);
      assertNotNull(color0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      ringPlot0.setLabelShadowPaint((Paint) color0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
  }

  @Test
  public void test091()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      
      boolean boolean0 = ringPlot0.getSimpleLabels();
      assertFalse(boolean0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
  }

  @Test
  public void test092()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)ringPlot0.getLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      ringPlot0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test093()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      boolean boolean0 = piePlot3D0.getLabelLinksVisible();
      assertTrue(boolean0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
  }

  @Test
  public void test094()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      
      RectangleInsets rectangleInsets0 = piePlot0.getLabelPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabel());
      
      DateTickUnit dateTickUnit0 = dateAxis0.getTickUnit();
      assertNotNull(dateTickUnit0);
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabel());
      
      double double0 = 0.0;
      defaultPieDataset0.setValue((Comparable) dateTickUnit0, double0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(5, dateTickUnit0.getCalendarField());
      assertEquals(1, dateTickUnit0.getRollCount());
      assertEquals(2, dateTickUnit0.getRollUnit());
      assertEquals(0, dateTickUnit0.getMinorTickCount());
      assertEquals(1, dateTickUnit0.getCount());
      assertEquals(8.64E7, dateTickUnit0.getSize(), 0.01D);
      assertEquals(2, dateTickUnit0.getUnit());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabel());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1, legendItemCollection0.getItemCount());
  }

  @Test
  public void test096()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      
      double double0 = ringPlot0.getMinimumArcAngleToDraw();
      assertEquals(1.0E-5, double0, 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      boolean boolean0 = true;
      ringPlot0.setIgnoreNullValues(boolean0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
  }

  @Test
  public void test098()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = ringPlot0.getLegendLabelToolTipGenerator();
      assertNull(pieSectionLabelGenerator0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      
      piePlot3D0.setLabelGenerator(pieSectionLabelGenerator0);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test
  public void test099()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      
      JLayeredPane jLayeredPane0 = new JLayeredPane();
      assertNotNull(jLayeredPane0);
      assertEquals(false, jLayeredPane0.isShowing());
      assertEquals(true, jLayeredPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLayeredPane0.isCursorSet());
      assertEquals(false, jLayeredPane0.getIgnoreRepaint());
      assertEquals(0, jLayeredPane0.getComponentCount());
      assertEquals(true, jLayeredPane0.isVisible());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicySet());
      assertEquals(false, jLayeredPane0.isValid());
      assertEquals(false, jLayeredPane0.isMaximumSizeSet());
      assertEquals(false, jLayeredPane0.isLightweight());
      assertEquals(false, jLayeredPane0.isFontSet());
      assertEquals(false, jLayeredPane0.isDisplayable());
      assertEquals(false, jLayeredPane0.isFocusCycleRoot());
      assertEquals(false, jLayeredPane0.isBackgroundSet());
      assertEquals(true, jLayeredPane0.isEnabled());
      assertEquals(0, jLayeredPane0.countComponents());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLayeredPane0.isForegroundSet());
      assertEquals(false, jLayeredPane0.isMinimumSizeSet());
      assertEquals(false, jLayeredPane0.isPreferredSizeSet());
      
      Rectangle rectangle0 = jLayeredPane0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, jLayeredPane0.isShowing());
      assertEquals(true, jLayeredPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLayeredPane0.isCursorSet());
      assertEquals(false, jLayeredPane0.getIgnoreRepaint());
      assertEquals(0, jLayeredPane0.getComponentCount());
      assertEquals(true, jLayeredPane0.isVisible());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicySet());
      assertEquals(false, jLayeredPane0.isValid());
      assertEquals(false, jLayeredPane0.isMaximumSizeSet());
      assertEquals(false, jLayeredPane0.isLightweight());
      assertEquals(false, jLayeredPane0.isFontSet());
      assertEquals(false, jLayeredPane0.isDisplayable());
      assertEquals(false, jLayeredPane0.isFocusCycleRoot());
      assertEquals(false, jLayeredPane0.isBackgroundSet());
      assertEquals(true, jLayeredPane0.isEnabled());
      assertEquals(0, jLayeredPane0.countComponents());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLayeredPane0.isForegroundSet());
      assertEquals(false, jLayeredPane0.isMinimumSizeSet());
      assertEquals(false, jLayeredPane0.isPreferredSizeSet());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      piePlot0.setStartAngle((double) rectangle0.width);
      assertEquals(false, jLayeredPane0.isShowing());
      assertEquals(true, jLayeredPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jLayeredPane0.isCursorSet());
      assertEquals(false, jLayeredPane0.getIgnoreRepaint());
      assertEquals(0, jLayeredPane0.getComponentCount());
      assertEquals(true, jLayeredPane0.isVisible());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicySet());
      assertEquals(false, jLayeredPane0.isValid());
      assertEquals(false, jLayeredPane0.isMaximumSizeSet());
      assertEquals(false, jLayeredPane0.isLightweight());
      assertEquals(false, jLayeredPane0.isFontSet());
      assertEquals(false, jLayeredPane0.isDisplayable());
      assertEquals(false, jLayeredPane0.isFocusCycleRoot());
      assertEquals(false, jLayeredPane0.isBackgroundSet());
      assertEquals(true, jLayeredPane0.isEnabled());
      assertEquals(0, jLayeredPane0.countComponents());
      assertEquals(false, jLayeredPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jLayeredPane0.isForegroundSet());
      assertEquals(false, jLayeredPane0.isMinimumSizeSet());
      assertEquals(false, jLayeredPane0.isPreferredSizeSet());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test101()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
  }

  @Test
  public void test102()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = piePlot0.getSectionOutlinesVisible();
      assertTrue(boolean0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      piePlot0.setCircular(boolean0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      PieDataset pieDataset0 = piePlot3D0.getDataset();
      assertNull(pieDataset0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      String string0 = ScrollPaneConstants.VIEWPORT;
      assertNotNull(string0);
      assertEquals("VIEWPORT", string0);
      
      Paint paint0 = ringPlot0.getSectionOutlinePaint((Comparable) string0);
      assertNull(paint0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = piePlot0.isCircular();
      assertTrue(boolean0);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      
      String string0 = ringPlot0.getPlotType();
      assertNotNull(string0);
      assertEquals("Pie Plot", string0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
  }
}
