/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:44:24 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.Format;
import java.util.EventListener;
import java.util.Locale;
import javax.swing.CellRendererPane;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.InternationalFormatter;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import javax.swing.tree.TreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.WaferMapPlot;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;


public class PiePlotEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertNotNull(piePlot3D1);
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D1.isSubplot());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertNotSame(piePlot3D1, piePlot3D0);
      assertNotSame(piePlot3D0, piePlot3D1);
  }

  @Test
  public void test01()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      PiePlot piePlot1 = new PiePlot();
      assertNotNull(piePlot1);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot1.getSimpleLabels());
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot1.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot1.isOutlineVisible());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(false, piePlot1.getIgnoreNullValues());
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot1.getLabelLinksVisible());
      assertEquals(false, piePlot1.isSubplot());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01D);
      assertEquals(false, piePlot1.getIgnoreZeroValues());
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(true, piePlot1.isCircular());
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertNotSame(piePlot1, piePlot0);
      
      boolean boolean0 = piePlot0.equals((Object) piePlot1);
      assertEquals(1.0E-5, piePlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot1.getSimpleLabels());
      assertEquals(90.0, piePlot1.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot1.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot1.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot1.isOutlineVisible());
      assertEquals(0, piePlot1.getPieIndex());
      assertEquals(false, piePlot1.getIgnoreNullValues());
      assertEquals(4.0, piePlot1.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot1.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot1.getLabelLinksVisible());
      assertEquals(false, piePlot1.isSubplot());
      assertEquals(0.025, piePlot1.getLabelGap(), 0.01D);
      assertEquals(false, piePlot1.getIgnoreZeroValues());
      assertNull(piePlot1.getNoDataMessage());
      assertEquals(true, piePlot1.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertTrue(boolean0);
      assertTrue(piePlot1.equals((Object)piePlot0));
      assertTrue(piePlot0.equals((Object)piePlot1));
      assertNotSame(piePlot1, piePlot0);
      assertNotSame(piePlot0, piePlot1);
  }

  @Test
  public void test02()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      int int0 = 0;
      ringPlot0.setInteriorGap((double) int0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      
      defaultKeyedValuesDataset0.removeChangeListener((DatasetChangeListener) ringPlot0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test03()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      PieDataset pieDataset0 = piePlot3D0.getDataset();
      assertNull(pieDataset0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertNotNull(piePlot0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      
      boolean boolean0 = piePlot0.equals((Object) piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      boolean boolean0 = defaultKeyedValuesDataset0.hasListener((EventListener) piePlot0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      piePlot0.setDataset((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      int int0 = 2876;
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertNotNull(piePlot3D1);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(false, piePlot3D1.isSubplot());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertNotSame(piePlot3D0, piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      
      piePlot3D0.setPieIndex(int0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(2876, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertNotSame(piePlot3D0, piePlot3D1);
      
      piePlot3D0.setDataset((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(2876, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertNotSame(piePlot3D0, piePlot3D1);
  }

  @Test
  public void test07()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      
      double double0 = 90.0;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, double0, double0);
      assertNotNull(line2D_Double0);
      assertEquals(90.0, line2D_Double0.x2, 0.01D);
      assertEquals(90.0, line2D_Double0.x1, 0.01D);
      assertEquals(90.0, line2D_Double0.y2, 0.01D);
      assertEquals(90.0, line2D_Double0.y1, 0.01D);
      
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(90.0, point2D_Double0.x, 0.01D);
      assertEquals(90.0, point2D_Double0.y, 0.01D);
      
      JOptionPane jOptionPane0 = new JOptionPane((Object) point2D_Double0);
      assertNotNull(jOptionPane0);
      assertEquals(90.0, point2D_Double0.x, 0.01D);
      assertEquals(90.0, point2D_Double0.y, 0.01D);
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      
      Rectangle rectangle0 = null;
      Rectangle rectangle1 = jOptionPane0.getBounds(rectangle0);
      assertNotNull(rectangle1);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(90.0, point2D_Double0.x, 0.01D);
      assertEquals(90.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      
      Rectangle rectangle2 = (Rectangle)piePlot3D0.getArcBounds(rectangle1, rectangle0, point2D_Double0.y, line2D_Double0.x2, rectangle1.width);
      assertNotNull(rectangle2);
      assertEquals(90.0, line2D_Double0.x2, 0.01D);
      assertEquals(90.0, line2D_Double0.x1, 0.01D);
      assertEquals(90.0, line2D_Double0.y2, 0.01D);
      assertEquals(90.0, line2D_Double0.y1, 0.01D);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle2.width);
      assertEquals(0, rectangle2.y);
      assertEquals(0, rectangle2.x);
      assertEquals(0, rectangle2.height);
      assertEquals(90.0, point2D_Double0.x, 0.01D);
      assertEquals(90.0, point2D_Double0.y, 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle2.getCenterX(), 0.01D);
      assertEquals(true, rectangle2.isEmpty());
      assertEquals(0.0, rectangle2.getHeight(), 0.01D);
      assertEquals(0.0, rectangle2.getX(), 0.01D);
      assertEquals(0.0, rectangle2.getY(), 0.01D);
      assertEquals(0.0, rectangle2.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle2.toString());
      assertEquals(0.0, rectangle2.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2.getMaxX(), 0.01D);
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertSame(rectangle1, rectangle2);
      assertSame(rectangle2, rectangle1);
  }

  @Test
  public void test08()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      
      int int0 = 0;
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertNotNull(compositeTitle0);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)compositeTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      
      double double0 = (-2233.16727142457);
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)piePlot0.getArcBounds(rectangle2D_Float0, rectangle2D_Float0, int0, int0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      int int0 = 917;
      boolean boolean0 = true;
      String string0 = "";
      Font font0 = null;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) ringPlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(917, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(917, bufferedImage0.getHeight());
      assertEquals(917, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(917, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
  }

  @Test
  public void test10()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      Graphics2D graphics2D0 = null;
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) piePlot3D0);
      assertNotNull(legendTitle0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertNull(legendTitle0.getID());
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)legendTitle0.getBounds();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertNull(legendTitle0.getID());
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.drawPie(graphics2D0, rectangle2D_Float0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = null;
      // Undeclared exception!
      try {
        piePlot0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      
      piePlot0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
  }

  @Test
  public void test13()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      assertNotNull(cellRendererPane0);
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      
      Rectangle rectangle0 = cellRendererPane0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      
      piePlot3D0.setLegendItemShape((Shape) rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 1;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PieLabelDistributor pieLabelDistributor0 = new PieLabelDistributor(int0);
      assertNotNull(pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      
      piePlot0.setLabelDistributor((AbstractPieLabelDistributor) pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test15()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setSimpleLabelOffset(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'offset' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      WaferMapPlot waferMapPlot0 = new WaferMapPlot();
      assertNotNull(waferMapPlot0);
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      
      RectangleInsets rectangleInsets0 = waferMapPlot0.getInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      
      piePlot0.setSimpleLabelOffset(rectangleInsets0);
      assertEquals(false, waferMapPlot0.isSubplot());
      assertEquals("WMAP_Plot", waferMapPlot0.getPlotType());
      assertEquals(true, waferMapPlot0.isOutlineVisible());
      assertNull(waferMapPlot0.getNoDataMessage());
      assertEquals(1.0F, waferMapPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, waferMapPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, waferMapPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, waferMapPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      FlowArrangement flowArrangement0 = new FlowArrangement();
      assertNotNull(flowArrangement0);
      
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) piePlot0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      assertNotNull(legendTitle0);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      RectangleInsets rectangleInsets0 = legendTitle0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01D);
      
      piePlot0.setLabelPadding(rectangleInsets0);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1.0, rectangleInsets0.getRight(), 0.01D);
  }

  @Test
  public void test18()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      
      TreeNode treeNode0 = null;
      JTree jTree0 = new JTree(treeNode0);
      assertNotNull(jTree0);
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isShowing());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(true, jTree0.isVisible());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTree0.isValid());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      
      TreeCellEditor treeCellEditor0 = null;
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, treeCellEditor0);
      assertNotNull(defaultTreeCellEditor0);
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isShowing());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(true, jTree0.isVisible());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTree0.isValid());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      
      Color color0 = defaultTreeCellEditor0.getBorderSelectionColor();
      assertNull(color0);
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, jTree0.isMinimumSizeSet());
      assertEquals(false, jTree0.isMaximumSizeSet());
      assertEquals(false, jTree0.isFocusCycleRoot());
      assertEquals(false, jTree0.isShowing());
      assertEquals(1, jTree0.getComponentCount());
      assertEquals(false, jTree0.isPreferredSizeSet());
      assertEquals(true, jTree0.isVisible());
      assertEquals(true, jTree0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTree0.isValid());
      assertEquals(false, jTree0.isFocusTraversalPolicySet());
      assertEquals(false, jTree0.isCursorSet());
      assertEquals(true, jTree0.isEnabled());
      assertEquals(true, jTree0.isBackgroundSet());
      assertEquals(1, jTree0.countComponents());
      assertEquals(false, jTree0.isForegroundSet());
      assertEquals(false, jTree0.getIgnoreRepaint());
      assertEquals(true, jTree0.isFontSet());
      assertEquals(false, jTree0.isDisplayable());
      assertEquals(false, jTree0.isLightweight());
      assertEquals(false, jTree0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try {
        piePlot0.setLabelPaint((Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertNotNull(xYLine3DRenderer0);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      
      int int0 = 0;
      Color color0 = (Color)xYLine3DRenderer0.getItemLabelPaint(int0, int0);
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      
      piePlot3D0.setLabelPaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
  }

  @Test
  public void test20()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      Font font0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      
      piePlot3D0.setLabelFont(font0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isTransformed());
      assertEquals("SansSerif", font0.getName());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
  }

  @Test
  public void test22()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)ganttRenderer0.getBaseOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      piePlot3D0.setLabelLinkStroke((Stroke) basicStroke0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test23()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertNull(pieDataset0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      Paint paint0 = piePlot3D0.getSectionOutlinePaint((Comparable) arc2D_Double0.extent);
      assertNull(paint0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      Color color0 = (Color)ringPlot0.getLabelPaint();
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      
      ringPlot0.setLabelLinkPaint((Paint) color0);
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      double double0 = 1459.8954759;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      
      piePlot3D0.setExplodePercent((Comparable) double0, (double) int0);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) int0, (double) int0, double0, (double) int0, (double) int0, (double) int0, int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(1459.8954759, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(729.94773795, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1459.8954759, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      
      double double1 = piePlot3D0.getExplodePercent((Comparable) arc2D_Double0.width);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(1459.8954759, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(729.94773795, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1459.8954759, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test26()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) int0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0, int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      
      double double0 = piePlot0.getExplodePercent((Comparable) arc2D_Double0.width);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(double0, double0, double0, double0, double0, double0, int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      
      boolean boolean0 = true;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(arc2D_Double0.extent, arc2D_Double0.extent, boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      
      Stroke stroke0 = stackedBarRenderer3D0.getSeriesStroke(int0);
      assertNull(stroke0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      
      // Undeclared exception!
      try {
        piePlot0.setBaseSectionOutlineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      piePlot3D0.setBaseSectionOutlineStroke((Stroke) basicStroke0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test
  public void test29()  throws Throwable  {
      float float0 = (-1006.0524F);
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(float0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      BasicStroke basicStroke1 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(float0);
      assertNotNull(basicStroke1);
      assertEquals(2, basicStroke1.getLineJoin());
      assertEquals(10.0F, basicStroke1.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke1.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke1.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke1.getEndCap());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertSame(basicStroke1, basicStroke0);
  }

  @Test
  public void test30()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      assertNotNull(xYSplineAndShapeRenderer0);
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      
      int int0 = 917;
      Color color0 = (Color)xYSplineAndShapeRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      
      ringPlot0.setBaseSectionOutlinePaint((Paint) color0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test31()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      
      boolean boolean0 = true;
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(arc2D_Double0.start, boolean0);
      assertNotNull(color0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getGreen());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getRed());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertNull(pieDataset0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertNotNull(ringPlot0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setBaseSectionPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      Color color0 = (Color)piePlot3D0.getLabelOutlinePaint();
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      piePlot3D0.setBaseSectionPaint((Paint) color0);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 1;
      double double0 = (-724.69);
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue((Comparable) double0, (double) int0);
      assertEquals(1, defaultKeyedValuesDataset0.getItemCount());
      
      defaultKeyedValuesDataset0.setValue((Comparable) int0, (double) int0);
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      
      Comparable comparable0 = piePlot0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(2, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(1, comparable0);
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      Comparable comparable0 = piePlot0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(1541, comparable0);
  }

  @Test
  public void test36()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = 917;
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertNotNull(comparable0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(917, comparable0);
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      
      DrawingSupplier drawingSupplier0 = ganttRenderer0.getDrawingSupplier();
      assertNull(drawingSupplier0);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      
      piePlot0.setDrawingSupplier(drawingSupplier0);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Color color0 = (Color)piePlot0.lookupSectionPaint(int0, boolean0);
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test38()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Color color0 = (Color)piePlot0.lookupSectionPaint(int0, boolean0);
      assertNotNull(color0);
      assertEquals(85, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=85,b=85]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(85, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(-43691, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test39()  throws Throwable  {
      double double0 = 90.0;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, double0, double0);
      assertNotNull(line2D_Double0);
      assertEquals(90.0, line2D_Double0.x2, 0.01D);
      assertEquals(90.0, line2D_Double0.y2, 0.01D);
      assertEquals(90.0, line2D_Double0.y1, 0.01D);
      assertEquals(90.0, line2D_Double0.x1, 0.01D);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(line2D_Double0.x1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (90.0) argument.
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      double double0 = (-1754.0871580322512);
      // Undeclared exception!
      try {
        piePlot3D0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-1754.0871580322512) argument.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      
      Rotation rotation0 = ringPlot0.getDirection();
      assertNotNull(rotation0);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      
      ringPlot0.setDirection(rotation0);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
  }

  @Test
  public void test42()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      PieDataset pieDataset0 = piePlot3D0.getDataset();
      assertNull(pieDataset0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      piePlot3D0.setDataset(pieDataset0);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
  }

  @Test
  public void test43()  throws Throwable  {
      float float0 = 1.0F;
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      ringPlot0.setMaximumLabelWidth((double) float0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      
      piePlot0.setShadowYOffset(line2D_Double0.y2);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
  }

  @Test
  public void test45()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertNotNull(xYLine3DRenderer0);
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      
      int int0 = 151;
      Color color0 = (Color)xYLine3DRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      
      piePlot0.setLabelOutlinePaint((Paint) color0);
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test46()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      
      piePlot0.setLabelLinkMargin(rectangle2D_Double0.width);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.0, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.getLabelOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test48()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertNotNull(point2D_Float0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      
      boolean boolean0 = line2D_Float0.contains((double) line2D_Float0.y1, (double) line2D_Float0.y1, (double) rectangle2D_Float0.height, (double) point2D_Float0.y);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertFalse(boolean0);
      
      piePlot3D0.setSimpleLabels(boolean0);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      
      Comparable<Object> comparable0 = null;
      Format format0 = null;
      InternationalFormatter internationalFormatter0 = new InternationalFormatter(format0);
      assertNotNull(internationalFormatter0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) internationalFormatter0);
      assertNotNull(jFormattedTextField0);
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jFormattedTextField0.getDisabledTextColor();
      assertNotNull(colorUIResource0);
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(184, colorUIResource0.getRed());
      assertEquals(207, colorUIResource0.getGreen());
      assertEquals(-4665371, colorUIResource0.getRGB());
      assertEquals("javax.swing.plaf.ColorUIResource[r=184,g=207,b=229]", colorUIResource0.toString());
      assertEquals(229, colorUIResource0.getBlue());
      
      // Undeclared exception!
      try {
        piePlot3D0.setSectionOutlinePaint((Comparable) comparable0, (Paint) colorUIResource0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertNull(pieDataset0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)piePlot3D0.getLabelDistributor();
      assertNotNull(pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      
      boolean boolean0 = false;
      piePlot0.setLabelLinksVisible(boolean0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
  }

  @Test
  public void test52()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      
      ringPlot0.setLegendLabelURLGenerator(pieURLGenerator0);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
  }

  @Test
  public void test53()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      boolean boolean0 = piePlot3D0.getIgnoreZeroValues();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertFalse(boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      
      RectangleInsets rectangleInsets0 = piePlot0.getSimpleLabelOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0.18, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      assertNotNull(xYSplineAndShapeRenderer0);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      int int0 = 917;
      Color color0 = (Color)xYSplineAndShapeRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      Comparable<PiePlot> comparable0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setSectionPaint((Comparable) comparable0, (Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      
      boolean boolean0 = false;
      piePlot0.setSectionOutlinesVisible(boolean0);
      assertEquals(false, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      
      Font font0 = piePlot3D0.getLabelFont();
      assertNotNull(font0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(0, font0.getStyle());
      assertEquals(true, font0.isPlain());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.isBold());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
  }

  @Test
  public void test58()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      
      int int0 = 0;
      piePlot0.setShadowXOffset((double) int0);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
  }

  @Test
  public void test59()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertNotNull(color0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(151, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals(128, color0.getAlpha());
      assertEquals(151, color0.getBlue());
      assertEquals(151, color0.getRed());
  }

  @Test
  public void test60()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      
      PieToolTipGenerator pieToolTipGenerator0 = ringPlot0.getToolTipGenerator();
      assertNull(pieToolTipGenerator0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
  }

  @Test
  public void test61()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      //  // Unstable assertion: assertNotNull(piePlot0);
      //  // Unstable assertion: assertEquals(true, piePlot0.isCircular());
      //  // Unstable assertion: assertEquals(15, piePlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0, piePlot0.getPieIndex());
      //  // Unstable assertion: assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(piePlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, piePlot0.getLabelLinksVisible());
      //  // Unstable assertion: assertEquals(false, piePlot0.getIgnoreNullValues());
      //  // Unstable assertion: assertEquals(false, piePlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, piePlot0.getSectionOutlinesVisible());
      //  // Unstable assertion: assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, piePlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, piePlot0.getSimpleLabels());
      //  // Unstable assertion: assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, piePlot0.getIgnoreZeroValues());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(1311.5492521358, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(1667.292942604, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(655.7746260679, rectangle2D_Double0.getMaxX(), 0.01D);
      
      double double0 = rectangle2D_Double0.getWidth();
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(1311.5492521358, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(1667.292942604, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(655.7746260679, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(1311.5492521358, double0, 0.01D);
      
      piePlot0.setLabelGap(double0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(1311.5492521358, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(true, piePlot0.isCircular());
      //  // Unstable assertion: assertEquals(1311.5492521358, piePlot0.getLabelGap(), 0.01D);
      //  // Unstable assertion: assertEquals(15, piePlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(0, piePlot0.getPieIndex());
      //  // Unstable assertion: assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(piePlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, piePlot0.getLabelLinksVisible());
      //  // Unstable assertion: assertEquals(false, piePlot0.getIgnoreNullValues());
      //  // Unstable assertion: assertEquals(false, piePlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, piePlot0.getSectionOutlinesVisible());
      //  // Unstable assertion: assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, piePlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, piePlot0.getSimpleLabels());
      //  // Unstable assertion: assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, piePlot0.getIgnoreZeroValues());
      //  // Unstable assertion: assertEquals(1667.292942604, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(3334.585885208, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-655.7746260679), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(655.7746260679, rectangle2D_Double0.getMaxX(), 0.01D);
  }

  @Test
  public void test62()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      
      double double0 = ringPlot0.getShadowXOffset();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test63()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      
      Color color0 = (Color)piePlot0.getBaseSectionOutlinePaint();
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
  }

  @Test
  public void test64()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      
      boolean boolean0 = piePlot3D0.getSectionOutlinesVisible();
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertTrue(boolean0);
  }

  @Test
  public void test65()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      
      Color color0 = (Color)piePlot3D0.getLabelBackgroundPaint();
      assertNotNull(color0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-64, color0.getRGB());
      assertEquals(255, color0.getRed());
  }

  @Test
  public void test66()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Color color0 = (Color)piePlot0.getShadowPaint();
      assertNotNull(color0);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test67()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      piePlot0.setLabelOutlineStroke((Stroke) basicStroke0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test
  public void test68()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      
      double double0 = ringPlot0.getShadowYOffset();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test69()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      
      Paint paint0 = null;
      piePlot0.setShadowPaint(paint0);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
  }

  @Test
  public void test70()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      
      boolean boolean0 = false;
      piePlot0.setIgnoreZeroValues(boolean0);
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
  }

  @Test
  public void test71()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      Color color0 = (Color)piePlot3D0.getLabelLinkPaint();
      assertNotNull(color0);
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test72()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(boolean0, boolean0);
      assertNotNull(deviationRenderer0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      
      Stroke stroke0 = deviationRenderer0.getSeriesOutlineStroke(int0);
      assertNull(stroke0);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      
      piePlot0.setSectionOutlineStroke((Comparable) int0, stroke0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test73()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      
      int int0 = 0;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(int0);
      assertNotNull(color0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      
      piePlot0.setLabelBackgroundPaint((Paint) color0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
  }

  @Test
  public void test74()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      PieURLGenerator pieURLGenerator0 = piePlot3D0.getURLGenerator();
      assertNull(pieURLGenerator0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      
      piePlot3D0.setURLGenerator(pieURLGenerator0);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test75()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      String string0 = "S";
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      
      Locale locale0 = defaultTreeCellRenderer0.getLocale();
      assertNotNull(locale0);
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator(string0, locale0);
      assertNotNull(standardPieToolTipGenerator0);
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals("S", standardPieToolTipGenerator0.getLabelFormat());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      piePlot0.setToolTipGenerator((PieToolTipGenerator) standardPieToolTipGenerator0);
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("S", standardPieToolTipGenerator0.getLabelFormat());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test76()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.getLabelLinkStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
  }

  @Test
  public void test77()  throws Throwable  {
      String string0 = "ag";
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      
      Color color0 = (Color)piePlot3D0.lookupSectionPaint(string0);
      assertNotNull(color0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
  }

  @Test
  public void test78()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      int int0 = 1541;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertNotNull(piePlot0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      piePlot0.setMinimumArcAngleToDraw((double) int0);
      assertEquals(1541, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(1541.0, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
  }

  @Test
  public void test79()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = piePlot0.getPieIndex();
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, int0);
  }

  @Test
  public void test80()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      
      Paint paint0 = ringPlot0.getSectionPaint((Comparable) arc2D_Double0.x);
      assertNull(paint0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
  }

  @Test
  public void test81()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      
      Color color0 = (Color)ringPlot0.getBaseSectionPaint();
      assertNotNull(color0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
  }

  @Test
  public void test82()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      Stroke stroke0 = ringPlot0.getSectionOutlineStroke((Comparable) point2D_Double0.y);
      assertNull(stroke0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test83()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      
      int int0 = 0;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      
      piePlot0.setLabelShadowPaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
  }

  @Test
  public void test84()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      
      boolean boolean0 = ringPlot0.getSimpleLabels();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertFalse(boolean0);
  }

  @Test
  public void test85()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertNotNull(standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      
      piePlot3D0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
  }

  @Test
  public void test86()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) piePlot3D0);
      assertNotNull(jFreeChart0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      int int0 = 334;
      ChartRenderingInfo chartRenderingInfo0 = null;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(334, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(334, bufferedImage0.getHeight());
      assertEquals(334, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(334, bufferedImage0.getTileWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
  }

  @Test
  public void test87()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      
      boolean boolean0 = piePlot0.getLabelLinksVisible();
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertTrue(boolean0);
  }

  @Test
  public void test88()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      
      RectangleInsets rectangleInsets0 = piePlot3D0.getLabelPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
  }

  @Test
  public void test89()  throws Throwable  {
      int int0 = 0;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) int0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0, int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(arc2D_Double0.start);
      assertNotNull(basicStroke0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test90()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      
      double double0 = ringPlot0.getMinimumArcAngleToDraw();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, double0, 0.01D);
  }

  @Test
  public void test91()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      
      boolean boolean0 = false;
      piePlot0.setIgnoreNullValues(boolean0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test
  public void test92()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertNotNull(piePlot0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = piePlot3D0.getLegendLabelToolTipGenerator();
      assertNull(pieSectionLabelGenerator0);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      
      piePlot0.setLabelGenerator(pieSectionLabelGenerator0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
  }

  @Test
  public void test93()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNotNull(ringPlot0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      
      boolean boolean0 = ringPlot0.getIgnoreNullValues();
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test94()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.getBaseSectionOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test95()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      
      CellRendererPane cellRendererPane0 = new CellRendererPane();
      assertNotNull(cellRendererPane0);
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = cellRendererPane0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((double) rectangle0.x, (double) rectangle0.x, (double) rectangle0.x, (double) rectangle0.x);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      piePlot3D0.setStartAngle(line2D_Double0.x1);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, cellRendererPane0.isShowing());
      assertEquals(false, cellRendererPane0.isVisible());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(true, cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, cellRendererPane0.isValid());
      assertEquals(false, cellRendererPane0.isFontSet());
      assertEquals(false, cellRendererPane0.isMinimumSizeSet());
      assertEquals(0, cellRendererPane0.getComponentCount());
      assertEquals(false, cellRendererPane0.isCursorSet());
      assertEquals(false, cellRendererPane0.isForegroundSet());
      assertEquals(false, cellRendererPane0.isFocusCycleRoot());
      assertEquals(true, cellRendererPane0.isEnabled());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, cellRendererPane0.isOpaque());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertEquals(false, cellRendererPane0.isDisplayable());
      assertEquals(false, cellRendererPane0.isPreferredSizeSet());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(0, cellRendererPane0.getY());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.countComponents());
      assertEquals(false, cellRendererPane0.isLightweight());
      assertEquals(false, cellRendererPane0.getIgnoreRepaint());
      assertEquals(false, cellRendererPane0.isBackgroundSet());
      assertEquals(false, cellRendererPane0.isMaximumSizeSet());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertEquals(false, cellRendererPane0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(false, cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test96()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNotNull(piePlot3D0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      
      boolean boolean0 = true;
      piePlot3D0.setCircular(boolean0);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
  }

  @Test
  public void test97()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultKeyedValuesDataset0);
      assertNotNull(piePlot0);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      String string0 = piePlot0.getPlotType();
      assertNotNull(string0);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals("Pie Plot", string0);
  }
}
