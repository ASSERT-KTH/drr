/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:34 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Properties;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JToolBar;
import javax.swing.JToolTip;
import javax.swing.table.DefaultTableCellRenderer;




import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class ShapeUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 1.5;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
      
      double double1 = (-208.898);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(point2D_Double0.x, point2D_Double0.x, double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-207.398), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-102.949), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-208.898), rectangle2D_Double0.height, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      assertEquals((-207.398), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-102.949), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-208.898), rectangle2D_Double0.height, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      Rectangle rectangle0 = ellipse2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "Domain";
      int int0 = (-1529);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(string0);
      assertNotNull(jRadioButtonMenuItem0);
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      
      JToolTip jToolTip0 = jRadioButtonMenuItem0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      
      Rectangle rectangle0 = jToolTip0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      rectangle0.width = int0;
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-764.5), rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-1529,height=0]", rectangle0.toString());
      assertEquals((-1529.0), rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals((-1529.0), rectangle0.getWidth(), 0.01D);
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-1529), rectangle0.width);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertFalse(boolean0);
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals((-764.5), rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-1529,height=0]", rectangle0.toString());
      assertEquals((-1529.0), rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals((-1529.0), rectangle0.getWidth(), 0.01D);
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals((-1529), rectangle0.width);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Domain";
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      
      Rectangle rectangle0 = defaultTableCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      int int0 = (-1529);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(string0);
      assertNotNull(jRadioButtonMenuItem0);
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      
      JToolTip jToolTip0 = jRadioButtonMenuItem0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      
      Rectangle rectangle1 = jToolTip0.getBounds();
      assertTrue(rectangle1.equals((Object)rectangle0));
      assertNotNull(rectangle1);
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      
      rectangle1.width = int0;
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals((-1529.0), rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-1529,height=0]", rectangle1.toString());
      assertEquals(true, rectangle1.isEmpty());
      assertEquals((-764.5), rectangle1.getCenterX(), 0.01D);
      assertEquals((-1529.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(0, rectangle1.height);
      assertEquals((-1529), rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle1, (Rectangle2D) rectangle0);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean0);
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals((-1529.0), rectangle1.getWidth(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=-1529,height=0]", rectangle1.toString());
      assertEquals(true, rectangle1.isEmpty());
      assertEquals((-764.5), rectangle1.getCenterX(), 0.01D);
      assertEquals((-1529.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle1.height);
      assertEquals((-1529), rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      
      Rectangle rectangle0 = defaultTableCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 1.5;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(point2D_Double0.x, point2D_Double0.x, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.5, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
      
      JPanel jPanel0 = new JPanel();
      assertNotNull(jPanel0);
      assertEquals(false, jPanel0.isMinimumSizeSet());
      assertEquals(false, jPanel0.isFocusCycleRoot());
      assertEquals(true, jPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPanel0.isForegroundSet());
      assertEquals(false, jPanel0.isPreferredSizeSet());
      assertEquals(true, jPanel0.isFontSet());
      assertEquals(false, jPanel0.isShowing());
      assertEquals(false, jPanel0.isMaximumSizeSet());
      assertEquals(false, jPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPanel0.isFocusTraversalPolicySet());
      assertEquals(false, jPanel0.isCursorSet());
      assertEquals(false, jPanel0.isValid());
      assertEquals(false, jPanel0.getIgnoreRepaint());
      assertEquals(true, jPanel0.isVisible());
      assertEquals(true, jPanel0.isEnabled());
      assertEquals(true, jPanel0.isBackgroundSet());
      assertEquals(0, jPanel0.countComponents());
      assertEquals(false, jPanel0.isDisplayable());
      assertEquals(0, jPanel0.getComponentCount());
      assertEquals(false, jPanel0.isLightweight());
      
      Rectangle rectangle0 = jPanel0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, jPanel0.isMinimumSizeSet());
      assertEquals(false, jPanel0.isFocusCycleRoot());
      assertEquals(true, jPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPanel0.isForegroundSet());
      assertEquals(false, jPanel0.isPreferredSizeSet());
      assertEquals(true, jPanel0.isFontSet());
      assertEquals(false, jPanel0.isShowing());
      assertEquals(false, jPanel0.isMaximumSizeSet());
      assertEquals(false, jPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPanel0.isFocusTraversalPolicySet());
      assertEquals(false, jPanel0.isCursorSet());
      assertEquals(false, jPanel0.isValid());
      assertEquals(false, jPanel0.getIgnoreRepaint());
      assertEquals(true, jPanel0.isVisible());
      assertEquals(true, jPanel0.isEnabled());
      assertEquals(true, jPanel0.isBackgroundSet());
      assertEquals(0, jPanel0.countComponents());
      assertEquals(false, jPanel0.isDisplayable());
      assertEquals(0, jPanel0.getComponentCount());
      assertEquals(false, jPanel0.isLightweight());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle0);
      assertFalse(boolean0);
      assertEquals(1.5, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.25, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, jPanel0.isMinimumSizeSet());
      assertEquals(false, jPanel0.isFocusCycleRoot());
      assertEquals(true, jPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPanel0.isForegroundSet());
      assertEquals(false, jPanel0.isPreferredSizeSet());
      assertEquals(true, jPanel0.isFontSet());
      assertEquals(false, jPanel0.isShowing());
      assertEquals(false, jPanel0.isMaximumSizeSet());
      assertEquals(false, jPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPanel0.isFocusTraversalPolicySet());
      assertEquals(false, jPanel0.isCursorSet());
      assertEquals(false, jPanel0.isValid());
      assertEquals(false, jPanel0.getIgnoreRepaint());
      assertEquals(true, jPanel0.isVisible());
      assertEquals(true, jPanel0.isEnabled());
      assertEquals(true, jPanel0.isBackgroundSet());
      assertEquals(0, jPanel0.countComponents());
      assertEquals(false, jPanel0.isDisplayable());
      assertEquals(0, jPanel0.getComponentCount());
      assertEquals(false, jPanel0.isLightweight());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.5, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.5, point2D_Double0.x, 0.01D);
      assertEquals(1.5, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = (-6.063984F);
      float float1 = 2247.0317F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float1, float1, float0, float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertNotNull(line2D_Float0);
      assertEquals((-6.063984F), line2D_Float0.y2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.y1, 0.01F);
      assertEquals((-6.063984F), line2D_Float0.x2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.x1, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.x2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals((-6.063984F), line2D_Float0.y2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.y1, 0.01F);
      assertEquals((-6.063984F), line2D_Float0.x2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.x1, 0.01F);
  }

  @Test
  public void test07()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.y1);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = (-3799.9356428202723);
      Shape shape0 = null;
      float float0 = 1.0F;
      Shape shape1 = ShapeUtilities.rotateShape(shape0, double0, float0, float0);
      assertNull(shape1);
  }

  @Test
  public void test09()  throws Throwable  {
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      
      Rectangle rectangle0 = jPopupMenu_Separator0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle0, (double) rectangle0.y, (float) rectangle0.x, (float) rectangle0.x);
      assertNotNull(path2D_Double0);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      
      Rectangle rectangle0 = defaultListCellRenderer0.bounds();
      assertNotNull(rectangle0);
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.y, (double) rectangle0.height);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Shape shape0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      
      double double0 = 0.0;
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, rectangleAnchor0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isValid());
      
      Rectangle rectangle0 = defaultListCellRenderer0.bounds();
      assertNotNull(rectangle0);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor0.toString());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.width, (double) rectangle0.height);
      assertNotNull(path2D_Double0);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor0.toString());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test13()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      
      Shape shape0 = null;
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, (double) line2D_Float0.y2, (double) ellipse2D_Float0.y);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      
      Rectangle rectangle0 = defaultTableCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, (double) rectangle0.y, (double) rectangle0.x);
      assertNotNull(path2D_Double0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test15()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath1);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
  }

  @Test
  public void test16()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test17()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      int int0 = 0;
      GeneralPath generalPath1 = new GeneralPath(int0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertEquals(0, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(boolean0);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test18()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = null;
      int int0 = 0;
      GeneralPath generalPath1 = new GeneralPath(int0);
      assertNotNull(generalPath1);
      assertEquals(0, generalPath1.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(0, generalPath1.getWindingRule());
  }

  @Test
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      Polygon polygon0 = new Polygon(intArray0, intArray0, intArray0[1]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotNull(polygon1);
      assertNotSame(polygon1, polygon0);
      assertEquals(0, polygon1.npoints);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(boolean0);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test22()  throws Throwable  {
      Polygon polygon0 = null;
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
  }

  @Test
  public void test23()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      Polygon polygon0 = null;
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertEquals(0, polygon1.npoints);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
  }

  @Test
  public void test25()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      
      Arc2D.Double arc2D_Double1 = (Arc2D.Double)ShapeUtilities.clone((Shape) arc2D_Double0);
      assertTrue(arc2D_Double1.equals((Object)arc2D_Double0));
      assertTrue(arc2D_Double0.equals((Object)arc2D_Double1));
      assertNotNull(arc2D_Double1);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertNotSame(arc2D_Double1, arc2D_Double0);
      assertNotSame(arc2D_Double0, arc2D_Double1);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      
      Rectangle rectangle0 = defaultTableCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      double double0 = 3067.13;
      arc2D_Double0.setArc((Rectangle2D) rectangle0, point2D_Double0.x, double0, rectangle0.width);
      assertFalse(arc2D_Double0.equals((Object)arc2D_Double1));
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertNotSame(arc2D_Double0, arc2D_Double1);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(3067.13, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double1);
      assertFalse(arc2D_Double1.equals((Object)arc2D_Double0));
      assertFalse(arc2D_Double0.equals((Object)arc2D_Double1));
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertNotSame(arc2D_Double1, arc2D_Double0);
      assertNotSame(arc2D_Double0, arc2D_Double1);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(3067.13, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(float0, float0, float0, float0, float0, float0, int0);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      
      Properties[] propertiesArray0 = new Properties[5];
      JList<Properties> jList0 = new JList<Properties>(propertiesArray0);
      assertNotNull(jList0);
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      double double0 = 1919.1583;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle0, double0, (double) float0, rectangle0.y);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(1919.1583, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(1919.1583, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      float float0 = (-6.063984F);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      double double0 = Double.NaN;
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) float0, point2D_Double0.y, (double) float0, double0, (double) float0, point2D_Double0.y, int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals((-9.095975875854492), arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals((-12.127967834472656), arc2D_Double0.getMaxX(), 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.width, 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.height, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals((-9.095975875854492), arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals((-12.127967834472656), arc2D_Double0.getMaxX(), 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals((-6.063983917236328), arc2D_Double0.width, 0.01D);
      assertEquals(Double.NaN, arc2D_Double0.height, 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      
      int int0 = 0;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      
      double double0 = 2.0;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) int0, double0, arc2D_Double0.y, (double) intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Double0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(2.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
  }

  @Test
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[6];
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      
      int int0 = 0;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) int0, (double) ellipse2D_Float0.y, arc2D_Double0.y, (double) intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, ellipse2D0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, (Ellipse2D) ellipse2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      float float0 = (-6.063984F);
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      float float1 = 2247.0317F;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) float1, point2D_Double0.y, point2D_Double0.x);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertNotNull(line2D_Double0);
      assertEquals(2247.03173828125, line2D_Double0.y1, 0.01D);
      assertEquals((-6.063983917236328), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(float1, float1, float0, float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertNotNull(line2D_Float0);
      assertEquals((-6.063984F), line2D_Float0.x2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.y1, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.x1, 0.01F);
      assertEquals((-6.063984F), line2D_Float0.y2, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(boolean0);
      assertEquals(2247.03173828125, line2D_Double0.y1, 0.01D);
      assertEquals((-6.063983917236328), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals((-6.063984F), line2D_Float0.x2, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.y1, 0.01F);
      assertEquals(2247.0317F, line2D_Float0.x1, 0.01F);
      assertEquals((-6.063984F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      double double0 = (-0.10969455008506712);
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0.x, point2D_Double0.x, point2D_Double0.x, point2D_Double0.x);
      assertNotNull(line2D_Double0);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      
      Line2D.Double line2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Double1);
      assertFalse(boolean0);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      float float0 = 0.0F;
      Line2D line2D0 = null;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal(line2D0, (Line2D) line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      float float0 = (-1035.3281F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) polygon0);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test38()  throws Throwable  {
      float float0 = (-0.5349302F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test39()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertNotNull(jDesktopPane0);
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      
      Rectangle rectangle0 = jDesktopPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test40()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertTrue(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test41()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      
      Rectangle rectangle0 = defaultTableCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      Rectangle rectangle0 = ellipse2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test44()  throws Throwable  {
      double double0 = (-0.10969455008506712);
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0.x, point2D_Double0.x, point2D_Double0.x, point2D_Double0.x);
      assertNotNull(line2D_Double0);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(point2D_Double0.y, line2D_Double0.y1, line2D_Double0.y1, line2D_Double0.y2);
      assertNotNull(ellipse2D_Double0);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-0.16454182512760068), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-0.21938910017013424), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-0.21938910017013424), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-0.16454182512760068), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.height, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.width, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) ellipse2D_Double0);
      assertFalse(boolean0);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-0.16454182512760068), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-0.21938910017013424), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-0.21938910017013424), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-0.16454182512760068), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.height, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.x, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), ellipse2D_Double0.width, 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = (-0.10969455008506712);
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0.x, point2D_Double0.x, point2D_Double0.x, point2D_Double0.x);
      assertNotNull(line2D_Double0);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertTrue(boolean0);
      assertEquals((-0.10969455008506712), line2D_Double0.y1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x1, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.y2, 0.01D);
      assertEquals((-0.10969455008506712), line2D_Double0.x2, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.y, 0.01D);
      assertEquals((-0.10969455008506712), point2D_Double0.x, 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Line2D line2D0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) line2D0);
      assertNull(shape0);
  }

  @Test
  public void test48()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(ellipse2D_Float0.width, ellipse2D_Float0.width);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      float float0 = 0.0F;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      JToolBar jToolBar0 = new JToolBar();
      assertNotNull(jToolBar0);
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isValid());
      
      Rectangle rectangle0 = jToolBar0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtilities.getPointInRectangle(line2D_Double0.y2, line2D_Double0.y2, (Rectangle2D) rectangle0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      
      Rectangle rectangle0 = defaultListCellRenderer0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond((float) rectangle0.x);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 6;
      BufferedImage bufferedImage0 = new BufferedImage(int0, int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertNotNull(sunGraphics2D0);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      
      ImageIcon imageIcon0 = new ImageIcon((Image) bufferedImage0);
      assertNotNull(imageIcon0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      JButton jButton0 = new JButton((Icon) imageIcon0);
      assertNotNull(jButton0);
      assertEquals(false, jButton0.isLightweight());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isValid());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      Rectangle rectangle0 = jButton0.bounds();
      assertNotNull(rectangle0);
      assertEquals(false, jButton0.isLightweight());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isValid());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      ShapeUtilities.drawRotatedShape((Graphics2D) sunGraphics2D0, (Shape) rectangle0, (double) int0, (float) rectangle0.y, (float) rectangle0.width);
      assertEquals(false, jButton0.isLightweight());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.isValid());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isShowing());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(6, bufferedImage0.getTileHeight());
      assertEquals(6, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(6, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(6, bufferedImage0.getHeight());
      assertEquals(6, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
  }
}
