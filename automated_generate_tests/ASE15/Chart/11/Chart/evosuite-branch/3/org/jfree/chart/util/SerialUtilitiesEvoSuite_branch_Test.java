/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:50:56 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.text.AttributedString;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JToolBar;
import javax.swing.plaf.ColorUIResource;



import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.jfree.chart.util.SerialUtilities;
import org.junit.runner.RunWith;


public class SerialUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      String string0 = "java.awt.geom.Line2D";
      AttributedString attributedString0 = new AttributedString(string0);
      assertNotNull(attributedString0);
      
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
      assertEquals(116, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000t\u0000\u0014java.awt.geom.Line2Dw\u0006\u0000j\u0000\u0000\u0000\u0014sr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\fw\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000x", byteArrayOutputStream0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      AttributedString attributedString0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      AttributedString attributedString0 = null;
      int int0 = 1088;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        AttributedString attributedString0 = SerialUtilities.readAttributedString(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "{4BB+qXZGf\\,7";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      Point point0 = null;
      SerialUtilities.writePoint2D((Point2D) point0, objectOutputStream0);
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertNotNull(defaultListCellRenderer_UIResource0);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) rectangle0.height, (double) rectangle0.width);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      
      SerialUtilities.writePoint2D((Point2D) point2D_Double0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      
      String string0 = "^5Y";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
  }

  @Test
  public void test08()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertNotNull(defaultListCellRenderer_UIResource0);
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      Shape shape0 = null;
      String string0 = "RlYjZHu#mOBP-";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape(shape0, objectOutputStream0);
  }

  @Test
  public void test11()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      
      Rectangle rectangle0 = jToolBar_Separator0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Stroke stroke0 = null;
      int int0 = 3;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      SerialUtilities.writeStroke(stroke0, objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test16()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Paint paint0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      SerialUtilities.writePaint(paint0, objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertNotNull(defaultListCellRenderer0);
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      
      ColorUIResource colorUIResource0 = (ColorUIResource)defaultListCellRenderer0.getBackground();
      assertNotNull(colorUIResource0);
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writePaint((Paint) colorUIResource0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 3;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      Color color0 = Color.white;
      assertNotNull(color0);
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      
      SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
      assertEquals(579, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u000Ejava.awt.Color\u0001\uFFFD\u0017\uFFFD\u0010\uFFFD3u\u0002\u0000\u0005F\u0000\u0006falphaI\u0000\u0005valueL\u0000\u0002cst\u0000\u001BLjava/awt/color/ColorSpace;[\u0000\tfrgbvaluet\u0000\u0002[F[\u0000\u0006fvalueq\u0000~\u0000\u0002xpsq\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFDsr\u0000\u001Djava.awt.color.ICC_ColorSpace/\uFFFD\uFFFD\uFFFD\uFFFDN\uFFFD\uFFFD\u0002\u0000\u0006Z\u0000\rneedScaleInit[\u0000\ndiffMinMaxq\u0000~\u0000\u0002[\u0000\rinvDiffMinMaxq\u0000~\u0000\u0002[\u0000\u0006maxValq\u0000~\u0000\u0002[\u0000\u0006minValq\u0000~\u0000\u0002L\u0000\u000BthisProfilet\u0000\u001CLjava/awt/color/ICC_Profile;xr\u0000\u0019java.awt.color.ColorSpace\uFFFDQT\uFFFDO[\uFFFD\uFFFD\u0002\u0000\u0002I\u0000\rnumComponentsI\u0000\u0004typexp\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0005\u0001ppur\u0000\u0002[F\u000B\uFFFD\uFFFD\uFFFD\"\uFFFD\fB\u0002\u0000\u0000xp\u0000\u0000\u0000\u0003?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000\u001Djava.awt.color.ICC_ProfileRGBv\b\u0011\uFFFD\uFFFD\u01E7\u0006\u0002\u0000\u0000xr\u0000\u001Ajava.awt.color.ICC_Profile\uFFFDW\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDB\u0003\u0000\u0001I\u0000\u001FiccProfileSerializedDataVersionxp\u0000\u0000\u0000\u0001t\u0000\u0007CS_sRGBpxpp", byteArrayOutputStream0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
  }

  @Test
  public void test20()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Class<BasicStroke> class0 = BasicStroke.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertFalse(boolean0);
  }
}
