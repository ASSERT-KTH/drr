/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:35 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.BoundedRangeModel;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JTextPane;
import javax.swing.JToolBar;
import javax.swing.JToolTip;
import javax.swing.text.DefaultFormatter;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;


public class ShapeUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      JProgressBar jProgressBar0 = new JProgressBar((BoundedRangeModel) defaultBoundedRangeModel0);
      assertNotNull(jProgressBar0);
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      
      Rectangle rectangle0 = jProgressBar0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      
      float float0 = (-3459.1545F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) rectangle0.height, float0, (float) polygon0.npoints, (float) rectangle0.height);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-3459.1545F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, polygon0.npoints);
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle0);
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-3459.1545F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, polygon0.npoints);
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-3459.154541015625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      JProgressBar jProgressBar0 = new JProgressBar((BoundedRangeModel) defaultBoundedRangeModel0);
      assertNotNull(jProgressBar0);
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jProgressBar0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
  }

  @Test
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[8];
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isValid());
      
      Rectangle rectangle0 = jInternalFrame0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isValid());
      
      int int0 = (-127);
      Rectangle rectangle1 = new Rectangle(int0, rectangle0.width, rectangle0.height, rectangle0.width);
      assertNotNull(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals((-127), rectangle1.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals((-127.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-127.0), rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals((-127.0), rectangle1.getMinX(), 0.01D);
      assertEquals((-127.0), rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-127,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isValid());
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) intArray0[1], (float) intArray0[0], (float) rectangle1.x, (float) rectangle1.height);
      assertNotNull(rectangle2D_Float0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals((-127), rectangle1.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-127.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals((-127.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-127.0), rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals((-127.0), rectangle1.getMinX(), 0.01D);
      assertEquals((-127.0), rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-127,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals((-127.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-63.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      
      boolean boolean1 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle1);
      assertTrue(boolean1 == boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals((-127), rectangle1.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-127.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals((-127.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-127.0), rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals((-127.0), rectangle1.getMinX(), 0.01D);
      assertEquals((-127.0), rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=-127,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals((-127.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-63.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
  }

  @Test
  public void test03()  throws Throwable  {
      float float0 = (-2316.6328F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-2316.6328F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterY(), 0.01D);
      
      float float1 = 0.0F;
      rectangle2D_Float0.setRect(float1, float0, float1, float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      DefaultFormatter defaultFormatter0 = new DefaultFormatter();
      assertNotNull(defaultFormatter0);
      
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory((JFormattedTextField.AbstractFormatter) defaultFormatter0, (JFormattedTextField.AbstractFormatter) defaultFormatter0);
      assertNotNull(defaultFormatterFactory0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      assertNotNull(jFormattedTextField0);
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      
      Rectangle rectangle0 = jFormattedTextField0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle0);
      assertFalse(float0 == float1);
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      
      Rectangle rectangle0 = jInternalFrame0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      
      int int0 = 2231;
      Rectangle rectangle1 = new Rectangle(int0, rectangle0.y, rectangle0.height, rectangle0.y);
      assertNotNull(rectangle1);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.height);
      assertEquals(2231, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=2231,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(2231.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(2231.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(2231.0, rectangle1.getX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(2231.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertTrue(boolean0 == boolean1);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertTrue(boolean1 == boolean0);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(boolean1);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.height);
      assertEquals(2231, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=2231,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(2231.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(2231.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(2231.0, rectangle1.getX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(2231.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertNotSame(rectangle0, rectangle1);
      assertNotSame(rectangle1, rectangle0);
  }

  @Test
  public void test05()  throws Throwable  {
      float float0 = (-2316.6328F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-2316.6328F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.x, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterY(), 0.01D);
      
      float float1 = 531.3476F;
      rectangle2D_Float0.x = float1;
      assertEquals((-2316.6328F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals(531.3476F, rectangle2D_Float0.x, 0.01F);
      assertEquals(531.3475952148438, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-1785.2852172851562), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-626.9688110351562), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterY(), 0.01D);
      
      DefaultFormatter defaultFormatter0 = new DefaultFormatter();
      assertNotNull(defaultFormatter0);
      
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory((JFormattedTextField.AbstractFormatter) defaultFormatter0, (JFormattedTextField.AbstractFormatter) defaultFormatter0);
      assertNotNull(defaultFormatterFactory0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      assertNotNull(jFormattedTextField0);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      
      Rectangle rectangle0 = jFormattedTextField0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Float0);
      assertFalse(float0 == float1);
      assertFalse(boolean0);
      assertEquals((-2316.6328F), rectangle2D_Float0.height, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-2316.6328F), rectangle2D_Float0.y, 0.01F);
      assertEquals(531.3476F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(531.3475952148438, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-4633.265625), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-1785.2852172851562), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-626.9688110351562), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2316.6328125), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-3474.94921875), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      
      Rectangle rectangle0 = jInternalFrame0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      
      Rectangle rectangle0 = jInternalFrame0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      
      int int0 = (-127);
      Rectangle rectangle1 = new Rectangle(int0, rectangle0.width, rectangle0.height, rectangle0.width);
      assertNotNull(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertEquals((-127), rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("java.awt.Rectangle[x=-127,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals((-127.0), rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-127.0), rectangle1.getX(), 0.01D);
      assertEquals((-127.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals((-127.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertFalse(boolean1);
      assertEquals((-127), rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("java.awt.Rectangle[x=-127,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals((-127.0), rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals((-127.0), rectangle1.getX(), 0.01D);
      assertEquals((-127.0), rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals((-127.0), rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
  }

  @Test
  public void test08()  throws Throwable  {
      float float0 = (-2040.6F);
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, (float) rectangle0.width, (float) rectangle0.x);
      assertNotNull(line2D_Float0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals((-2040.6F), line2D_Float0.y1, 0.01F);
      assertEquals((-2040.6F), line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, line2D_Float0.x1);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals((-2040.6F), line2D_Float0.y1, 0.01F);
      assertEquals((-2040.6F), line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test09()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, (float) rectangle0.width);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
  }

  @Test
  public void test10()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      
      JToolTip jToolTip0 = jPopupMenu_Separator0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      
      Point point0 = jToolTip0.getLocation();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      
      int[] intArray0 = new int[7];
      Polygon polygon0 = new Polygon(intArray0, intArray0, intArray0[1]);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(point2D_Double0.y, point2D_Double0.y, (double) point0.y, (double) intArray0[1], (double) point0.x, point2D_Double0.y, point0.y);
      assertNotNull(arc2D_Double0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      
      Arc2D arc2D0 = null;
      Shape shape0 = ShapeUtilities.rotateShape((Shape) arc2D0, arc2D_Double0.extent, (float) polygon0.npoints, (float) polygon0.npoints);
      assertNull(shape0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0, polygon0.npoints);
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Vector<TimeZone> vector0 = new Vector<TimeZone>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      
      JList<TimeZone> jList0 = new JList<TimeZone>(vector0);
      assertNotNull(jList0);
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle0, (double) rectangle0.width, (float) rectangle0.x, (float) rectangle0.width);
      assertNotNull(path2D_Double0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
  }

  @Test
  public void test12()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      float float0 = 1857.0F;
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) generalPath0, rectangleAnchor0, (double) float0, (double) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[8];
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      
      Rectangle rectangle0 = jInternalFrame0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) intArray0[1], (float) intArray0[0], (float) rectangle0.x, (float) rectangle0.height);
      assertNotNull(rectangle2D_Float0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      
      Shape shape0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.TOP_RIGHT", rectangleAnchor0.toString());
      
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, rectangleAnchor0, (double) rectangle0.y, (double) rectangle2D_Float0.width);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) polygon0, rectangleAnchor0, point2D_Double0.y, (double) polygon0.npoints);
      assertNotNull(path2D_Double0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertEquals(0, path2D_Double0.getWindingRule());
  }

  @Test
  public void test15()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      
      JToolTip jToolTip0 = jPopupMenu_Separator0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isShowing());
      
      Point point0 = jToolTip0.getLocation();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(point2D_Double0.y, point2D_Double0.y, (double) point0.x, (double) point0.x, (double) point0.x, point2D_Double0.y, point0.y);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      
      Shape shape0 = null;
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, arc2D_Double0.x, point2D_Double0.x);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      assertNotNull(defaultStyledDocument0);
      
      JTextPane jTextPane0 = new JTextPane((StyledDocument) defaultStyledDocument0);
      assertNotNull(jTextPane0);
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jTextPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, (double) rectangle0.y, (double) rectangle0.y);
      assertNotNull(path2D_Double0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
  }

  @Test
  public void test17()  throws Throwable  {
      float float0 = 1.4097174F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(float0, float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(boolean0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test18()  throws Throwable  {
      Vector<TimeZone> vector0 = new Vector<TimeZone>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      JList<TimeZone> jList0 = new JList<TimeZone>(vector0);
      assertNotNull(jList0);
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isFontSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isVisible());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isFontSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isVisible());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isFontSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isVisible());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(boolean0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isFontSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(true, jList0.isVisible());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test20()  throws Throwable  {
      byte byte0 = (byte)0;
      GeneralPath generalPath0 = new GeneralPath((int) byte0, (int) byte0);
      assertNotNull(generalPath0);
      assertEquals(0, generalPath0.getWindingRule());
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)generalPath0.getBounds2D();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      
      GeneralPath generalPath1 = new GeneralPath((Shape) rectangle2D_Float0);
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test21()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test22()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath1, generalPath0);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test24()  throws Throwable  {
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      
      JToolTip jToolTip0 = jPopupMenu_Separator0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      
      Point point0 = jToolTip0.getLocation();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      
      int[] intArray0 = new int[7];
      Polygon polygon0 = new Polygon(intArray0, intArray0, point0.y);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
  }

  @Test
  public void test25()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      int int0 = (-2);
      polygon0.npoints = int0;
      assertEquals((-2), polygon0.npoints);
      
      Polygon polygon1 = new Polygon();
      assertNotNull(polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(boolean0);
      assertEquals((-2), polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
  }

  @Test
  public void test26()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      
      int[] intArray0 = new int[8];
      Polygon polygon0 = new Polygon(intArray0, intArray0, rectangle0.y);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
  }

  @Test
  public void test27()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test28()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)46;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      
      Arc2D.Float arc2D_Float1 = new Arc2D.Float(arc2D_Float0.x, arc2D_Float0.x, line2D_Float0.y1, line2D_Float0.y2, (float) byte0, arc2D_Float0.height, (int) byteArray0[1]);
      assertNotNull(arc2D_Float1);
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float1.height, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.width, 0.01F);
      assertEquals(46.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals(0.0, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertNotSame(arc2D_Float0, arc2D_Float1);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float1);
      assertFalse(arc2D_Float1.equals((Object)arc2D_Float0));
      assertFalse(arc2D_Float0.equals((Object)arc2D_Float1));
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0F, arc2D_Float1.x, 0.01F);
      assertEquals(0.0F, arc2D_Float1.height, 0.01F);
      assertEquals(0.0F, arc2D_Float1.y, 0.01F);
      assertEquals(0.0F, arc2D_Float1.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float1.width, 0.01F);
      assertEquals(46.0F, arc2D_Float1.start, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0, arc2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinY(), 0.01D);
      assertEquals(0, arc2D_Float1.getArcType());
      assertEquals(0.0, arc2D_Float1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertNotSame(arc2D_Float1, arc2D_Float0);
      assertNotSame(arc2D_Float0, arc2D_Float1);
  }

  @Test
  public void test30()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      
      JToolTip jToolTip0 = jPopupMenu_Separator0.createToolTip();
      assertNotNull(jToolTip0);
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      
      Point point0 = jToolTip0.getLocation();
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      int[] intArray0 = new int[7];
      Polygon polygon0 = new Polygon(intArray0, intArray0, point0.x);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(point2D_Double0.y, point2D_Double0.y, (double) point0.y, (double) polygon0.npoints, (double) point0.x, point2D_Double0.y, point0.y);
      assertNotNull(arc2D_Double0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, arc2D0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(false, jToolTip0.isDisplayable());
      assertEquals(0, jToolTip0.getComponentCount());
      assertEquals(false, jToolTip0.getIgnoreRepaint());
      assertEquals(false, jToolTip0.isMaximumSizeSet());
      assertEquals(true, jToolTip0.isBackgroundSet());
      assertEquals(false, jToolTip0.isCursorSet());
      assertEquals(true, jToolTip0.isForegroundSet());
      assertEquals(false, jToolTip0.isValid());
      assertEquals(false, jToolTip0.isFocusCycleRoot());
      assertEquals(false, jToolTip0.isMinimumSizeSet());
      assertEquals(true, jToolTip0.isVisible());
      assertEquals(true, jToolTip0.isFontSet());
      assertEquals(false, jToolTip0.isLightweight());
      assertEquals(true, jToolTip0.getFocusTraversalKeysEnabled());
      assertEquals(true, jToolTip0.isEnabled());
      assertEquals(0, jToolTip0.countComponents());
      assertEquals(false, jToolTip0.isFocusTraversalPolicySet());
      assertEquals(false, jToolTip0.isPreferredSizeSet());
      assertEquals(false, jToolTip0.isShowing());
      assertEquals(false, jToolTip0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      
      Arc2D.Float arc2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float1, (Arc2D) arc2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      byte byte0 = (byte)19;
      double double0 = 1132.271554611;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) byte0, double0, (double) byte0, double0);
      assertNotNull(ellipse2D_Double0);
      assertEquals(1132.271554611, ellipse2D_Double0.y, 0.01D);
      assertEquals(19.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(1132.271554611, ellipse2D_Double0.height, 0.01D);
      assertEquals(19.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(1698.4073319165, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(19.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(1132.271554611, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(2264.543109222, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(28.5, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(38.0, ellipse2D_Double0.getMaxX(), 0.01D);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((float) byte0, (float) byte0, (float) byte0, (float) byte0);
      assertNotNull(ellipse2D_Float0);
      assertEquals(19.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(38.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(38.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(19.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(28.5, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(19.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(28.5, ellipse2D_Float0.getCenterX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(19.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(19.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1132.271554611, ellipse2D_Double0.y, 0.01D);
      assertEquals(19.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(1132.271554611, ellipse2D_Double0.height, 0.01D);
      assertEquals(19.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(38.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(38.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(19.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(28.5, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(19.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(28.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1698.4073319165, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(19.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(1132.271554611, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(2264.543109222, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(28.5, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(38.0, ellipse2D_Double0.getMaxX(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, ellipse2D0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, (Ellipse2D) ellipse2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 274.0F;
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float1, float0);
      assertNotNull(line2D_Float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(274.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      Point2D.Float point2D_Float0 = (Point2D.Float)line2D_Float0.getP1();
      assertNotNull(point2D_Float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(274.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      assertNotNull(line2D_Double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(274.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(274.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
  }

  @Test
  public void test38()  throws Throwable  {
      float float0 = (-2040.6F);
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Rectangle rectangle0 = polygon0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) rectangle0.x, (double) rectangle0.x, (double) float0);
      assertNotNull(line2D_Double0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-2040.5999755859375), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-2040.5999755859375), line2D_Double0.y2, 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((float) rectangle0.x, (float) polygon0.npoints, (float) polygon0.npoints, float0);
      assertNotNull(line2D_Float0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-2040.6F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals((-2040.5999755859375), line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-2040.5999755859375), line2D_Double0.y2, 0.01D);
      assertEquals((-2040.6F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertNotNull(line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, (Line2D) line2D_Float1);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
  }

  @Test
  public void test40()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      
      Line2D.Double line2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double1, (Line2D) line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test43()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
  }

  @Test
  public void test44()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test45()  throws Throwable  {
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) generalPath0);
      assertFalse(boolean0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertNotNull(arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Float0, (Shape) arc2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      
      Ellipse2D.Double ellipse2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      Line2D.Double line2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Double0, (Shape) line2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertTrue(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test52()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.clone((Shape) generalPath0);
      assertNotNull(generalPath1);
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
  }

  @Test
  public void test53()  throws Throwable  {
      Shape shape0 = null;
      Shape shape1 = ShapeUtilities.clone(shape0);
      assertNull(shape1);
  }

  @Test
  public void test54()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      assertNotNull(styleContext0);
      
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      assertNotNull(defaultStyledDocument0);
      
      JTextPane jTextPane0 = new JTextPane((StyledDocument) defaultStyledDocument0);
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      
      Rectangle rectangle0 = jTextPane0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) rectangle0.y, (double) rectangle0.x, (Rectangle2D) rectangle0);
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
  }

  @Test
  public void test55()  throws Throwable  {
      float float0 = 0.0F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test56()  throws Throwable  {
      float float0 = (-1.0F);
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      assertNotNull(jToolBar_Separator0);
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      
      Rectangle rectangle0 = jToolBar_Separator0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, (float) rectangle0.x);
      assertNotNull(generalPath0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar_Separator0.isCursorSet());
      assertEquals(true, jToolBar_Separator0.isEnabled());
      assertEquals(true, jToolBar_Separator0.isVisible());
      assertEquals(0, jToolBar_Separator0.getComponentCount());
      assertEquals(false, jToolBar_Separator0.isMaximumSizeSet());
      assertEquals(0, jToolBar_Separator0.countComponents());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar_Separator0.isValid());
      assertEquals(false, jToolBar_Separator0.isShowing());
      assertEquals(false, jToolBar_Separator0.getIgnoreRepaint());
      assertEquals(true, jToolBar_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar_Separator0.isFontSet());
      assertEquals(false, jToolBar_Separator0.isMinimumSizeSet());
      assertEquals(false, jToolBar_Separator0.isDisplayable());
      assertEquals(false, jToolBar_Separator0.isPreferredSizeSet());
      assertEquals(false, jToolBar_Separator0.isLightweight());
      assertEquals(false, jToolBar_Separator0.isFocusCycleRoot());
      assertEquals(false, jToolBar_Separator0.isForegroundSet());
      assertEquals(false, jToolBar_Separator0.isBackgroundSet());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 0;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle((float) int0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test58()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      JProgressBar jProgressBar0 = new JProgressBar((BoundedRangeModel) defaultBoundedRangeModel0);
      assertNotNull(jProgressBar0);
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(0, jProgressBar0.countComponents());
      
      Rectangle rectangle0 = jProgressBar0.bounds();
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) rectangle0.height, (float) rectangle0.y, (float) polygon0.npoints, (float) rectangle0.height);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, jProgressBar0.getComponentCount());
      assertEquals(true, jProgressBar0.isVisible());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicySet());
      assertEquals(false, jProgressBar0.isShowing());
      assertEquals(true, jProgressBar0.isFontSet());
      assertEquals(false, jProgressBar0.isFocusCycleRoot());
      assertEquals(false, jProgressBar0.isMaximumSizeSet());
      assertEquals(true, jProgressBar0.isBackgroundSet());
      assertEquals(false, jProgressBar0.isValid());
      assertEquals(true, jProgressBar0.isEnabled());
      assertEquals(false, jProgressBar0.isCursorSet());
      assertEquals(true, jProgressBar0.isForegroundSet());
      assertEquals(false, jProgressBar0.isPreferredSizeSet());
      assertEquals(false, jProgressBar0.isLightweight());
      assertEquals(false, jProgressBar0.getIgnoreRepaint());
      assertEquals(false, jProgressBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jProgressBar0.isMinimumSizeSet());
      assertEquals(false, jProgressBar0.isDisplayable());
      assertEquals(true, jProgressBar0.getFocusTraversalKeysEnabled());
      assertEquals(0, jProgressBar0.countComponents());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) polygon0, (double) polygon0.npoints, (float) polygon0.npoints, rectangle2D_Float0.y);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
