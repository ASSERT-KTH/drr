/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:04:55 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.Action;
import javax.swing.JCheckBox;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JPasswordField;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.text.DefaultCaret;




import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;


public class ShapeUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      float float0 = 1.0F;
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.x);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle0);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=1,height=1]", rectangle0.toString());
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      
      Rectangle rectangle1 = jTextPane0.getBounds(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle1, (Rectangle2D) rectangle2D_Double0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle1.width);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.height);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertSame(rectangle0, rectangle1);
      assertSame(rectangle1, rectangle0);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertNotNull(defaultCaret0);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) defaultCaret0, (Rectangle2D) defaultCaret0);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertTrue(boolean0);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      float float0 = 2.0F;
      float float1 = (-616.0214F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float1, float1);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-616.0214F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-616.0214F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals((-306.0107116699219), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-306.0107116699219), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-614.0214233398438), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-614.0214233398438), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle2D_Float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-616.0214F), rectangle2D_Float0.width, 0.01F);
      assertEquals((-616.0214F), rectangle2D_Float0.height, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2.0F, rectangle2D_Float0.x, 0.01F);
      assertFalse(boolean0);
      assertEquals((-306.0107116699219), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-306.0107116699219), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals((-614.0214233398438), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals((-614.0214233398438), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Float0.getMinX(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      float float0 = 2339.7402F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Float0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(boolean1);
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertNotNull(jCheckBox0);
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isShowing());
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isShowing());
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(false, jCheckBox0.isShowing());
  }

  @Test
  public void test05()  throws Throwable  {
      float float0 = 1619.18F;
      int int0 = 0;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) int0, (double) float0, (double) int0, (double) float0);
      assertEquals(1619.1800537109375, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1619.1800537109375, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3238.360107421875, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2428.7700805664062, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1619.1800537109375, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      
      String string0 = "";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      
      Rectangle rectangle0 = jInternalFrame0.getBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle2D_Double0, (Rectangle2D) rectangle0);
      assertEquals(1619.1800537109375, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1619.1800537109375, rectangle2D_Double0.height, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3238.360107421875, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2428.7700805664062, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1619.1800537109375, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = 2339.7402F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      boolean boolean1 = ShapeUtilities.contains((Rectangle2D) rectangle2D_Float0, (Rectangle2D) rectangle0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(boolean1);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      float float0 = 0.0F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle0, rectangle2D_Float0.height, (float) rectangle0.x, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      
      float float1 = (-1357.6F);
      Line2D.Float line2D_Float0 = new Line2D.Float(float1, arc2D_Float0.width, arc2D_Float0.width, float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals((-1357.6F), line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals((-1357.6F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(line2D_Float0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Float0, rectangle2D_Float0.y);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals((-1357.6F), line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals((-1357.6F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(generalPath0);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 440.79033582;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertNotNull(point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((double) polygon0.npoints, point2D_Double0.x, point2D_Double1.x, (double) polygon0.npoints);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(440.79033582, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertNotNull(line2D_Double0);
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, (float) polygon0.npoints);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(440.79033582, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      Shape shape0 = null;
      float float0 = (-854.0F);
      Shape shape1 = ShapeUtilities.rotateShape(shape0, double0, float0, float0);
      assertNull(shape1);
  }

  @Test
  public void test10()  throws Throwable  {
      float float0 = 2339.7402F;
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isShowing());
      
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isShowing());
      
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertEquals(2339.7402F, line2D_Float0.y2, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle0, (double) rectangle0.x, line2D_Float0.x2, (float) rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(2339.7402F, line2D_Float0.y2, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x2, 0.01F);
      assertNotNull(path2D_Double0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(1, path2D_Double0.getWindingRule());
  }

  @Test
  public void test11()  throws Throwable  {
      float float0 = 2339.7402F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) rectangle2D_Float0.height, (double) rectangle2D_Float0.height, (double) rectangle2D_Float0.x, (double) rectangle2D_Float0.x);
      assertEquals(2339.740234375, ellipse2D_Double0.width, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.height, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.x, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.y, 0.01D);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(ellipse2D_Double0);
      assertEquals(3509.6103515625, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(4679.48046875, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(3509.6103515625, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) ellipse2D_Double0, rectangleAnchor0, ellipse2D_Double0.height, (double) rectangle2D_Float0.height);
      assertEquals(2339.740234375, ellipse2D_Double0.width, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.height, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.x, 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.y, 0.01D);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(path2D_Double0);
      assertEquals(3509.6103515625, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(4679.48046875, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(2339.740234375, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(3509.6103515625, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals("RectangleAnchor.BOTTOM", rectangleAnchor0.toString());
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      Polygon polygon0 = null;
      float float0 = 0.0F;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) polygon0, rectangleAnchor0, (double) float0, (double) float0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      byte byte0 = (byte)120;
      JPasswordField jPasswordField0 = new JPasswordField((int) byte0);
      assertNotNull(jPasswordField0);
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isForegroundSet());
      
      Action action0 = jPasswordField0.getAction();
      assertNull(action0);
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isForegroundSet());
      
      JMenu jMenu0 = new JMenu(action0);
      assertNotNull(jMenu0);
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.isBackgroundSet());
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.height, (double) rectangle0.width);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Shape shape0 = null;
      double double0 = 0.0;
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) ellipse2D_Double0, ellipse2D_Double0.x, ellipse2D_Double0.height);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertNotNull(path2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
  }

  @Test
  public void test16()  throws Throwable  {
      float float0 = (-1.0F);
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createRegularCross(line2D_Float0.x1, line2D_Float0.x1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test17()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      GeneralPath generalPath0 = new GeneralPath(int0);
      assertNotNull(generalPath0);
      assertEquals(0, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = new GeneralPath();
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotNull(generalPath1);
      assertEquals(1, generalPath1.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(boolean0);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(0, generalPath0.getWindingRule());
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      int int0 = 0;
      GeneralPath generalPath1 = new GeneralPath(int0);
      assertNotNull(generalPath1);
      assertEquals(0, generalPath1.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(0, generalPath1.getWindingRule());
  }

  @Test
  public void test21()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = 0;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertEquals(0, polygon1.npoints);
      assertNotNull(polygon1);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(boolean0);
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
  }

  @Test
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 1;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = new Polygon();
      assertFalse(polygon1.equals((Object)polygon0));
      assertEquals(0, polygon1.npoints);
      assertNotNull(polygon1);
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon1.npoints);
      assertEquals(1, polygon0.npoints);
      assertFalse(boolean0);
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
  }

  @Test
  public void test24()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[6];
      Polygon polygon0 = new Polygon(intArray0, intArray0, intArray0[2]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      
      JMenu jMenu0 = new JMenu();
      assertNotNull(jMenu0);
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      
      Rectangle rectangle0 = jMenu0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      
      int int0 = 1;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle0, (float) rectangle0.y, (float) rectangle0.height, int0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Float0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(1, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      float float0 = 1.0F;
      JTextPane jTextPane0 = new JTextPane();
      assertNotNull(jTextPane0);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isCursorSet());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.x);
      assertEquals(1, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=1,height=1]", rectangle0.toString());
      assertEquals(1.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01D);
      
      Rectangle rectangle1 = jTextPane0.getBounds(rectangle0);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle1);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle0, rectangle1);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle1, rectangle2D_Double0.height, rectangle2D_Double0.width, rectangle1.height);
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(1.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(1.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertSame(rectangle1, rectangle0);
      assertSame(rectangle0, rectangle1);
      
      Arc2D.Double arc2D_Double1 = new Arc2D.Double();
      assertFalse(arc2D_Double1.equals((Object)arc2D_Double0));
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(0.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertNotNull(arc2D_Double1);
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertNotSame(arc2D_Double1, arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Double1);
      assertFalse(arc2D_Double0.equals((Object)arc2D_Double1));
      assertFalse(arc2D_Double1.equals((Object)arc2D_Double0));
      assertEquals(0, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle1.width);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(1.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(1.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(0.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(0.0, rectangle1.getHeight(), 0.01D);
      assertEquals(0.0, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(true, rectangle1.isEmpty());
      assertEquals(0.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle1.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle1.toString());
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertSame(rectangle1, rectangle0);
      assertNotSame(arc2D_Double0, arc2D_Double1);
      assertSame(rectangle0, rectangle1);
      assertNotSame(arc2D_Double1, arc2D_Double0);
  }

  @Test
  public void test29()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-1.0F);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float1, float0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle0, (float) rectangle0.height, (float) rectangle0.x, rectangle0.width);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) float1, (double) rectangle0.y, (double) float0, (double) rectangle2D_Float0.x, (double) rectangle0.height, (double) rectangle0.y, rectangle0.height);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals((-1.0), arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals((-1.0), arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals((-1.0), arc2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1.0), arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertEquals((-1.0F), rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals((-1.0), arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals((-0.5), rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals((-1.0), arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals((-1.0), arc2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1.0), arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, arc2D0);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertNotNull(defaultCaret0);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float(defaultCaret0.x);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertNotNull(arc2D_Float0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      
      Arc2D.Float arc2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float1, (Arc2D) arc2D_Float0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.width);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      double double0 = Double.NaN;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double(double0, double0, double0, double0);
      assertEquals(Double.NaN, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.x, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.width, 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Double0);
      assertEquals(Double.NaN, ellipse2D_Double0.height, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.y, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.x, 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.width, 0.01D);
      assertFalse(boolean0);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(Double.NaN, ellipse2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      float float0 = (-2419.2263F);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals((-2419.2263F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.width, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.y, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.height, 0.01F);
      assertNotNull(ellipse2D_Float0);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxX(), 0.01D);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float0, (Ellipse2D) ellipse2D_Float1);
      assertEquals((-2419.2263F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.width, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.y, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.height, 0.01F);
      assertFalse(boolean0);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxX(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      float float0 = (-2419.2263F);
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals((-2419.2263F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.y, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.width, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.height, 0.01F);
      assertNotNull(ellipse2D_Float0);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinY(), 0.01D);
      
      Ellipse2D.Float ellipse2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Float1, (Ellipse2D) ellipse2D_Float0);
      assertEquals((-2419.2263F), ellipse2D_Float0.x, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.y, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.width, 0.01F);
      assertEquals((-2419.2263F), ellipse2D_Float0.height, 0.01F);
      assertFalse(boolean0);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals((-3628.8394775390625), ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals((-4838.45263671875), ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals((-2419.226318359375), ellipse2D_Float0.getMinY(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)8;
      double double0 = 0.0;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, (double) byte0, (double) byte0, (double) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(8.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(8.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test38()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = "";
      double double0 = (-1815.865);
      point2D_Double0.setLocation(point2D_Double0.x, double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1815.865), point2D_Double0.y, 0.01D);
      
      JCheckBox jCheckBox0 = new JCheckBox(string0);
      assertNotNull(jCheckBox0);
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isValid());
      
      Rectangle rectangle0 = jCheckBox0.getBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      Line2D.Double line2D_Double0 = new Line2D.Double(point2D_Double0.y, (double) rectangle0.width, point2D_Double0.y, point2D_Double0.y);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1815.865), point2D_Double0.y, 0.01D);
      assertEquals((-1815.865), line2D_Double0.x1, 0.01D);
      assertEquals((-1815.865), line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-1815.865), line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(line2D_Double0);
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1815.865), point2D_Double0.y, 0.01D);
      assertEquals((-1815.865F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals((-1815.865F), line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1815.865), point2D_Double0.y, 0.01D);
      assertEquals((-1815.865F), line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals((-1815.865F), line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals((-1815.865), line2D_Double0.x1, 0.01D);
      assertEquals((-1815.865), line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-1815.865), line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertFalse(boolean0);
      assertEquals(false, jCheckBox0.isMaximumSizeSet());
      assertEquals(false, jCheckBox0.isFocusCycleRoot());
      assertEquals(false, jCheckBox0.isPreferredSizeSet());
      assertEquals(false, jCheckBox0.isMinimumSizeSet());
      assertEquals(true, jCheckBox0.isFontSet());
      assertEquals(false, jCheckBox0.isLightweight());
      assertEquals(true, jCheckBox0.isBackgroundSet());
      assertEquals(false, jCheckBox0.getIgnoreRepaint());
      assertEquals(true, jCheckBox0.isForegroundSet());
      assertEquals(false, jCheckBox0.isCursorSet());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBox0.isDisplayable());
      assertEquals(0, jCheckBox0.countComponents());
      assertEquals(0, jCheckBox0.getComponentCount());
      assertEquals(false, jCheckBox0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBox0.isEnabled());
      assertEquals(true, jCheckBox0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBox0.isVisible());
      assertEquals(false, jCheckBox0.isShowing());
      assertEquals(false, jCheckBox0.isValid());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, line2D0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      float float0 = 2339.7402F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(rectangle2D_Float0.height, rectangle2D_Float0.height, rectangle2D_Float0.height, rectangle2D_Float0.height);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y2, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float1, (Line2D) line2D_Float0);
      assertEquals(2339.7402F, rectangle2D_Float0.y, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.width, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.x, 0.01F);
      assertEquals(2339.7402F, rectangle2D_Float0.height, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y1, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.y2, 0.01F);
      assertEquals(2339.7402F, line2D_Float0.x2, 0.01F);
      assertFalse(boolean0);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(2339.740234375, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4679.48046875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3509.6103515625, rectangle2D_Float0.getCenterX(), 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test42()  throws Throwable  {
      float float0 = (-1.0F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test43()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross(line2D_Float0.x1, line2D_Float0.x1);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test44()  throws Throwable  {
      double double0 = 440.79033582;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((double) polygon0.npoints, point2D_Double0.x, point2D_Double0.x, (double) polygon0.npoints);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(440.79033582, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(440.79033582, line2D_Double0.x2, 0.01D);
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(440.79033582, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(440.79033582, line2D_Double0.x2, 0.01D);
      assertEquals(440.79033582, point2D_Double0.y, 0.01D);
      assertEquals(440.79033582, point2D_Double0.x, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
  }

  @Test
  public void test45()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertEquals(0, polygon0.npoints);
      assertTrue(boolean0);
  }

  @Test
  public void test46()  throws Throwable  {
      float float0 = 0.0F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((double) float0, (double) rectangle0.y, (double) float0, (double) rectangle2D_Float0.x, (double) rectangle0.height, (double) rectangle0.y, rectangle0.height);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      float float0 = (-2419.2263F);
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(float0, float0, float0, float0);
      assertEquals((-2419.2263F), line2D_Float0.x2, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.x1, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.y1, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) line2D_Float0);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals((-2419.2263F), line2D_Float0.x2, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.x1, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.y1, 0.01F);
      assertEquals((-2419.2263F), line2D_Float0.y2, 0.01F);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      float float0 = 1.0F;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.x);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle0);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=1,height=1]", rectangle0.toString());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(float0, float0, float0, float0);
      assertEquals(1.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.width, 0.01F);
      assertNotNull(ellipse2D_Float0);
      assertEquals(2.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(2.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinX(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(ellipse2D_Float0.y, (float) rectangle0.x, (float) rectangle0.x, ellipse2D_Float0.y);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.x);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(1.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=1,height=1]", rectangle0.toString());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(2.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) line2D_Float0);
      assertEquals(1, rectangle0.height);
      assertEquals(1, rectangle0.width);
      assertEquals(1, rectangle0.y);
      assertEquals(1, rectangle0.x);
      assertEquals(1.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(1.0F, line2D_Float0.x2, 0.01F);
      assertEquals(1.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1.0F, line2D_Float0.y2, 0.01F);
      assertFalse(boolean0);
      assertEquals(2.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=1,y=1,width=1,height=1]", rectangle0.toString());
      assertEquals(1.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(1.0, rectangle0.getY(), 0.01D);
      assertEquals(1.0, rectangle0.getX(), 0.01D);
      assertEquals(1.0, rectangle0.getWidth(), 0.01D);
      assertEquals(1.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle0.getMinX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(2.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(2.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(1.0, ellipse2D_Float0.getMinX(), 0.01D);
  }

  @Test
  public void test49()  throws Throwable  {
      float float0 = 0.0F;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle0);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle0, (float) rectangle0.width, (float) rectangle0.x, rectangle0.width);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(arc2D_Float0);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      Line2D.Float line2D_Float0 = new Line2D.Float(rectangle2D_Float0.y, arc2D_Float0.width, arc2D_Float0.width, rectangle2D_Float0.y);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(line2D_Float0);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) rectangle0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertFalse(boolean0);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
  }

  @Test
  public void test50()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test52()  throws Throwable  {
      byte byte0 = (byte)0;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) byte0, (double) byte0, (double) byte0, (double) byte0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Line2D.Double line2D_Double1 = (Line2D.Double)ShapeUtilities.clone((Shape) line2D_Double0);
      assertFalse(line2D_Double0.equals((Object)line2D_Double1));
      assertFalse(line2D_Double1.equals((Object)line2D_Double0));
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double1.x2, 0.01D);
      assertEquals(0.0, line2D_Double1.x1, 0.01D);
      assertEquals(0.0, line2D_Double1.y2, 0.01D);
      assertEquals(0.0, line2D_Double1.y1, 0.01D);
      assertNotNull(line2D_Double1);
      assertNotSame(line2D_Double0, line2D_Double1);
      assertNotSame(line2D_Double1, line2D_Double0);
  }

  @Test
  public void test53()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Shape shape0 = ShapeUtilities.clone((Shape) polygon0);
      assertEquals(0, polygon0.npoints);
      assertNull(shape0);
  }

  @Test
  public void test54()  throws Throwable  {
      float float0 = 1619.18F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 0;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = "org.jfree.data.ytatistics.HistogramTyp=";
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(string0);
      assertNotNull(jRadioButtonMenuItem0);
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      
      Rectangle rectangle0 = jRadioButtonMenuItem0.getVisibleRect();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      
      Point2D.Double point2D_Double1 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) int0, point2D_Double0.x, (Rectangle2D) rectangle0);
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertNotNull(point2D_Double1);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
  }

  @Test
  public void test56()  throws Throwable  {
      float float0 = 1619.18F;
      int int0 = 0;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, (float) int0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test57()  throws Throwable  {
      float float0 = 2339.7402F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle(float0);
      assertNotNull(generalPath0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 2889;
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) rectangle2D_Double0, rectangle2D_Double0.height, (float) int0, (float) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
