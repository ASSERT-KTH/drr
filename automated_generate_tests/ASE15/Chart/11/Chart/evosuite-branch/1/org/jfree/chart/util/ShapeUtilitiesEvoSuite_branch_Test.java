/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:27 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Panel;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Path2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.BitSet;
import java.util.Vector;
import javax.swing.Action;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JInternalFrame;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSplitPane;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.border.SoftBevelBorder;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.ShapeUtilities;
import org.junit.runner.RunWith;


public class ShapeUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      
      int int0 = 5;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(int0);
      assertNotNull(softBevelBorder0);
      
      String string0 = "";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertNotNull(jInternalFrame0);
      
      int int1 = 1409;
      Rectangle rectangle0 = softBevelBorder0.getInteriorRectangle((Component) jInternalFrame0, int0, int0, int1, int0);
      assertEquals((-1), rectangle0.height);
      assertEquals(1403, rectangle0.width);
      assertEquals(8, rectangle0.y);
      assertEquals(8, rectangle0.x);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getX(), 0.01D);
      assertEquals(709.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=8,y=8,width=1403,height=-1]", rectangle0.toString());
      assertEquals(8.0, rectangle0.getY(), 0.01D);
      assertEquals(1411.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1403.0, rectangle0.getWidth(), 0.01D);
      assertEquals(8.0, rectangle0.getMinY(), 0.01D);
      assertEquals(8.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01D);
      assertEquals(7.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(7.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertNotNull(rectangle0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertFalse(boolean1);
      assertEquals((-1), rectangle0.height);
      assertEquals(1403, rectangle0.width);
      assertEquals(8, rectangle0.y);
      assertEquals(8, rectangle0.x);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(8.0, rectangle0.getX(), 0.01D);
      assertEquals(709.5, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=8,y=8,width=1403,height=-1]", rectangle0.toString());
      assertEquals(8.0, rectangle0.getY(), 0.01D);
      assertEquals(1411.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1403.0, rectangle0.getWidth(), 0.01D);
      assertEquals(8.0, rectangle0.getMinY(), 0.01D);
      assertEquals(8.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-1.0), rectangle0.getHeight(), 0.01D);
      assertEquals(7.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(7.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "BU";
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-1166.5060594);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals((-1166.5060594), rectangle2D_Double0.height, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.x, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.y, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.width, 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-1166.5060594), rectangle2D_Double0.height, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.x, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.y, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.intersects((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals((-1166.5060594), rectangle2D_Double0.height, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.x, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.y, 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-1749.7590891), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-1166.5060594), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-2333.0121188), rectangle2D_Double0.getMaxX(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      JToolBar jToolBar0 = new JToolBar();
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertNotNull(rectangle0);
      
      String string0 = "fa0|}Kr=IZnN$3";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertNotNull(jInternalFrame0);
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertNotNull(jInternalFrame_JDesktopIcon0);
      
      Rectangle rectangle1 = jInternalFrame_JDesktopIcon0.getBounds();
      assertEquals(160, rectangle1.width);
      assertEquals(31, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=160,height=31]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(15.5, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(80.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(31.0, rectangle1.getHeight(), 0.01D);
      assertEquals(160.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(31.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(160.0, rectangle1.getWidth(), 0.01D);
      assertEquals(false, rectangle1.isEmpty());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertNotNull(rectangle1);
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertNotSame(rectangle1, rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle1);
      assertFalse(boolean0);
      assertEquals(160, rectangle1.width);
      assertEquals(31, rectangle1.height);
      assertEquals(0, rectangle1.y);
      assertEquals(0, rectangle1.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=160,height=31]", rectangle1.toString());
      assertEquals(0.0, rectangle1.getX(), 0.01D);
      assertEquals(0.0, rectangle1.getY(), 0.01D);
      assertEquals(15.5, rectangle1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle1.getMinY(), 0.01D);
      assertEquals(80.0, rectangle1.getCenterX(), 0.01D);
      assertEquals(31.0, rectangle1.getHeight(), 0.01D);
      assertEquals(160.0, rectangle1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle1.getMinX(), 0.01D);
      assertEquals(31.0, rectangle1.getMaxY(), 0.01D);
      assertEquals(160.0, rectangle1.getWidth(), 0.01D);
      assertEquals(false, rectangle1.isEmpty());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertFalse(rectangle1.equals((Object)rectangle0));
      assertFalse(rectangle0.equals((Object)rectangle1));
      assertNotSame(rectangle1, rectangle0);
      assertNotSame(rectangle0, rectangle1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "=5iga7\\";
      float float0 = (-568.7287F);
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isCursorSet());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertNotNull(rectangle0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) rectangle0.height, float0, (float) rectangle0.y, (float) rectangle0.height);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-568.7287F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals((-568.7287F), rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals((-568.7286987304688), rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      JToolBar jToolBar0 = new JToolBar();
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(0, jToolBar0.countComponents());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.bounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertNotNull(rectangle0);
      
      boolean boolean0 = ShapeUtilities.contains((Rectangle2D) rectangle0, (Rectangle2D) rectangle0);
      assertTrue(boolean0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
  }

  @Test
  public void test06()  throws Throwable  {
      float float0 = (-1109.312F);
      double double0 = 0.0;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, double0, double0, double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, float0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x1, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test07()  throws Throwable  {
      GeneralPath generalPath0 = null;
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      Shape shape0 = ShapeUtilities.rotateShape((Shape) generalPath0, (double) line2D_Float0.x1, line2D_Float0.y1, line2D_Float0.y2);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNull(shape0);
  }

  @Test
  public void test08()  throws Throwable  {
      float float0 = 1.0F;
      Panel panel0 = new Panel();
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(false, panel0.isValid());
      assertEquals(0, panel0.countComponents());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isFontSet());
      assertEquals(false, panel0.isOpaque());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(true, panel0.isVisible());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(0, panel0.getWidth());
      assertEquals(false, panel0.isLightweight());
      assertEquals(false, panel0.isShowing());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(0, panel0.getComponentCount());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertNotNull(panel0);
      
      Rectangle rectangle0 = panel0.bounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(false, panel0.isValid());
      assertEquals(0, panel0.countComponents());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isFontSet());
      assertEquals(false, panel0.isOpaque());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(true, panel0.isVisible());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(0, panel0.getWidth());
      assertEquals(false, panel0.isLightweight());
      assertEquals(false, panel0.isShowing());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(0, panel0.getComponentCount());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertNotNull(rectangle0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.rotateShape((Shape) rectangle0, (double) rectangle0.height, (float) rectangle0.width, float0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(false, panel0.isFocusTraversalPolicySet());
      assertEquals(true, panel0.getFocusTraversalKeysEnabled());
      assertEquals(false, panel0.getIgnoreRepaint());
      assertEquals(false, panel0.isCursorSet());
      assertEquals(false, panel0.isForegroundSet());
      assertEquals(false, panel0.isFocusCycleRoot());
      assertEquals(false, panel0.isMinimumSizeSet());
      assertEquals(false, panel0.isValid());
      assertEquals(0, panel0.countComponents());
      assertEquals(0, panel0.getY());
      assertEquals(0, panel0.getX());
      assertEquals(false, panel0.isFontSet());
      assertEquals(false, panel0.isOpaque());
      assertEquals(true, panel0.isEnabled());
      assertEquals(false, panel0.isBackgroundSet());
      assertEquals(true, panel0.isVisible());
      assertEquals(false, panel0.isDoubleBuffered());
      assertEquals(false, panel0.isFocusTraversalPolicyProvider());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertEquals(0, panel0.getWidth());
      assertEquals(false, panel0.isLightweight());
      assertEquals(false, panel0.isShowing());
      assertEquals(false, panel0.isMaximumSizeSet());
      assertEquals(false, panel0.isPreferredSizeSet());
      assertEquals(0, panel0.getHeight());
      assertEquals(false, panel0.isDisplayable());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertEquals(0, panel0.getComponentCount());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test09()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Rectangle rectangle0 = ellipse2D_Float0.getBounds();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.height, (double) ellipse2D_Float0.width);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(1, path2D_Double0.getWindingRule());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test10()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      double double0 = 1199.7797174368;
      double double1 = Point2D.distanceSq(double0, double0, double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) ellipse2D0, rectangleAnchor0, double1, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      StyledEditorKit.ItalicAction styledEditorKit_ItalicAction0 = new StyledEditorKit.ItalicAction();
      assertNotNull(styledEditorKit_ItalicAction0);
      
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) styledEditorKit_ItalicAction0);
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertNotNull(jRadioButtonMenuItem0);
      
      Rectangle rectangle0 = jRadioButtonMenuItem0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertNotNull(rectangle0);
      
      RectangleAnchor rectangleAnchor0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = ShapeUtilities.createTranslatedShape((Shape) rectangle0, rectangleAnchor0, (double) rectangle0.y, (double) rectangle0.width);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'anchor' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Shape shape0 = null;
      double double0 = 1231.9595500725557;
      // Undeclared exception!
      try {
        Shape shape1 = ShapeUtilities.createTranslatedShape(shape0, double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertNotNull(arc2D_Double0);
      
      Path2D.Double path2D_Double0 = (Path2D.Double)ShapeUtilities.createTranslatedShape((Shape) polygon0, arc2D_Double0.extent, arc2D_Double0.extent);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0, path2D_Double0.getWindingRule());
      assertNotNull(path2D_Double0);
  }

  @Test
  public void test14()  throws Throwable  {
      float float0 = (-1109.312F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertEquals((-1109.31201171875), line2D_Double0.y2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.y1, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      GeneralPath generalPath1 = (GeneralPath)ShapeUtilities.createLineRegion((Line2D) line2D_Double0, float0);
      assertEquals((-1109.31201171875), line2D_Double0.y2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.y1, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x1, 0.01D);
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath1, (Shape) generalPath0);
      assertFalse(boolean0);
      assertEquals((-1109.31201171875), line2D_Double0.y2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.y1, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x2, 0.01D);
      assertEquals((-1109.31201171875), line2D_Double0.x1, 0.01D);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(1, generalPath1.getWindingRule());
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath0, generalPath1);
      assertNotSame(generalPath1, generalPath0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertNotNull(jInternalFrame0);
      
      Rectangle rectangle0 = jInternalFrame0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath((Shape) rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath();
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean1 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(1, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test16()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = new GeneralPath(int0);
      assertEquals(0, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertNotSame(generalPath1, generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(0, generalPath1.getWindingRule());
      assertEquals(1, generalPath0.getWindingRule());
      assertFalse(generalPath1.equals((Object)generalPath0));
      assertFalse(generalPath0.equals((Object)generalPath1));
      assertNotSame(generalPath1, generalPath0);
      assertNotSame(generalPath0, generalPath1);
  }

  @Test
  public void test18()  throws Throwable  {
      GeneralPath generalPath0 = new GeneralPath();
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      GeneralPath generalPath1 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test19()  throws Throwable  {
      GeneralPath generalPath0 = null;
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath0);
      assertTrue(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      GeneralPath generalPath0 = null;
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      GeneralPath generalPath1 = new GeneralPath((Shape) line2D_Float0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1, generalPath1.getWindingRule());
      assertNotNull(generalPath1);
      
      boolean boolean0 = ShapeUtilities.equal(generalPath0, generalPath1);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(1, generalPath1.getWindingRule());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "BU";
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertNotNull(rectangle0);
      
      int[] intArray0 = new int[4];
      Polygon polygon0 = new Polygon(intArray0, intArray0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertNotNull(polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, polygon1.npoints);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertFalse(polygon1.equals((Object)polygon0));
      assertFalse(polygon0.equals((Object)polygon1));
      assertNotSame(polygon1, polygon0);
      assertNotSame(polygon0, polygon1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 6;
      Polygon polygon0 = new Polygon(intArray0, intArray0, int0);
      assertEquals(6, polygon0.npoints);
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      Polygon polygon1 = new Polygon();
      assertEquals(0, polygon1.npoints);
      assertNotNull(polygon1);
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotSame(polygon1, polygon0);
      
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(6, polygon0.npoints);
      assertEquals(0, polygon1.npoints);
      assertFalse(polygon0.equals((Object)polygon1));
      assertFalse(polygon1.equals((Object)polygon0));
      assertNotSame(polygon0, polygon1);
      assertNotSame(polygon1, polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test23()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon1);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test24()  throws Throwable  {
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon0, polygon0);
      assertTrue(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "BU";
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isValid());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.getBounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isValid());
      assertNotNull(rectangle0);
      
      int[] intArray0 = new int[4];
      Polygon polygon0 = new Polygon(intArray0, intArray0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isValid());
      assertNotNull(polygon0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      
      Polygon polygon1 = null;
      boolean boolean0 = ShapeUtilities.equal(polygon1, polygon0);
      assertFalse(boolean0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isValid());
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test26()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      double double0 = 2642.0;
      int int0 = 0;
      JSplitPane jSplitPane0 = new JSplitPane(int0);
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSplitPane0.getComponentCount());
      assertEquals(1, jSplitPane0.countComponents());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertNotNull(jSplitPane0);
      
      Rectangle rectangle0 = jSplitPane0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSplitPane0.getComponentCount());
      assertEquals(1, jSplitPane0.countComponents());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double((Rectangle2D) rectangle0, (double) int0, point2D_Double0.x, rectangle0.x);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSplitPane0.getComponentCount());
      assertEquals(1, jSplitPane0.countComponents());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Arc2D.Double arc2D_Double1 = new Arc2D.Double((double) rectangle0.height, point2D_Double0.y, point2D_Double0.y, arc2D_Double0.width, (double) rectangle0.x, double0, rectangle0.height);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(2642.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSplitPane0.getComponentCount());
      assertEquals(1, jSplitPane0.countComponents());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double1);
      assertFalse(arc2D_Double1.equals((Object)arc2D_Double0));
      assertFalse(arc2D_Double0.equals((Object)arc2D_Double1));
      assertNotSame(arc2D_Double1, arc2D_Double0);
      assertNotSame(arc2D_Double0, arc2D_Double1);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double1.x, 0.01D);
      assertEquals(0.0, arc2D_Double1.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.height, 0.01D);
      assertEquals(2642.0, arc2D_Double1.extent, 0.01D);
      assertEquals(0.0, arc2D_Double1.width, 0.01D);
      assertEquals(0.0, arc2D_Double1.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double1.getArcType());
      assertEquals(0.0, arc2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double1.getMinY(), 0.01D);
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(1, jSplitPane0.getComponentCount());
      assertEquals(1, jSplitPane0.countComponents());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertFalse(arc2D_Double1.equals((Object)arc2D_Double0));
      assertFalse(arc2D_Double0.equals((Object)arc2D_Double1));
      assertNotSame(arc2D_Double1, arc2D_Double0);
      assertNotSame(arc2D_Double0, arc2D_Double1);
  }

  @Test
  public void test27()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)arc2D_Double0.getBounds2D();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      float float0 = 1.0F;
      int int0 = 0;
      Arc2D.Float arc2D_Float0 = new Arc2D.Float((Rectangle2D) rectangle2D_Double0, float0, float0, int0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(1.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(1.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(1.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(1.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      Arc2D.Float arc2D_Float0 = new Arc2D.Float();
      assertEquals(0.0F, arc2D_Float0.y, 0.01F);
      assertEquals(0.0F, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.x, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(0.0, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Float0.getMaxX(), 0.01D);
      assertNotNull(arc2D_Float0);
      
      double double0 = Double.NEGATIVE_INFINITY;
      arc2D_Float0.setFrameFromCenter(double0, double0, double0, double0);
      assertEquals(Float.NaN, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.x, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.y, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(Double.NaN, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMaxY(), 0.01D);
      
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Float0, (Arc2D) arc2D_Float0);
      assertFalse(boolean0);
      assertEquals(Float.NaN, arc2D_Float0.width, 0.01F);
      assertEquals(0.0F, arc2D_Float0.start, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.x, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.height, 0.01F);
      assertEquals(0.0F, arc2D_Float0.extent, 0.01F);
      assertEquals(Float.NaN, arc2D_Float0.y, 0.01F);
      assertEquals(0, arc2D_Float0.getArcType());
      assertEquals(Double.NaN, arc2D_Float0.getCenterX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getCenterY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMinY(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMinX(), 0.01D);
      assertEquals(Double.NaN, arc2D_Float0.getMaxY(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Arc2D.Double arc2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double0, (Arc2D) arc2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Arc2D.Double arc2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Arc2D) arc2D_Double1, (Arc2D) arc2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      Arc2D arc2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(arc2D0, arc2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test32()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertNotNull(line2D_Float0);
      
      double double0 = (-2840.933061857148);
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) line2D_Float0.y2, (double) line2D_Float0.x2, (double) line2D_Float0.y2, double0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals((-2840.933061857148), ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals((-2840.933061857148), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1420.466530928574), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float(line2D_Float0.y1, line2D_Float0.x2, line2D_Float0.y2, line2D_Float0.y1);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, (Ellipse2D) ellipse2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals((-2840.933061857148), ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals((-2840.933061857148), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-1420.466530928574), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal((Ellipse2D) ellipse2D_Double0, ellipse2D0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, ellipse2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test35()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Ellipse2D ellipse2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(ellipse2D0, (Ellipse2D) ellipse2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
  }

  @Test
  public void test36()  throws Throwable  {
      Vector<BitSet> vector0 = new Vector<BitSet>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      JTable jTable0 = new JTable(vector0, vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertNotNull(jTable0);
      
      Rectangle rectangle0 = jTable0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertNotNull(rectangle0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) rectangle0.width, (double) rectangle0.width);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = new Point2D.Double();
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertNotSame(point2D_Double1, point2D_Double0);
      
      double double0 = (-1132.17);
      point2D_Double0.setLocation(ellipse2D_Double0.x, double0);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1132.17), point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertNotSame(point2D_Double0, point2D_Double1);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point2D_Double1, (Point2D) point2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals((-1132.17), line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1132.17), point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertNotNull(line2D_Double0);
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((Point2D) point2D_Double1, (Point2D) point2D_Double1);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertNotNull(line2D_Float0);
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotSame(point2D_Double1, point2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, (Line2D) line2D_Float0);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals((-1132.17), line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1132.17), point2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isValid());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertFalse(point2D_Double0.equals((Object)point2D_Double1));
      assertFalse(point2D_Double1.equals((Object)point2D_Double0));
      assertNotSame(point2D_Double0, point2D_Double1);
      assertNotSame(point2D_Double1, point2D_Double0);
  }

  @Test
  public void test37()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      double double0 = (-1212.0);
      Point2D.Double point2D_Double0 = new Point2D.Double((double) ellipse2D_Float0.y, double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1212.0), point2D_Double0.y, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1212.0), line2D_Double0.y2, 0.01D);
      assertEquals((-1212.0), line2D_Double0.y1, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1212.0), point2D_Double0.y, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Float0, (Line2D) line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals((-1212.0), line2D_Double0.y2, 0.01D);
      assertEquals((-1212.0), line2D_Double0.y1, 0.01D);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals((-1212.0), point2D_Double0.y, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      Line2D line2D0 = null;
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Line2D) line2D_Double0, line2D0);
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      Line2D line2D0 = null;
      boolean boolean0 = ShapeUtilities.equal(line2D0, line2D0);
      assertTrue(boolean0);
  }

  @Test
  public void test40()  throws Throwable  {
      Line2D line2D0 = null;
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point2D_Double0, (Point2D) point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal(line2D0, (Line2D) line2D_Double0);
      assertFalse(boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      float float0 = (-1109.312F);
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiagonalCross(float0, float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) generalPath0);
      assertTrue(boolean0);
      assertEquals(1, generalPath0.getWindingRule());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "Null 'shape' argument.";
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertNotNull(rectangle0);
      
      GeneralPath generalPath0 = new GeneralPath(rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) generalPath0, (Shape) rectangle0);
      assertFalse(boolean0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0, generalPath0.getWindingRule());
  }

  @Test
  public void test43()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) arc2D_Double0);
      assertFalse(boolean0);
      assertEquals(0, polygon0.npoints);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) polygon0, (Shape) polygon0);
      assertTrue(boolean0);
      assertEquals(0, polygon0.npoints);
  }

  @Test
  public void test45()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertNotNull(arc2D_Double0);
      
      Arc2D.Double arc2D_Double1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double1);
      assertFalse(boolean0);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
  }

  @Test
  public void test46()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = 1951;
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float((float) int0, (float) int0, (float) int0, float0);
      assertEquals(1951.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(1951.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1951.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(3902.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(2926.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Float0, (Shape) ellipse2D_Float0);
      assertTrue(boolean0);
      assertEquals(1951.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(1951.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(1951.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(3902.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(2926.5, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(1951.0, ellipse2D_Float0.getMinY(), 0.01D);
  }

  @Test
  public void test47()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) line2D_Float0.y2, (double) line2D_Float0.x2, (double) line2D_Float0.y2, (double) line2D_Float0.x1);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Double0);
      
      Polygon polygon0 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) ellipse2D_Double0, (Shape) polygon0);
      assertFalse(boolean0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(line2D_Float0);
      
      Line2D.Float line2D_Float1 = null;
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float1);
      assertFalse(boolean0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) line2D_Float0, (Shape) line2D_Float0);
      assertTrue(boolean0);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
  }

  @Test
  public void test50()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      boolean boolean0 = ShapeUtilities.equal((Shape) arc2D_Double0, (Shape) arc2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test51()  throws Throwable  {
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      
      Ellipse2D.Float ellipse2D_Float1 = (Ellipse2D.Float)ShapeUtilities.clone((Shape) ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.width, 0.01F);
      assertEquals(0.0F, ellipse2D_Float1.height, 0.01F);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float1.getMinX(), 0.01D);
      assertNotNull(ellipse2D_Float1);
      assertTrue(ellipse2D_Float0.equals((Object)ellipse2D_Float1));
      assertTrue(ellipse2D_Float1.equals((Object)ellipse2D_Float0));
      assertNotSame(ellipse2D_Float0, ellipse2D_Float1);
      assertNotSame(ellipse2D_Float1, ellipse2D_Float0);
  }

  @Test
  public void test52()  throws Throwable  {
      Line2D line2D0 = null;
      Shape shape0 = ShapeUtilities.clone((Shape) line2D0);
      assertNull(shape0);
  }

  @Test
  public void test53()  throws Throwable  {
      long long0 = 2336L;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createRegularCross((float) long0, (float) long0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 5;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDownTriangle((float) int0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "BU";
      JToolBar jToolBar0 = new JToolBar(string0);
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isLightweight());
      assertNotNull(jToolBar0);
      
      Rectangle rectangle0 = jToolBar0.getBounds();
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isLightweight());
      assertNotNull(rectangle0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      Point2D.Double point2D_Double1 = (Point2D.Double)ShapeUtilities.getPointInRectangle((double) rectangle0.x, point2D_Double0.y, (Rectangle2D) rectangle0);
      assertEquals(0.0, point2D_Double1.x, 0.01D);
      assertEquals(0.0, point2D_Double1.y, 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(false, jToolBar0.isLightweight());
      assertNotNull(point2D_Double1);
      assertTrue(point2D_Double1.equals((Object)point2D_Double0));
      assertTrue(point2D_Double0.equals((Object)point2D_Double1));
      assertNotSame(point2D_Double1, point2D_Double0);
      assertNotSame(point2D_Double0, point2D_Double1);
  }

  @Test
  public void test56()  throws Throwable  {
      float float0 = 2246.003F;
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createDiamond(float0);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test57()  throws Throwable  {
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      GeneralPath generalPath0 = (GeneralPath)ShapeUtilities.createUpTriangle((float) polygon0.npoints);
      assertEquals(0, polygon0.npoints);
      assertEquals(1, generalPath0.getWindingRule());
      assertNotNull(generalPath0);
  }

  @Test
  public void test58()  throws Throwable  {
      Graphics2D graphics2D0 = null;
      String string0 = "";
      boolean boolean0 = false;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(string0, boolean0);
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertNotNull(jCheckBoxMenuItem0);
      
      Rectangle rectangle0 = jCheckBoxMenuItem0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try {
        ShapeUtilities.drawRotatedShape(graphics2D0, (Shape) rectangle0, (double) rectangle0.height, (float) rectangle0.height, (float) rectangle0.height);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
