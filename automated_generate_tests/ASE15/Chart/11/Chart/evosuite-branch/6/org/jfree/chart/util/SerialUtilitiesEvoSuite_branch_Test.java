/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:54:14 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.EOFException;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.text.AttributedString;
import javax.swing.DebugGraphics;
import javax.swing.JTextArea;
import javax.swing.JToggleButton;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.util.SerialUtilities;
import org.junit.runner.RunWith;


public class SerialUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      double double0 = 1872.215773872;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = point2D_Double0.toString();
      assertEquals("Point2D.Double[1872.215773872, 1872.215773872]", string0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
      assertNotNull(string0);
      
      AttributedString attributedString0 = new AttributedString(string0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
      assertNotNull(attributedString0);
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
      assertEquals(1872.215773872, point2D_Double0.x, 0.01D);
      assertEquals(1872.215773872, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = point2D_Double0.toString();
      assertEquals("Point2D.Double[0.0, 0.0]", string0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(string0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0, boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(objectOutputStream0);
      
      AttributedString attributedString0 = null;
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        AttributedString attributedString0 = SerialUtilities.readAttributedString(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "java.awt.geom.Line2D";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      Point2D.Double point2D_Double0 = null;
      SerialUtilities.writePoint2D((Point2D) point2D_Double0, objectOutputStream0);
  }

  @Test
  public void test04()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = "java.awt.geom.Line2D";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writePoint2D((Point2D) point2D_Double0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      
      String string0 = "The 'month' argument must be in the range 1 to 12.";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "java.awt.BasicStroke";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      int int0 = 1;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(int0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertNotNull(arc2D_Double0);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(1, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle2D_Double0, objectOutputStream0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      SerialUtilities.writeShape((Shape) rectangle2D_Double0, objectOutputStream0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      String string0 = "H10\\}Zw";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) line2D_Double0, objectOutputStream0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      SerialUtilities.writeShape((Shape) line2D_Double0, objectOutputStream0);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      assertNotNull(defaultStyledDocument0);
      
      String string0 = "Not enough valid columns where generated by query.";
      int int0 = 0;
      JTextArea jTextArea0 = new JTextArea((Document) defaultStyledDocument0, string0, int0, int0);
      assertNotNull(jTextArea0);
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jTextArea0.new AccessibleJTextComponent();
      assertNotNull(jTextComponent_AccessibleJTextComponent0);
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      
      Rectangle rectangle0 = jTextComponent_AccessibleJTextComponent0.getCharacterBounds(int0);
      assertNull(rectangle0);
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "The 'item' index is out of bounds.";
      boolean boolean0 = false;
      JToggleButton jToggleButton0 = new JToggleButton(string0, boolean0);
      assertNotNull(jToggleButton0);
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      
      Rectangle rectangle0 = jToggleButton0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      String string0 = point2D_Double0.toString();
      assertEquals("Point2D.Double[0.0, 0.0]", string0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(string0);
      
      float float0 = 0.0F;
      BasicStroke basicStroke0 = new BasicStroke(float0);
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(mockFile0);
      
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0, boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      Stroke stroke0 = null;
      String string0 = "java.awt.BasicStroke";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke(stroke0, objectOutputStream0);
  }

  @Test
  public void test15()  throws Throwable  {
      Class<GeneralPath> class0 = GeneralPath.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertTrue(boolean0);
      
      String string0 = "java.awt.geom.Line2D";
      float float0 = 0.0F;
      BasicStroke basicStroke0 = new BasicStroke(float0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream((File) mockFile0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Class<GeneralPath> class0 = GeneralPath.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertTrue(boolean0);
      
      String string0 = "m4<>/z";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream((File) mockFile0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Paint paint0 = null;
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writePaint(paint0, objectOutputStream0);
  }

  @Test
  public void test19()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(true, mockJFileChooser0.isEnabled());
      
      Color color0 = mockJFileChooser0.getBackground();
      assertNull(color0);
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(true, mockJFileChooser0.isEnabled());
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Color color0 = Color.green;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      
      String string0 = "java.awt.GradientPaint";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      assertNotNull(mockFileOutputStream0);
      
      boolean boolean0 = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0, boolean0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
  }

  @Test
  public void test21()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      Class<GeneralPath> class0 = GeneralPath.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertTrue(boolean0);
      
      float float0 = 0.0F;
      BasicStroke basicStroke0 = new BasicStroke(float0);
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      String string0 = "m4<>/z";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream((File) mockFile0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream((File) mockFile0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) mockFileInputStream0, (InputStream) mockFileInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, sequenceInputStream0.markSupported());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(false, pushbackInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, sequenceInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) pushbackInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, pushbackInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, sequenceInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
      assertNull(paint0);
      assertEquals(false, pushbackInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, sequenceInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
  }
}
