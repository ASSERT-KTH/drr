/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:36:22 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Canvas;
import java.awt.Color;
import java.awt.Component;
import java.awt.GraphicsConfiguration;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OptionalDataException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.text.AttributedString;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableCellRenderer;



import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.jfree.chart.util.SerialUtilities;
import org.junit.runner.RunWith;
import sun.awt.SunHints;


public class SerialUtilitiesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      AttributedString attributedString0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "JFreeChart - No path exists";
      AttributedString attributedString0 = new AttributedString(string0);
      assertNotNull(attributedString0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeAttributedString(attributedString0, objectOutputStream0);
  }

  @Test
  public void test02()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        AttributedString attributedString0 = SerialUtilities.readAttributedString(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertNotNull(defaultListCellRenderer_UIResource0);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      
      int int0 = 1545;
      boolean boolean0 = true;
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent((Component) defaultListCellRenderer_UIResource0, int0, (long) int0, int0, int0, int0, int0, int0, int0, boolean0, int0, int0, int0);
      assertNotNull(mouseWheelEvent0);
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1545, mouseWheelEvent0.getScrollType());
      assertEquals(1545, mouseWheelEvent0.getID());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1545,1545),absolute(1545,1545),button=0,modifiers=Alt+Shift+Button2+Button1,extModifiers=Alt+Button1,clickCount=1545,scrollType=unknown scroll type,scrollAmount=1545,wheelRotation=1545,preciseWheelRotation=1545.0] on List.cellRenderer", mouseWheelEvent0.toString());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(1545L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(2387025, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(9, mouseWheelEvent0.getModifiers());
      assertEquals(1545, mouseWheelEvent0.getWheelRotation());
      assertEquals(1545, mouseWheelEvent0.getX());
      assertEquals(1545, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(1545, mouseWheelEvent0.getClickCount());
      assertEquals(1545, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(1545, mouseWheelEvent0.getScrollAmount());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(1545, mouseWheelEvent0.getYOnScreen());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      
      Point point0 = defaultListCellRenderer_UIResource0.getToolTipLocation((MouseEvent) mouseWheelEvent0);
      assertNull(point0);
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1545, mouseWheelEvent0.getScrollType());
      assertEquals(1545, mouseWheelEvent0.getID());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1545,1545),absolute(1545,1545),button=0,modifiers=Alt+Shift+Button2+Button1,extModifiers=Alt+Button1,clickCount=1545,scrollType=unknown scroll type,scrollAmount=1545,wheelRotation=1545,preciseWheelRotation=1545.0] on List.cellRenderer", mouseWheelEvent0.toString());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(1545L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(2387025, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(9, mouseWheelEvent0.getModifiers());
      assertEquals(1545, mouseWheelEvent0.getWheelRotation());
      assertEquals(1545, mouseWheelEvent0.getX());
      assertEquals(1545, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(1545, mouseWheelEvent0.getClickCount());
      assertEquals(1545, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(1545, mouseWheelEvent0.getScrollAmount());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(1545, mouseWheelEvent0.getYOnScreen());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      SerialUtilities.writePoint2D((Point2D) point0, objectOutputStream0);
      assertEquals(true, mouseWheelEvent0.isShiftDown());
      assertEquals(1545, mouseWheelEvent0.getScrollType());
      assertEquals(1545, mouseWheelEvent0.getID());
      assertEquals("java.awt.event.MouseWheelEvent[unknown type,(1545,1545),absolute(1545,1545),button=0,modifiers=Alt+Shift+Button2+Button1,extModifiers=Alt+Button1,clickCount=1545,scrollType=unknown scroll type,scrollAmount=1545,wheelRotation=1545,preciseWheelRotation=1545.0] on List.cellRenderer", mouseWheelEvent0.toString());
      assertEquals(false, mouseWheelEvent0.isAltGraphDown());
      assertEquals(1545L, mouseWheelEvent0.getWhen());
      assertEquals(false, mouseWheelEvent0.isControlDown());
      assertEquals(2387025, mouseWheelEvent0.getUnitsToScroll());
      assertEquals(9, mouseWheelEvent0.getModifiers());
      assertEquals(1545, mouseWheelEvent0.getWheelRotation());
      assertEquals(1545, mouseWheelEvent0.getX());
      assertEquals(1545, mouseWheelEvent0.getY());
      assertEquals(true, mouseWheelEvent0.isPopupTrigger());
      assertEquals(false, mouseWheelEvent0.isConsumed());
      assertEquals(false, mouseWheelEvent0.isMetaDown());
      assertEquals(1545, mouseWheelEvent0.getClickCount());
      assertEquals(1545, mouseWheelEvent0.getXOnScreen());
      assertEquals(0, mouseWheelEvent0.getButton());
      assertEquals(1545, mouseWheelEvent0.getScrollAmount());
      assertEquals(true, mouseWheelEvent0.isAltDown());
      assertEquals(1545, mouseWheelEvent0.getYOnScreen());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 280;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      
      Point point0 = defaultTableCellRenderer_UIResource0.getLocation();
      assertNotNull(point0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      SerialUtilities.writePoint2D((Point2D) point0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
  }

  @Test
  public void test05()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
      assertNull(paint0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      AttributedString attributedString0 = SerialUtilities.readAttributedString(objectInputStream0);
      assertNull(attributedString0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
      assertNull(point2D0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      try {
        Point2D point2D1 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Point2D point2D0 = SerialUtilities.readPoint2D(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      Arc2D.Double arc2D_Double0 = new Arc2D.Double(int0);
      assertNotNull(arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals(43, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u0013java.awt.geom.Arc2D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xp", byteArrayOutputStream0.toString());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      
      SerialUtilities.writeShape((Shape) arc2D_Double0, objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u0013java.awt.geom.Arc2D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xpw5\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0000~\u0000\u0001", byteArrayOutputStream0.toString());
      assertEquals(103, byteArrayOutputStream0.size());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      
      Rectangle rectangle0 = jPopupMenu_Separator0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) rectangle0.width, (double) rectangle0.x, (double) rectangle0.height, (double) rectangle0.y);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      
      SerialUtilities.writeShape((Shape) rectangle2D_Double0, objectOutputStream0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, double0, double0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertNotNull(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) pipedOutputStream0);
      assertNotNull(bufferedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) bufferedOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      
      SerialUtilities.writeShape((Shape) line2D_Double0, objectOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(false, pipedInputStream0.markSupported());
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Shape shape0 = null;
      String string0 = "u 4e5ts. P";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((OutputStream) mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockPrintStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeShape(shape0, objectOutputStream0);
  }

  @Test
  public void test12()  throws Throwable  {
      Object[][] objectArray0 = new Object[1][2];
      Object[] objectArray1 = new Object[3];
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR;
      assertNotNull(sunHints_Value0);
      
      objectArray1[0] = (Object) sunHints_Value0;
      assertNotNull(objectArray1[0]);
      
      objectArray1[1] = (Object) sunHints_Value0;
      assertNotNull(objectArray1[1]);
      
      objectArray1[2] = (Object) sunHints_Value0;
      assertNotNull(objectArray1[2]);
      
      objectArray0[0] = objectArray1;
      assertNotNull(objectArray0[0]);
      
      JTable jTable0 = new JTable(objectArray0, objectArray0[0]);
      assertNotNull(jTable0);
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jTable0.getSelectionBackground();
      assertNotNull(colorUIResource0);
      assertEquals(229, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=184,g=207,b=229]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(207, colorUIResource0.getGreen());
      assertEquals(184, colorUIResource0.getRed());
      assertEquals(-4665371, colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      
      int int0 = 1913;
      boolean boolean0 = false;
      LineBorder lineBorder0 = new LineBorder((Color) colorUIResource0, int0, boolean0);
      assertNotNull(lineBorder0);
      assertEquals(229, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=184,g=207,b=229]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(207, colorUIResource0.getGreen());
      assertEquals(184, colorUIResource0.getRed());
      assertEquals(-4665371, colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      
      Rectangle rectangle0 = lineBorder0.getInteriorRectangle((Component) jTable0, int0, int0, int0, int0);
      assertNotNull(rectangle0);
      assertEquals(229, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=184,g=207,b=229]", colorUIResource0.toString());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(207, colorUIResource0.getGreen());
      assertEquals(184, colorUIResource0.getRed());
      assertEquals(-4665371, colorUIResource0.getRGB());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals((-1913.0), rectangle0.getWidth(), 0.01D);
      assertEquals(3826.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=3826,y=3826,width=-1913,height=-1913]", rectangle0.toString());
      assertEquals(3826.0, rectangle0.getX(), 0.01D);
      assertEquals(2869.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(2869.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(1913.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(1913.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(3826.0, rectangle0.getMinY(), 0.01D);
      assertEquals(3826.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-1913.0), rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isValid());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(3826, rectangle0.y);
      assertEquals(3826, rectangle0.x);
      assertEquals((-1913), rectangle0.width);
      assertEquals((-1913), rectangle0.height);
      
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeShape((Shape) rectangle0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double();
      assertNotNull(ellipse2D_Double0);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      assertEquals(false, objectInputStream0.markSupported());
      
      SerialUtilities.writeShape((Shape) ellipse2D_Double0, objectOutputStream0);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.x, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.height, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.width, 0.01D);
      assertEquals(0.0, ellipse2D_Double0.y, 0.01D);
      
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: OptionalDataException");
      
      } catch(OptionalDataException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
      assertNull(paint0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      Shape shape0 = SerialUtilities.readShape(objectInputStream0);
      assertNull(shape0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
  }

  @Test
  public void test16()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Shape shape0 = SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test18()  throws Throwable  {
      Stroke stroke0 = null;
      int int0 = 0;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      assertNotNull(objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      
      SerialUtilities.writeStroke(stroke0, objectOutputStream0);
      assertEquals(4, byteArrayOutputStream0.size());
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Stroke stroke0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writeStroke(stroke0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BasicStroke basicStroke0 = new BasicStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      String string0 = "S:[@cY\\xjg Ni";
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      assertNotNull(mockFileOutputStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) mockFileOutputStream0);
      assertNotNull(objectOutputStream0);
      
      SerialUtilities.writeStroke((Stroke) basicStroke0, objectOutputStream0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(string0);
      assertNotNull(mockFileInputStream0);
      assertEquals(false, mockFileInputStream0.markSupported());
      
      ObjectInputStream objectInputStream0 = new ObjectInputStream((InputStream) mockFileInputStream0);
      assertNotNull(objectInputStream0);
      assertEquals(false, objectInputStream0.markSupported());
      assertEquals(false, mockFileInputStream0.markSupported());
      
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Stroke stroke0 = SerialUtilities.readStroke(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      assertNotNull(printStream0);
      
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) printStream0);
      assertNotNull(objectOutputStream0);
      
      GraphicsConfiguration graphicsConfiguration0 = null;
      Canvas canvas0 = new Canvas(graphicsConfiguration0);
      assertNotNull(canvas0);
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(false, canvas0.isValid());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isShowing());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isLightweight());
      
      Color color0 = canvas0.getForeground();
      assertNull(color0);
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(false, canvas0.isValid());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isShowing());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isLightweight());
      
      SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
      assertEquals(0, canvas0.getWidth());
      assertEquals(false, canvas0.isPreferredSizeSet());
      assertEquals(false, canvas0.isDisplayable());
      assertEquals(false, canvas0.isBackgroundSet());
      assertEquals(false, canvas0.isFontSet());
      assertEquals(false, canvas0.isMaximumSizeSet());
      assertEquals(false, canvas0.isDoubleBuffered());
      assertEquals(Component.BaselineResizeBehavior.OTHER, canvas0.getBaselineResizeBehavior());
      assertEquals(false, canvas0.isOpaque());
      assertEquals(0, canvas0.getHeight());
      assertEquals(false, canvas0.getIgnoreRepaint());
      assertEquals(false, canvas0.isCursorSet());
      assertEquals(true, canvas0.getFocusTraversalKeysEnabled());
      assertEquals(false, canvas0.isValid());
      assertEquals(0, canvas0.getX());
      assertEquals(0.5F, canvas0.getAlignmentX(), 0.01F);
      assertEquals(0, canvas0.getY());
      assertEquals(true, canvas0.isVisible());
      assertEquals(false, canvas0.isMinimumSizeSet());
      assertEquals(false, canvas0.isForegroundSet());
      assertEquals(true, canvas0.isEnabled());
      assertEquals(false, canvas0.isShowing());
      assertEquals(0.5F, canvas0.getAlignmentY(), 0.01F);
      assertEquals(false, canvas0.isLightweight());
  }

  @Test
  public void test23()  throws Throwable  {
      Paint paint0 = null;
      ObjectOutputStream objectOutputStream0 = null;
      // Undeclared exception!
      try {
        SerialUtilities.writePaint(paint0, objectOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       Color color0 = Color.DARK_GRAY;
//       assertNotNull(color0);
//       assertEquals(64, color0.getRed());
//       assertEquals(255, color0.getAlpha());
//       assertEquals(64, color0.getBlue());
//       assertEquals("java.awt.Color[r=64,g=64,b=64]", color0.toString());
//       assertEquals(1, color0.getTransparency());
//       assertEquals(-12566464, color0.getRGB());
//       assertEquals(64, color0.getGreen());
//       
//       int int0 = 280;
//       ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
//       assertNotNull(byteArrayOutputStream0);
//       assertEquals("", byteArrayOutputStream0.toString());
//       assertEquals(0, byteArrayOutputStream0.size());
//       
//       ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
//       assertNotNull(objectOutputStream0);
//       assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
//       assertEquals(4, byteArrayOutputStream0.size());
//       
//       SerialUtilities.writePaint((Paint) color0, objectOutputStream0);
//       assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0000vr\u0000\u000Ejava.awt.Color\u0001\uFFFD\u0017\uFFFD\u0010\uFFFD3u\u0002\u0000\u0005F\u0000\u0006falphaI\u0000\u0005valueL\u0000\u0002cst\u0000\u001BLjava/awt/color/ColorSpace;[\u0000\tfrgbvaluet\u0000\u0002[F[\u0000\u0006fvalueq\u0000~\u0000\u0002xpsq\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\uFFFD@@@sr\u0000\u001Djava.awt.color.ICC_ColorSpace/\uFFFD\uFFFD\uFFFD\uFFFDN\uFFFD\uFFFD\u0002\u0000\u0006Z\u0000\rneedScaleInit[\u0000\ndiffMinMaxq\u0000~\u0000\u0002[\u0000\rinvDiffMinMaxq\u0000~\u0000\u0002[\u0000\u0006maxValq\u0000~\u0000\u0002[\u0000\u0006minValq\u0000~\u0000\u0002L\u0000\u000BthisProfilet\u0000\u001CLjava/awt/color/ICC_Profile;xr\u0000\u0019java.awt.color.ColorSpace\uFFFDQT\uFFFDO[\uFFFD\uFFFD\u0002\u0000\u0002I\u0000\rnumComponentsI\u0000\u0004typexp\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0005\u0000ur\u0000\u0002[F\u000B\uFFFD\uFFFD\uFFFD\"\uFFFD\fB\u0002\u0000\u0000xp\u0000\u0000\u0000\u0003?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003G\uFFFD\u0000G\uFFFD\u0000G\uFFFD\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000?\uFFFD\u0000\u0000uq\u0000~\u0000\t\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000sr\u0000\u001Djava.awt.color.ICC_ProfileRGBv\b\u0011\uFFFD\uFFFD\u01E7\u0006\u0002\u0000\u0000xr\u0000\u001Ajava.awt.color.ICC_Profile\uFFFDW\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDB\u0003\u0000\u0001I\u0000\u001FiccProfileSerializedDataVersionxp\u0000\u0000\u0000\u0001t\u0000\u0007CS_sRGBpxpp", byteArrayOutputStream0.toString());
//       assertEquals(621, byteArrayOutputStream0.size());
//       assertEquals(64, color0.getRed());
//       assertEquals(255, color0.getAlpha());
//       assertEquals(64, color0.getBlue());
//       assertEquals("java.awt.Color[r=64,g=64,b=64]", color0.toString());
//       assertEquals(1, color0.getTransparency());
//       assertEquals(-12566464, color0.getRGB());
//       assertEquals(64, color0.getGreen());
//   }

  @Test
  public void test25()  throws Throwable  {
      ObjectInputStream objectInputStream0 = null;
      // Undeclared exception!
      try {
        Paint paint0 = SerialUtilities.readPaint(objectInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Object> class0 = Object.class;
      boolean boolean0 = SerialUtilities.isSerializable(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = SerialUtilities.isSerializable(class0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
