/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:49:59 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;




import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimePeriodFormatException;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class WeekEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      
      String string0 = week0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Week 7, 2014", string0);
      
      // Undeclared exception!
      try {
        Week week1 = Week.parseWeek(string0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the week.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "qCT";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not find separator.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      Week week0 = Week.parseWeek(string0);
      assertNull(week0);
  }

  @Test
  public void test03()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409799363L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999364L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599363L, hour0.getLastMillisecond());
      
      int int0 = week0.compareTo((Object) hour0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409799363L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999364L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599363L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-28);
      Week week0 = new Week(int0, int0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(-28, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1512L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-63068587200001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-63068284800001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-63068889600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-28, week0.getWeek());
      
      Week week1 = new Week();
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals(1392206399363L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999364L, week1.getFirstMillisecond());
      
      int int1 = week0.compareTo((Object) week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1392206399363L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999364L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-28, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1512L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-63068587200001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-63068284800001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-63068889600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(-28, week0.getWeek());
      //  // Unstable assertion: assertEquals((-2042), int1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 860;
      Week week0 = new Week(int0, int0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals((-34972300800001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-34972905600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(45672L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-34972603200001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(860, week0.getYearValue());
      //  // Unstable assertion: assertEquals(92, week0.getWeek());
      
      Class<String> class0 = String.class;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Feb 12 10:20:00 GMT 2834", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals("Sun Feb 12 10:20:00 GMT 2834", mockDate0.toString());
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      int int1 = week0.compareTo((Object) regularTimePeriod0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Sun Feb 12 10:20:00 GMT 2834", mockDate0.toString());
      //  // Unstable assertion: assertEquals((-34972300800001L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-34972905600000L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(45672L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-34972603200001L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(860, week0.getYearValue());
      //  // Unstable assertion: assertEquals(92, week0.getWeek());
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1, int1);
  }

  @Test
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      
      int int0 = 194;
      Week week1 = new Week(int0, int0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals(-62, week1.getWeek());
      //  // Unstable assertion: assertEquals((-56082844800001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(10220L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-56083147200001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-56083449600000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(194, week1.getYearValue());
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(-62, week1.getWeek());
      //  // Unstable assertion: assertEquals((-56082844800001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(10220L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-56083147200001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-56083449600000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(194, week1.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      
      Week week1 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799363L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1391903999364L, week1.getFirstMillisecond());
      
      boolean boolean0 = week1.equals((Object) week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertTrue(week0.equals((Object)week1));
      //  // Unstable assertion: assertTrue(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799363L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(7, week1.getWeek());
      //  // Unstable assertion: assertEquals(1391903999364L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      Locale locale0 = Locale.KOREA;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      
      boolean boolean0 = week0.equals((Object) locale0);
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("KOR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("kor", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("ko_KR", locale0.toString());
      //  // Unstable assertion: assertEquals("KR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ko", locale0.getLanguage());
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       int int0 = 860;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       
//       int int1 = week0.hashCode();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals(27537, int1);
//       
//       Week week1 = new Week(int0, int1);
//       assertNotNull(week1);
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       assertFalse(int0 == int1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(int1 == int0);
//       assertFalse(week1.equals((Object)week0));
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals(806871499199999L, week1.getMiddleMillisecond());
//       assertEquals(806871801599999L, week1.getLastMillisecond());
//       assertEquals(92, week1.getWeek());
//       assertEquals(806871196800000L, week1.getFirstMillisecond());
//       assertEquals(27537, week1.getYearValue());
//       assertEquals(1459553L, week1.getSerialIndex());
//       
//       RegularTimePeriod regularTimePeriod0 = week1.next();
//       assertNull(regularTimePeriod0);
//       assertNotSame(week0, week1);
//       assertNotSame(week1, week0);
//       assertFalse(int0 == int1);
//       assertFalse(week0.equals((Object)week1));
//       assertFalse(int1 == int0);
//       assertFalse(week1.equals((Object)week0));
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals(806871499199999L, week1.getMiddleMillisecond());
//       assertEquals(806871801599999L, week1.getLastMillisecond());
//       assertEquals(92, week1.getWeek());
//       assertEquals(806871196800000L, week1.getFirstMillisecond());
//       assertEquals(27537, week1.getYearValue());
//       assertEquals(1459553L, week1.getSerialIndex());
//   }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 3916;
      Year year0 = new Year(int0);
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(3916, year0.getYear());
      //  // Unstable assertion: assertEquals(3916L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("3916", year0.toString());
      //  // Unstable assertion: assertEquals(61409750400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(61425561599999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(61441372799999L, year0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)year0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(3916, year0.getYear());
      //  // Unstable assertion: assertEquals(3916L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("3916", year0.toString());
      //  // Unstable assertion: assertEquals(61409750400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(61425561599999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(61441372799999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Dec 31 23:59:59 GMT 3916", mockDate0.toString());
      
      Week week0 = new Week((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(207602L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3917, week0.getYearValue());
      //  // Unstable assertion: assertEquals(61441588799363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(61441891199363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(61441286399364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3916, year0.getYear());
      //  // Unstable assertion: assertEquals(3916L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("3916", year0.toString());
      //  // Unstable assertion: assertEquals(61409750400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(61425561599999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(61441372799999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Dec 31 23:59:59 GMT 3916", mockDate0.toString());
      
      Week week1 = (Week)week0.next();
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertEquals(207602L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(3917, week0.getYearValue());
      //  // Unstable assertion: assertEquals(61441588799363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals(61441891199363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(61441286399364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, week1.getWeek());
      //  // Unstable assertion: assertEquals(207603L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(61442193599999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3917, week1.getYearValue());
      //  // Unstable assertion: assertEquals(61441891200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(61442495999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3916, year0.getYear());
      //  // Unstable assertion: assertEquals(3916L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("3916", year0.toString());
      //  // Unstable assertion: assertEquals(61409750400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(61425561599999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(61441372799999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sun Dec 31 23:59:59 GMT 3916", mockDate0.toString());
  }

  @Test
  public void test11() {}
//   @Test
//   public void test11()  throws Throwable  {
//       int int0 = 860;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       
//       Week week1 = (Week)week0.next();
//       assertNotNull(week1);
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals(861, week1.getYearValue());
//       assertEquals((-34996190400001L), week1.getMiddleMillisecond());
//       assertEquals(1, week1.getWeek());
//       assertEquals((-34996492800000L), week1.getFirstMillisecond());
//       assertEquals((-34995888000001L), week1.getLastMillisecond());
//       assertEquals(45634L, week1.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//   }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertEquals(100701L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1900, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2208470400637L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-2209075200636L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-2208772800637L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = week0.previous();
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      //  // Unstable assertion: assertEquals(100701L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1900, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-2208470400637L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-2209075200636L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-2208772800637L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       int int0 = 860;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       
//       Week week1 = (Week)week0.previous();
//       assertNotNull(week1);
//       assertNotSame(week1, week0);
//       assertNotSame(week0, week1);
//       assertFalse(week1.equals((Object)week0));
//       assertFalse(week0.equals((Object)week1));
//       assertEquals(860, week1.getYearValue());
//       assertEquals((-34973510400000L), week1.getFirstMillisecond());
//       assertEquals(91, week1.getWeek());
//       assertEquals((-34973208000001L), week1.getMiddleMillisecond());
//       assertEquals((-34972905600001L), week1.getLastMillisecond());
//       assertEquals(45671L, week1.getSerialIndex());
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//   }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-1201);
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      Week week0 = new Week((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(259199363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-345600636L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-43200637L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      Week week1 = (Week)week0.previous();
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(52, week1.getWeek());
      //  // Unstable assertion: assertEquals((-950400000L), week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104409L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals((-648000001L), week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1969, week1.getYearValue());
      //  // Unstable assertion: assertEquals((-345600001L), week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(104411L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(259199363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1970, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-345600636L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-43200637L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      MockDate mockDate0 = (MockDate)week0.getStart();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals("Sat Feb 08 23:59:59 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("The 'week' argument must be in the range 1 - 53.", zoneInfo0.getID());
      
      Locale locale0 = null;
      Week week1 = null;
      try {
        week1 = new Week((Date) mockDate0, (TimeZone) zoneInfo0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'locale' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)week0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Sat Feb 15 23:59:59 GMT 2014", mockDate0.toString());
      
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.UK;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      
      Week week1 = null;
      try {
        week1 = new Week((Date) mockDate0, timeZone0, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'zone' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Date date0 = null;
      Week week0 = null;
      try {
        week0 = new Week(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'time' argument.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-1201);
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      Year year0 = new Year((Date) mockDate0);
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals((-637L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1969, year0.getYear());
      //  // Unstable assertion: assertEquals((-31536000636L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1969L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("1969", year0.toString());
      //  // Unstable assertion: assertEquals((-15768000637L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      Week week0 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals((-637L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1969, year0.getYear());
      //  // Unstable assertion: assertEquals((-31536000636L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1969L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("1969", year0.toString());
      //  // Unstable assertion: assertEquals((-15768000637L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15983999999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(15681599999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15379200000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(104436L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1969, week0.getYearValue());
      //  // Unstable assertion: assertEquals(79, week0.getWeek());
      //  // Unstable assertion: assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      
      int int0 = week0.getYearValue();
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, int0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534399364L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399363L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399363L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      Week week1 = new Week(int0, year0);
      //  // Unstable assertion: assertNotNull(week1);
      //  // Unstable assertion: assertNotSame(week1, week0);
      //  // Unstable assertion: assertNotSame(week0, week1);
      //  // Unstable assertion: assertFalse(week1.equals((Object)week0));
      //  // Unstable assertion: assertFalse(week0.equals((Object)week1));
      //  // Unstable assertion: assertEquals(1367711999999L, week1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106708L, week1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week1.getYearValue());
      //  // Unstable assertion: assertEquals(-34, week1.getWeek());
      //  // Unstable assertion: assertEquals(1367409599999L, week1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1367107200000L, week1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1388534399364L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399363L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399363L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "-";
      // Undeclared exception!
      try {
        Week week0 = Week.parseWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't evaluate the year.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      
      int int0 = week0.compareTo((Object) week0);
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1392508799363L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1391903999364L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392206399363L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, int0);
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       int int0 = 860;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       
//       long long0 = week0.getSerialIndex();
//       assertEquals((-34972603200001L), week0.getMiddleMillisecond());
//       assertEquals(92, week0.getWeek());
//       assertEquals((-34972905600000L), week0.getFirstMillisecond());
//       assertEquals(860, week0.getYearValue());
//       assertEquals((-34972300800001L), week0.getLastMillisecond());
//       assertEquals(45672L, week0.getSerialIndex());
//       assertEquals(45672L, long0);
//   }
}
