/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:12:28 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Event;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.JToolBar;
import javax.swing.plaf.ColorUIResource;




import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAnchor;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.SymbolAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.text.TextFragment;
import org.jfree.chart.text.TextLine;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.SortOrder;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.general.WaferMapDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;


public class CategoryPlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      combinedDomainCategoryPlot0.setDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = (CombinedDomainCategoryPlot)combinedDomainCategoryPlot0.clone();
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotNull(combinedDomainCategoryPlot1);
  }

  @Test
  public void test001()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNotNull(fastScatterPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getRangeAxis();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot1 = (CombinedRangeCategoryPlot)combinedRangeCategoryPlot0.clone();
      assertTrue(combinedRangeCategoryPlot0.equals((Object)combinedRangeCategoryPlot1));
      assertTrue(combinedRangeCategoryPlot1.equals((Object)combinedRangeCategoryPlot0));
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot1.getWeight());
      assertEquals(true, combinedRangeCategoryPlot1.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot1.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot1.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot1.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot1.getNoDataMessage());
      assertNotSame(combinedRangeCategoryPlot0, combinedRangeCategoryPlot1);
      assertNotSame(combinedRangeCategoryPlot1, combinedRangeCategoryPlot0);
      assertNotNull(combinedRangeCategoryPlot1);
  }

  @Test
  public void test002()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 255;
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxisForDataset(int0);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot1 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertTrue(combinedDomainCategoryPlot1.equals((Object)combinedDomainCategoryPlot0));
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(0.0, combinedDomainCategoryPlot1.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot1.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot1.getWeight());
      assertEquals(false, combinedDomainCategoryPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot1.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot1.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot1.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot1.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot1.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotSame(combinedDomainCategoryPlot1, combinedDomainCategoryPlot0);
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
      assertNotNull(combinedDomainCategoryPlot1);
      
      int int1 = 0;
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setDomainAxis(int1, categoryAxis0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(combinedDomainCategoryPlot0.equals((Object)combinedDomainCategoryPlot1));
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotSame(combinedDomainCategoryPlot0, combinedDomainCategoryPlot1);
  }

  @Test
  public void test003()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNull(categoryDataset0);
      
      int int0 = 0;
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(int0);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(categoryAxis0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNull(valueAxis0);
      
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertNotNull(lineAndShapeRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) lineAndShapeRenderer0);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(categoryPlot0);
      
      WaferMapDataset waferMapDataset0 = new WaferMapDataset(int0, int0, (Number) point2D_Double0.y);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01D);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(waferMapDataset0);
      
      boolean boolean0 = categoryPlot0.equals((Object) waferMapDataset0);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, waferMapDataset0.getChipSpace(), 0.01D);
      assertEquals(0, waferMapDataset0.getMaxChipX());
      assertEquals(0, waferMapDataset0.getMaxChipY());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertFalse(boolean0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      double double0 = 1838.4415194;
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.setAnchorValue(double0, boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1838.4415194, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(axisSpace0);
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test006()  throws Throwable  {
      double double0 = 0.0;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      boolean boolean0 = rectangle2D_Double0.equals((Object) arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedDomainAxisSpace();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(axisSpace0);
      
      combinedRangeCategoryPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 3581;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      combinedDomainCategoryPlot0.setDataset(int0, (CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.setRangeAxis(int0, (ValueAxis) logAxis0, boolean0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisCount();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1, int0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(int0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(categoryAxis0);
      
      List list0 = combinedRangeCategoryPlot0.getCategoriesForAxis(categoryAxis0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(list0);
  }

  @Test
  public void test009()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertNotNull(minMaxCategoryRenderer0);
      
      double[][] doubleArray0 = new double[10][4];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxis();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertNotNull(numberAxis0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNull(categoryAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) numberAxis0, (CategoryItemRenderer) minMaxCategoryRenderer0);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals((-5.0E-9), numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(5.0E-9, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(categoryPlot0);
  }

  @Test
  public void test010()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNotNull(categoryPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      Color color0 = (Color)categoryPlot0.getOutlinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNotNull(color0);
      
      float float0 = 324.2F;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertNotNull(thermometerPlot0);
      
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertNotNull(plotOrientation0);
      
      String string0 = "org.jfree.data.RangeType";
      String[] stringArray0 = new String[4];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals("org.jfree.data.RangeType", symbolAxis0.getLabel());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isInverted());
      assertNotNull(symbolAxis0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((double) float0);
      assertNotNull(defaultValueDataset0);
      
      CompassPlot compassPlot0 = new CompassPlot((ValueDataset) defaultValueDataset0);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNotNull(compassPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)compassPlot0.getOutlineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
      assertNotNull(basicStroke0);
      
      categoryPlot0.drawRangeCrosshair(graphics2D0, rectangle2D0, plotOrientation0, float0, symbolAxis0, basicStroke0, color0);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals("org.jfree.data.RangeType", symbolAxis0.getLabel());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertNull(symbolAxis0.getLabelToolTip());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(compassPlot0.getNoDataMessage());
      assertEquals(1.0F, compassPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(360.0, compassPlot0.getRevolutionDistance(), 0.01D);
      assertEquals(true, compassPlot0.isOutlineVisible());
      assertEquals(false, compassPlot0.getDrawBorder());
      assertEquals(0.5F, compassPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, compassPlot0.getLabelType());
      assertEquals(1.0F, compassPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, compassPlot0.isSubplot());
      assertEquals(15, compassPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test011()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3581;
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      Color color0 = (Color)stackedXYAreaRenderer2_0.getBaseOutlinePaint();
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertNotNull(color0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertEquals(5371.5, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(5371.5, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(7162.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(7162.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3581.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(3581.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(3581.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3581.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(3581.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3581.0F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(vectorRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)vectorRenderer0.lookupSeriesOutlineStroke(int0);
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.drawRangeLine(graphics2D0, rectangle2D_Float0, int0, basicStroke0, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(categoryPlot0);
      
      boolean boolean0 = categoryPlot0.isRangeCrosshairLockedOnData();
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertTrue(boolean0);
      
      String string0 = "6<";
      Font font0 = Axis.DEFAULT_TICK_LABEL_FONT;
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertNotNull(font0);
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) categoryPlot0, boolean0);
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(jFreeChart0);
      
      int int0 = 1377;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, point2D_Double0.y, chartRenderingInfo0);
      assertEquals(false, font0.isTransformed());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(1377, bufferedImage0.getTileHeight());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1377, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1377, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1377, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertNotNull(bufferedImage0);
  }

  @Test
  public void test013()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 0;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      String string0 = "a<XW?|&>P:'/";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) boolean0, (double) int0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("a<XW?|&>P:'/", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertNotNull(categoryTextAnnotation0);
      
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, boolean0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("a<XW?|&>P:'/", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      
      boolean boolean1 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("a<XW?|&>P:'/", categoryTextAnnotation0.getText());
      assertEquals(0.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertTrue(boolean1);
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(stackedAreaRenderer0);
      
      Color color0 = (Color)stackedAreaRenderer0.getBasePaint();
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(color0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test015()  throws Throwable  {
      int int0 = Event.INSERT;
      assertEquals(1025, int0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertNotNull(ganttRenderer0);
      
      Stroke stroke0 = ganttRenderer0.getSeriesStroke(int0);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        combinedDomainCategoryPlot0.setRangeCrosshairStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeCrosshairStroke();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test017()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      Marker marker0 = null;
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker(marker0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
      
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test019()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test020()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNotNull(categoryAxis3D0);
      
      float float0 = categoryAxis3D0.getTickMarkOutsideLength();
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, float0, 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, int0);
      
      String string0 = "g^n!\\J]SF_B4";
      Font font0 = Font.decode(string0);
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertNotNull(font0);
      
      TextLine textLine0 = new TextLine(string0, font0);
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertNotNull(textLine0);
      
      TextFragment textFragment0 = textLine0.getLastTextFragment();
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("g^n!\\J]SF_B4", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertNotNull(textFragment0);
      
      Color color0 = (Color)textFragment0.getPaint();
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("g^n!\\J]SF_B4", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertNotNull(deviationRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)deviationRenderer0.lookupSeriesStroke(int0);
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) float0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals("g^n!\\J]SF_B4", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainCategoryPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals("g^n!\\J]SF_B4", font0.getName());
      assertEquals("java.awt.Font[family=Dialog,name=g^n!\\J]SF_B4,style=plain,size=12]", font0.toString());
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(12, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals("g^n!\\J]SF_B4", textFragment0.getText());
      assertEquals(0.0F, textFragment0.getBaselineOffset(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      combinedDomainCategoryPlot0.clearRangeMarkers(int0);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test021()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = (-1142);
      combinedDomainCategoryPlot0.clearRangeMarkers(int0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test022()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertNotNull(categoryPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = categoryPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertNull(collection0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.clearRangeMarkers();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
  }

  @Test
  public void test024()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNotNull(categoryPlot0);
      
      int int0 = 2697;
      JToolBar jToolBar0 = new JToolBar();
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertNotNull(jToolBar0);
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jToolBar0.getBackground();
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertNotNull(colorUIResource0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) colorUIResource0, (Stroke) basicStroke0);
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = null;
      categoryPlot0.addRangeMarker(int0, (Marker) categoryMarker0, layer0);
      assertEquals(true, jToolBar0.isForegroundSet());
      assertEquals(false, jToolBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jToolBar0.isFocusTraversalPolicySet());
      assertEquals(true, jToolBar0.isFontSet());
      assertEquals(false, jToolBar0.isMaximumSizeSet());
      assertEquals(0, jToolBar0.countComponents());
      assertEquals(false, jToolBar0.isShowing());
      assertEquals(false, jToolBar0.isCursorSet());
      assertEquals(true, jToolBar0.isVisible());
      assertEquals(false, jToolBar0.isMinimumSizeSet());
      assertEquals(false, jToolBar0.isLightweight());
      assertEquals(false, jToolBar0.isValid());
      assertEquals(0, jToolBar0.getComponentCount());
      assertEquals(false, jToolBar0.isPreferredSizeSet());
      assertEquals(true, jToolBar0.isEnabled());
      assertEquals(true, jToolBar0.isBackgroundSet());
      assertEquals(true, jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(false, jToolBar0.getIgnoreRepaint());
      assertEquals(false, jToolBar0.isFocusCycleRoot());
      assertEquals(false, jToolBar0.isDisplayable());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
  }

  @Test
  public void test025()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 3581;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(3581.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(3581.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = null;
      boolean boolean0 = combinedDomainCategoryPlot0.removeDomainMarker(int0, (Marker) intervalMarker0, layer0);
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(intervalMarker0.getLabel());
      assertEquals(3581.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(3581.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 0;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearDomainMarkers(int0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers((int) byteArray0[6], layer0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(collection0);
  }

  @Test
  public void test028()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(layer0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(collection0);
  }

  @Test
  public void test029()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearDomainMarkers();
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
  }

  @Test
  public void test030()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertNotNull(color0);
      
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertNotNull(windItemRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)windItemRenderer0.getBaseStroke();
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = false;
      combinedDomainCategoryPlot0.addDomainMarker(int0, categoryMarker0, layer0, boolean0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
  }

  @Test
  public void test031()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNotNull(categoryAxis3D0);
      
      float float0 = categoryAxis3D0.getTickMarkOutsideLength();
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2.0F, float0, 0.01F);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = combinedDomainCategoryPlot0.getWeight();
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, int0);
      
      ValueDataset valueDataset0 = null;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot(valueDataset0);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(thermometerPlot0);
      
      Color color0 = (Color)thermometerPlot0.getValuePaint();
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(color0);
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertNotNull(deviationRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)deviationRenderer0.lookupSeriesStroke(int0);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) float0, (Paint) color0, (Stroke) basicStroke0);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.addDomainMarker(int0, categoryMarker0, layer0, boolean0);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setRenderer(int0, (CategoryItemRenderer) lineAndShapeRenderer0, boolean0);
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getToolTipGenerator(int0, int0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertNull(categoryToolTipGenerator0);
      
      lineAndShapeRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      combinedRangeCategoryPlot0.zoom(line2D_Double0.x2);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
  }

  @Test
  public void test034()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNull(categoryDataset0);
      
      int int0 = 0;
      CategoryAxis categoryAxis0 = combinedDomainCategoryPlot0.getDomainAxis(int0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(categoryAxis0);
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertNull(valueAxis0);
      
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(lineAndShapeRenderer0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) lineAndShapeRenderer0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(categoryPlot0);
      
      LegendItemCollection legendItemCollection0 = categoryPlot0.getLegendItems();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test035()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      Color color0 = (Color)stackedXYAreaRenderer2_0.getBaseOutlinePaint();
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertNotNull(color0);
      
      combinedRangeCategoryPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabel());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(basicStroke0);
      
      combinedRangeCategoryPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setRangeGridlinesVisible(boolean0);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Color color0 = (Color)XYLine3DRenderer.DEFAULT_WALL_PAINT;
      assertEquals(-2236963, color0.getRGB());
      assertEquals(221, color0.getGreen());
      assertEquals(221, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=221,g=221,b=221]", color0.toString());
      assertEquals(221, color0.getRed());
      assertNotNull(color0);
      
      combinedRangeCategoryPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(-2236963, color0.getRGB());
      assertEquals(221, color0.getGreen());
      assertEquals(221, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=221,g=221,b=221]", color0.toString());
      assertEquals(221, color0.getRed());
  }

  @Test
  public void test039()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYDotRenderer0.getBaseOutlineStroke();
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeCategoryPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAnchor categoryAnchor0 = combinedRangeCategoryPlot0.getDomainGridlinePosition();
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNotNull(categoryAnchor0);
      
      combinedRangeCategoryPlot0.setDomainGridlinePosition(categoryAnchor0);
      assertEquals("CategoryAnchor.MIDDLE", categoryAnchor0.toString());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test041()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test042()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = false;
      combinedRangeCategoryPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test043()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      SortOrder sortOrder0 = null;
      // Undeclared exception!
      try {
        combinedRangeCategoryPlot0.setRowRenderingOrder(sortOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedDomainCategoryPlot0);
      
      SortOrder sortOrder0 = combinedDomainCategoryPlot0.getRowRenderingOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(sortOrder0);
      
      combinedDomainCategoryPlot0.setRowRenderingOrder(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test045()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeCategoryPlot0);
      
      SortOrder sortOrder0 = combinedRangeCategoryPlot0.getColumnRenderingOrder();
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(sortOrder0);
      
      combinedRangeCategoryPlot0.setColumnRenderingOrder(sortOrder0);
      assertEquals("SortOrder.ASCENDING", sortOrder0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test046()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedRangeCategoryPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRendererForDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryItemRenderer0);
  }

  @Test
  public void test048()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryItemRenderer[] categoryItemRendererArray0 = new CategoryItemRenderer[2];
      combinedRangeCategoryPlot0.setRenderers(categoryItemRendererArray0);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "Yk:An&4NvS";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals("Yk:An&4NvS", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals("Yk:An&4NvS", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 14;
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRenderer(int0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals("Yk:An&4NvS", extendedCategoryAxis0.getLabel());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(categoryItemRenderer0);
  }

  @Test
  public void test050()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      int int0 = 0;
      combinedDomainCategoryPlot0.setDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      combinedDomainCategoryPlot0.setDataset(int0, (CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test051()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 16;
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(int0);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryDataset0);
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearRangeAxes();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test053()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 3;
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      AxisLocation axisLocation0 = xYPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(axisLocation0);
      
      boolean boolean0 = true;
      combinedRangeCategoryPlot0.setRangeAxisLocation(int0, axisLocation0, boolean0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 1288;
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(valueAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int0);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(axisLocation0);
  }

  @Test
  public void test055()  throws Throwable  {
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNotNull(fastScatterPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getRangeAxis();
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisIndex((ValueAxis) numberAxis0);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, int0);
  }

  @Test
  public void test056()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      String string0 = "0g";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals("0g", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertNotNull(logarithmicAxis0);
      
      Range range0 = logarithmicAxis0.getDefaultAutoRange();
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals("0g", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertNotNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals("0g", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals("0g", moduloAxis0.getLabel());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(moduloAxis0);
      
      int int0 = categoryPlot0.getRangeAxisIndex((ValueAxis) moduloAxis0);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals("0g", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals("0g", moduloAxis0.getLabel());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-1), int0);
  }

  @Test
  public void test057()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      combinedRangeCategoryPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      combinedDomainCategoryPlot0.clearRangeAxes();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(valueAxis0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.clearDomainAxes();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.clearDomainAxes();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test061()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 2;
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(int0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test062()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis[] categoryAxisArray0 = new CategoryAxis[8];
      combinedRangeCategoryPlot0.setDomainAxes(categoryAxisArray0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      combinedRangeCategoryPlot0.add((CategoryPlot) combinedDomainCategoryPlot0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      
      CategoryAxis categoryAxis1 = combinedDomainCategoryPlot0.getDomainAxisForDataset(int0);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryAxis1);
  }

  @Test
  public void test064()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainCategoryPlot0);
      
      String string0 = "key";
      String[] stringArray0 = new String[9];
      SymbolAxis symbolAxis0 = new SymbolAxis(string0, stringArray0);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals("key", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelToolTip());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertNotNull(symbolAxis0);
      
      RectangleInsets rectangleInsets0 = symbolAxis0.getLabelInsets();
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals("key", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelToolTip());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      combinedDomainCategoryPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(false, symbolAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, symbolAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, symbolAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, symbolAxis0.isInverted());
      assertEquals("key", symbolAxis0.getLabel());
      assertEquals(0.0, symbolAxis0.getLowerBound(), 0.01D);
      assertEquals(true, symbolAxis0.getAutoRangeIncludesZero());
      assertEquals(true, symbolAxis0.isVisible());
      assertEquals(0.0F, symbolAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, symbolAxis0.isAutoTickUnitSelection());
      assertNull(symbolAxis0.getLabelToolTip());
      assertNull(symbolAxis0.getLabelURL());
      assertEquals(0.0, symbolAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, symbolAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isAxisLineVisible());
      assertEquals(0.05, symbolAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, symbolAxis0.isTickLabelsVisible());
      assertEquals(2.0F, symbolAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, symbolAxis0.isAutoRange());
      assertEquals(1.0, symbolAxis0.getUpperBound(), 0.01D);
      assertEquals(false, symbolAxis0.isVerticalTickLabels());
      assertEquals(true, symbolAxis0.isTickMarksVisible());
      assertEquals(false, symbolAxis0.isNegativeArrowVisible());
      assertEquals(true, symbolAxis0.isGridBandsVisible());
      assertEquals(false, symbolAxis0.isPositiveArrowVisible());
      assertEquals(0.0, symbolAxis0.getLabelAngle(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(3.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test065()  throws Throwable  {
      double double0 = (-924.2061);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNotNull(combinedRangeCategoryPlot0);
      
      combinedRangeCategoryPlot0.setAnchorValue(double0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals((-924.2061), combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getDomainGridlineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test067()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(categoryPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNull(axisSpace0);
      
      categoryPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test068()  throws Throwable  {
      double double0 = (-924.2061);
      boolean boolean0 = false;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      String string0 = "a<XW?|&>P:'/";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) boolean0, double0);
      assertEquals("a<XW?|&>P:'/", categoryTextAnnotation0.getText());
      assertEquals((-924.2061), categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertNotNull(categoryTextAnnotation0);
      
      boolean boolean1 = combinedRangeCategoryPlot0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals("a<XW?|&>P:'/", categoryTextAnnotation0.getText());
      assertEquals((-924.2061), categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertFalse(boolean1);
  }

  @Test
  public void test069()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = combinedRangeCategoryPlot0.getDatasetCount();
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1, int0);
  }

  @Test
  public void test070()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(axisLocation0);
      
      combinedRangeCategoryPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation();
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNotNull(axisLocation0);
      
      int int0 = combinedDomainCategoryPlot0.getDomainAxisIndex((CategoryAxis) extendedCategoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0, int0);
      
      combinedDomainCategoryPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
  }

  @Test
  public void test072()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(categoryPlot0);
      
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(xYSplineAndShapeRenderer0);
      
      int int0 = (-495);
      Color color0 = (Color)xYSplineAndShapeRenderer0.getItemLabelPaint(int0, int0);
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(color0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer((Paint) color0, (Paint) color0, (Paint) color0, (Paint) color0);
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(waterfallBarRenderer0);
      
      int int1 = categoryPlot0.getIndexOf((CategoryItemRenderer) waterfallBarRenderer0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals((-1), int1);
  }

  @Test
  public void test073()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNotNull(categoryAxis0);
      
      combinedDomainCategoryPlot0.setDomainAxis(categoryAxis0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test
  public void test074()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      categoryPlot0.drawDomainGridlines(graphics2D0, rectangle2D0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertNotNull(categoryPlot0);
      
      RectangleEdge rectangleEdge0 = categoryPlot0.getDomainAxisEdge();
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(axisSpace0);
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      LegendItemCollection legendItemCollection0 = combinedRangeCategoryPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test078()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      boolean boolean0 = combinedRangeCategoryPlot0.getDrawSharedDomainAxis();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getDomainGridlinePaint();
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertNotNull(color0);
  }

  @Test
  public void test080()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainCategoryPlot0);
      
      combinedDomainCategoryPlot0.clearAnnotations();
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test081()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeGridlinePaint();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertNotNull(color0);
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = true;
      combinedDomainCategoryPlot0.setDrawSharedDomainAxis(boolean0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
  }

  @Test
  public void test083()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      CategoryItemRenderer categoryItemRenderer0 = combinedDomainCategoryPlot0.getRenderer();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(categoryItemRenderer0);
      
      combinedDomainCategoryPlot0.setRenderer(int0, categoryItemRenderer0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
  }

  @Test
  public void test084()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation();
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(axisLocation0);
      
      combinedRangeCategoryPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "SansSerif";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 139;
      ValueMarker valueMarker0 = new ValueMarker((double) int0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(139.0, valueMarker0.getValue(), 0.01D);
      assertNotNull(valueMarker0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.removeRangeMarker((Marker) valueMarker0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(139.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals("SansSerif", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertNotNull(categoryPlot0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(lineRenderer3D0);
      
      categoryPlot0.setRenderer((CategoryItemRenderer) lineRenderer3D0);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
  }

  @Test
  public void test087()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      boolean boolean0 = combinedDomainCategoryPlot0.isRangeGridlinesVisible();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test088()  throws Throwable  {
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainCategoryPlot0.getRangeGridlineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = rectangle2D_Double0.equals((Object) arrayList0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(waterfallBarRenderer0);
      
      combinedRangeCategoryPlot0.setRenderer((CategoryItemRenderer) waterfallBarRenderer0, boolean0);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("[]", arrayList0.toString());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test
  public void test090()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      int int0 = combinedRangeCategoryPlot0.getRangeAxisCount();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1, int0);
      
      String string0 = combinedRangeCategoryPlot0.getPlotType();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals("Category Plot", string0);
      assertNotNull(string0);
      
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) line2D_Double0.x2, (double) int0);
      assertEquals("Category Plot", categoryTextAnnotation0.getText());
      assertEquals(1.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(categoryTextAnnotation0);
      
      combinedRangeCategoryPlot0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals("Category Plot", categoryTextAnnotation0.getText());
      assertEquals(1.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      List list0 = combinedRangeCategoryPlot0.getAnnotations();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(list0);
  }

  @Test
  public void test092()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 1288;
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(valueAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeCategoryPlot0.getRangeMarkers(layer0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(collection0);
  }

  @Test
  public void test093()  throws Throwable  {
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainCategoryPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainCategoryPlot0.getAxisOffset();
      assertNull(categoryAxis0.getLabel());
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getRangeCrosshairPaint();
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(color0);
  }

  @Test
  public void test095()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainCategoryPlot0.getDatasetRenderingOrder();
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNotNull(datasetRenderingOrder0);
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeCategoryPlot0.getDomainMarkers(layer0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test097()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 0;
      combinedRangeCategoryPlot0.setRangeCrosshairValue((double) int0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
  }

  @Test
  public void test098()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      List list0 = combinedRangeCategoryPlot0.getCategories();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNull(list0);
  }

  @Test
  public void test099()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      boolean boolean0 = categoryPlot0.isRangeZoomable();
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      categoryPlot0.addDomainMarker(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) logAxis0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertNotNull(clusteredXYBarRenderer0);
      
      LegendItemCollection legendItemCollection0 = clusteredXYBarRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertNotNull(legendItemCollection0);
      
      combinedDomainCategoryPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(categoryPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      AxisSpace axisSpace0 = categoryPlot0.calculateAxisSpace(graphics2D0, rectangle2D0);
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, axisSpace0.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace0.getTop(), 0.01D);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01D);
      assertEquals(0.0, axisSpace0.getRight(), 0.01D);
      assertNotNull(axisSpace0);
  }

  @Test
  public void test102()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNotNull(combinedDomainCategoryPlot0);
      
      double double0 = combinedDomainCategoryPlot0.getRangeCrosshairValue();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainCategoryPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertNotNull(combinedRangeCategoryPlot0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      int int0 = 0;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(cyclicXYItemRenderer0);
      
      Color color0 = (Color)cyclicXYItemRenderer0.getItemOutlinePaint(int0, int0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedXYAreaRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)stackedXYAreaRenderer0.getBaseStroke();
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) line2D_Double0.y2, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedRangeCategoryPlot0.removeRangeMarker(int0, (Marker) categoryMarker0, layer0);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertNotNull(categoryPlot0);
      
      double double0 = categoryPlot0.getAnchorValue();
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = combinedDomainCategoryPlot0.getDomainAxisCount();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, int0);
  }
}
