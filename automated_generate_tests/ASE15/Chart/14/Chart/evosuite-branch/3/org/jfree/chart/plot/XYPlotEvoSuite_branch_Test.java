/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:46:58 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.GridBagLayout;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.swing.Box;
import javax.swing.JColorChooser;
import javax.swing.JDesktopPane;
import javax.swing.JMenu;
import javax.swing.JTextArea;




import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.SubCategoryAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.AxisChangeListener;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.PlumNeedle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.DefaultPolarItemRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Hour;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;


public class XYPlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[16];
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultXYItemRenderer0);
      
      xYItemRendererArray0[0] = (XYItemRenderer) defaultXYItemRenderer0;
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisible());
      assertEquals(2, xYItemRendererArray0[0].getPassCount());
      assertEquals(false, xYItemRendererArray0[0].getBaseItemLabelsVisible());
      assertEquals(true, xYItemRendererArray0[0].getBaseCreateEntities());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisibleInLegend());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYItemRendererArray0[0]);
      
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotNull(combinedDomainXYPlot1);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test
  public void test001()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) int0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      combinedDomainXYPlot0.setDataset(int0, (XYDataset) simpleHistogramDataset0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotNull(combinedDomainXYPlot1);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test
  public void test002()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      LogAxis logAxis0 = new LogAxis();
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNotNull(logAxis0);
      
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNull(valueAxisArray0[0].getLabel());
      assertEquals(true, valueAxisArray0[0].isAutoTickUnitSelection());
      assertEquals(false, valueAxisArray0[0].isVerticalTickLabels());
      assertEquals(0.0, valueAxisArray0[0].getLabelAngle(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isTickMarksVisible());
      assertEquals(true, valueAxisArray0[0].isTickLabelsVisible());
      assertEquals(0.05, valueAxisArray0[0].getUpperMargin(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isAutoRange());
      assertEquals(false, valueAxisArray0[0].isPositiveArrowVisible());
      assertEquals(2.0F, valueAxisArray0[0].getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxisArray0[0].getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[0].getFixedAutoRange(), 0.01D);
      assertNull(valueAxisArray0[0].getLabelToolTip());
      assertEquals(0.0, valueAxisArray0[0].getFixedDimension(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getLowerMargin(), 0.01D);
      assertEquals(1.0, valueAxisArray0[0].getUpperBound(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isNegativeArrowVisible());
      assertEquals(0.0, valueAxisArray0[0].getLowerBound(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isAxisLineVisible());
      assertNull(valueAxisArray0[0].getLabelURL());
      assertEquals(1.0E-8, valueAxisArray0[0].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isVisible());
      assertEquals(false, valueAxisArray0[0].isInverted());
      assertNotNull(valueAxisArray0[0]);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = new CombinedDomainXYPlot(valueAxisArray0[0]);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      
      logAxis0.removeChangeListener((AxisChangeListener) combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNull(logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertFalse(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test
  public void test003()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test004()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      int int0 = 0;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      combinedRangeXYPlot0.zoomRangeAxes((double) int0, plotRenderingInfo0, (Point2D) point2D_Double0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 234;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(jFreeChart0);
      
      boolean boolean0 = false;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, int0, int0, int0, int0, int0, int0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(plotRenderingInfo0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertEquals(234.0, point2D_Double0.x, 0.01D);
      assertEquals(234.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      boolean boolean1 = true;
      combinedDomainXYPlot0.zoomDomainAxes(double0, plotRenderingInfo0, (Point2D) point2D_Double0, boolean1);
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(234.0, point2D_Double0.x, 0.01D);
      assertEquals(234.0, point2D_Double0.y, 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 234;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertNotNull(jFreeChart0);
      
      boolean boolean0 = false;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, int0, int0, int0, int0, int0, int0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertNotNull(plotRenderingInfo0);
      
      Point2D.Double point2D_Double0 = new Point2D.Double((double) int0, (double) int0);
      assertEquals(234.0, point2D_Double0.x, 0.01D);
      assertEquals(234.0, point2D_Double0.y, 0.01D);
      assertNotNull(point2D_Double0);
      
      combinedDomainXYPlot0.zoomDomainAxes(double0, plotRenderingInfo0, (Point2D) point2D_Double0, boolean0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(234, chartPanel0.getMaximumDrawWidth());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(234, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(234, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(234.0, point2D_Double0.x, 0.01D);
      assertEquals(234.0, point2D_Double0.y, 0.01D);
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2958465;
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("Combined_Domain_XYPlot", string0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(2958465.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2958465.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(2958465.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2958465.0, intervalMarker0.getEndValue(), 0.01D);
      assertFalse(boolean0);
      
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("Combined_Domain_XYPlot", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) dateAxis0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("Combined_Domain_XYPlot", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedRangeCategoryPlot0.getFixedRangeAxisSpace();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("Combined_Domain_XYPlot", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(axisSpace0);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("Combined_Domain_XYPlot", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(2958465.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(2958465.0, intervalMarker0.getEndValue(), 0.01D);
  }

  @Test
  public void test008()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNotNull(xYPlot0);
      
      AxisSpace axisSpace0 = null;
      boolean boolean0 = false;
      xYPlot0.setFixedDomainAxisSpace(axisSpace0, boolean0);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test009()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      Color color0 = (Color)PolarPlot.DEFAULT_GRIDLINE_PAINT;
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNotNull(color0);
      
      xYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
  }

  @Test
  public void test010()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2();
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      int int0 = (-1504);
      BasicStroke basicStroke0 = (BasicStroke)stackedXYAreaRenderer2_0.getItemOutlineStroke(int0, int0);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test011()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertNotNull(jDesktopPane0);
      
      int int0 = (-1);
      Rectangle rectangle0 = jDesktopPane0.getBounds();
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      boolean boolean0 = rectangle0.contains(int0, rectangle0.x);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertFalse(boolean0);
      
      xYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test012()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      boolean boolean0 = true;
      xYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2726;
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((double) int0, (double) int0, (double) int0, (double) int0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertNotNull(xYBoxAnnotation0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test015()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      Color color0 = Color.WHITE;
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      xYPlot0.setDomainCrosshairPaint((Paint) color0);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
  }

  @Test
  public void test016()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainGridlineStroke();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      xYPlot0.setDomainCrosshairStroke((Stroke) basicStroke0);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test017()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      int int0 = combinedDomainXYPlot0.getBackgroundImageAlignment();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, int0);
      
      combinedDomainXYPlot0.setDomainCrosshairValue((double) int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test018()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test019()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test020()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test021()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[21];
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(numberAxis0);
      
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, valueAxisArray0[0].getFixedAutoRange(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isVisible());
      assertEquals(0.0F, valueAxisArray0[0].getTickMarkInsideLength(), 0.01F);
      assertNull(valueAxisArray0[0].getLabelToolTip());
      assertEquals(true, valueAxisArray0[0].isTickMarksVisible());
      assertEquals(false, valueAxisArray0[0].isVerticalTickLabels());
      assertEquals(false, valueAxisArray0[0].isNegativeArrowVisible());
      assertEquals(0.0, valueAxisArray0[0].getLabelAngle(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getLowerMargin(), 0.01D);
      assertEquals(1.05, valueAxisArray0[0].getUpperBound(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isAutoTickUnitSelection());
      assertEquals(0.0, valueAxisArray0[0].getLowerBound(), 0.01D);
      assertNull(valueAxisArray0[0].getLabelURL());
      assertEquals(true, valueAxisArray0[0].isAxisLineVisible());
      assertEquals(0.05, valueAxisArray0[0].getUpperMargin(), 0.01D);
      assertEquals(2.0F, valueAxisArray0[0].getTickMarkOutsideLength(), 0.01F);
      assertNull(valueAxisArray0[0].getLabel());
      assertEquals(true, valueAxisArray0[0].isAutoRange());
      assertEquals(0.0, valueAxisArray0[0].getFixedDimension(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isPositiveArrowVisible());
      assertEquals(false, valueAxisArray0[0].isInverted());
      assertEquals(1.0E-8, valueAxisArray0[0].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isTickLabelsVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(valueAxisArray0[0]);
      
      xYPlot0.setParent((Plot) combinedDomainXYPlot0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test022()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      int int0 = (-1675);
      ValueAxis[] valueAxisArray0 = new ValueAxis[21];
      String string0 = null;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, string0);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals((-1675.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      valueAxisArray0[1] = (ValueAxis) cyclicNumberAxis0;
      assertEquals(true, valueAxisArray0[1].isAxisLineVisible());
      assertEquals(false, valueAxisArray0[1].isVerticalTickLabels());
      assertEquals(0.0, valueAxisArray0[1].getLowerBound(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isVisible());
      assertEquals(0.0, valueAxisArray0[1].getFixedDimension(), 0.01D);
      assertEquals(0.0, valueAxisArray0[1].getFixedAutoRange(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isInverted());
      assertEquals(1.0E-8, valueAxisArray0[1].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, valueAxisArray0[1].getTickMarkInsideLength(), 0.01F);
      assertEquals(false, valueAxisArray0[1].isPositiveArrowVisible());
      assertEquals(true, valueAxisArray0[1].isTickMarksVisible());
      assertEquals(true, valueAxisArray0[1].isAutoRange());
      assertEquals(2.0F, valueAxisArray0[1].getTickMarkOutsideLength(), 0.01F);
      assertNull(valueAxisArray0[1].getLabel());
      assertEquals(1.0, valueAxisArray0[1].getUpperBound(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isTickLabelsVisible());
      assertEquals(true, valueAxisArray0[1].isAutoTickUnitSelection());
      assertEquals(0.0, valueAxisArray0[1].getLabelAngle(), 0.01D);
      assertNull(valueAxisArray0[1].getLabelToolTip());
      assertEquals(0.05, valueAxisArray0[1].getUpperMargin(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isNegativeArrowVisible());
      assertNull(valueAxisArray0[1].getLabelURL());
      assertEquals(0.05, valueAxisArray0[1].getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals((-1675.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNotNull(valueAxisArray0[1]);
      
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
  }

  @Test
  public void test023()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      int int0 = 4;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      xYPlot0.handleClick(int0, int0, plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
  }

  @Test
  public void test024()  throws Throwable  {
      Graphics2D graphics2D0 = null;
      String string0 = null;
      JMenu jMenu0 = new JMenu(string0);
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.getVisibleRect();
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertNotNull(windItemRenderer0);
      
      Stroke stroke0 = windItemRenderer0.getSeriesStroke(rectangle0.height);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNull(stroke0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isAutoRange());
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isAutoRange());
      assertNotNull(combinedDomainXYPlot0);
      
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(xYSplineAndShapeRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYSplineAndShapeRenderer0.getBaseToolTipGenerator();
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertNull(xYToolTipGenerator0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) rectangle0.width);
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getSeriesURLGenerator(rectangle0.height);
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNull(xYURLGenerator0);
      
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(rectangle0.x, xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepAreaRenderer0.getPlotArea());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(xYStepAreaRenderer0);
      
      Color color0 = (Color)xYStepAreaRenderer0.getBaseFillPaint();
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepAreaRenderer0.getPlotArea());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(color0);
      
      SubCategoryAxis subCategoryAxis0 = new SubCategoryAxis(string0);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNotNull(subCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) subCategoryAxis0);
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0.05, subCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, subCategoryAxis0.isTickMarksVisible());
      assertEquals(true, subCategoryAxis0.isVisible());
      assertNull(subCategoryAxis0.getLabelURL());
      assertNull(subCategoryAxis0.getLabel());
      assertEquals(0.0, subCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, subCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.0F, subCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(subCategoryAxis0.getLabelToolTip());
      assertEquals(0.0F, subCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.2, subCategoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, subCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, subCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(1, subCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(true, subCategoryAxis0.isAxisLineVisible());
      assertEquals(2.0F, subCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, subCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.drawRangeCrosshair(graphics2D0, rectangle0, plotOrientation0, rectangle0.height, numberAxis0, stroke0, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = 4022.375804450552;
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle rectangle0 = rectangle2D_Float0.getBounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle0);
      
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertNotNull(windItemRenderer0);
      
      Stroke stroke0 = windItemRenderer0.getSeriesStroke(rectangle0.height);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNull(stroke0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertNotNull(numberAxis0);
      
      boolean boolean0 = false;
      xYPlot0.setRangeAxis(rectangle0.x, (ValueAxis) numberAxis0, boolean0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer();
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(xYSplineAndShapeRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYSplineAndShapeRenderer0.getBaseToolTipGenerator();
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertNull(xYToolTipGenerator0);
      
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer((double) rectangle0.width);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getSeriesURLGenerator(rectangle0.height);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNull(xYURLGenerator0);
      
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer(rectangle0.y, xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(xYStepAreaRenderer0);
      
      Color color0 = (Color)xYStepAreaRenderer0.getBaseFillPaint();
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(color0);
      
      xYPlot0.drawHorizontalLine(graphics2D0, rectangle0, double0, stroke0, color0);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(5, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
  }

  @Test
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNull(collection0);
  }

  @Test
  public void test027()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test028()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = null;
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(collection0);
  }

  @Test
  public void test030()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      Graphics2D graphics2D0 = null;
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertNotNull(jDesktopPane0);
      
      Rectangle rectangle0 = jDesktopPane0.getBounds();
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      xYPlot0.drawDomainMarkers(graphics2D0, rectangle0, rectangle0.width, layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, jDesktopPane0.isShowing());
      assertEquals(false, jDesktopPane0.isForegroundSet());
      assertEquals(false, jDesktopPane0.isLightweight());
      assertEquals(false, jDesktopPane0.isCursorSet());
      assertEquals(false, jDesktopPane0.isFontSet());
      assertEquals(true, jDesktopPane0.isEnabled());
      assertEquals(0, jDesktopPane0.getComponentCount());
      assertEquals(false, jDesktopPane0.isDisplayable());
      assertEquals(0, jDesktopPane0.countComponents());
      assertEquals(false, jDesktopPane0.isPreferredSizeSet());
      assertEquals(false, jDesktopPane0.isMinimumSizeSet());
      assertEquals(true, jDesktopPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jDesktopPane0.isFocusTraversalPolicySet());
      assertEquals(false, jDesktopPane0.getIgnoreRepaint());
      assertEquals(true, jDesktopPane0.isVisible());
      assertEquals(true, jDesktopPane0.isFocusCycleRoot());
      assertEquals(false, jDesktopPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jDesktopPane0.isValid());
      assertEquals(false, jDesktopPane0.isMaximumSizeSet());
      assertEquals(true, jDesktopPane0.isBackgroundSet());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test031()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2 out of bounds.
         //
      }
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(valueAxis0);
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = (-2768);
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -2768 out of bounds.
         //
      }
  }

  @Test
  public void test034()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      String string0 = "dy!";
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(windItemRenderer0);
      
      int int0 = 12;
      Font font0 = windItemRenderer0.getSeriesItemLabelFont(int0);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(font0);
      
      boolean boolean0 = false;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) xYPlot0, boolean0);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(jFreeChart0);
      
      int int1 = 3;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int1, int0);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(12, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(12, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(bufferedImage0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      String[] stringArray0 = new String[1];
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(windItemRenderer0);
      
      int int0 = 12;
      Font font0 = windItemRenderer0.getSeriesItemLabelFont(int0);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(font0);
      
      boolean boolean0 = false;
      JFreeChart jFreeChart0 = new JFreeChart(stringArray0[0], font0, (Plot) xYPlot0, boolean0);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertNotNull(jFreeChart0);
      
      // Undeclared exception!
      try {
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      XYAnnotation xYAnnotation0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.addAnnotation(xYAnnotation0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(int0, (Marker) categoryMarker0, layer0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 234;
      combinedDomainXYPlot0.clearRangeMarkers(int0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test039()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      double double0 = 0.0;
      int int0 = (-2389);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = false;
      xYPlot0.addRangeMarker(int0, (Marker) categoryMarker0, layer0, boolean0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearRangeMarkers();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test041()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getOutlineStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(basicStroke0);
      
      Color color0 = Color.WHITE;
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      int int0 = 59;
      ValueMarker valueMarker0 = new ValueMarker(line2D_Double0.x2, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(valueMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker(int0, (Marker) valueMarker0, layer0);
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      int int0 = (-2389);
      int int1 = xYPlot0.getRangeAxisCount();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0);
      assertNull(valueMarker0.getLabel());
      assertEquals((-2389.0), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      assertFalse(int0 == int1);
      
      xYPlot0.addDomainMarker(int1, (Marker) valueMarker0, layer0);
      assertNull(valueMarker0.getLabel());
      assertEquals((-2389.0), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test043()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      Marker marker0 = null;
      // Undeclared exception!
      try {
        xYPlot0.addDomainMarker(marker0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      int int0 = (-1);
      xYPlot0.clearDomainMarkers(int0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test045()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainMarkers();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test046()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      Color color0 = Color.WHITE;
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      int int0 = 59;
      // Undeclared exception!
      try {
        xYPlot0.setQuadrantPaint(int0, (Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (59) should be in the range 0 to 3.
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getDomainAxisCount();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, int0);
      
      Paint paint0 = combinedRangeXYPlot0.getQuadrantPaint(int0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(paint0);
  }

  @Test
  public void test048()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 46;
      // Undeclared exception!
      try {
        Paint paint0 = combinedRangeXYPlot0.getQuadrantPaint(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (46) should be in the range 0 to 3.
         //
      }
  }

  @Test
  public void test049() {}
//   @Test
//   public void test049()  throws Throwable  {
//       int int0 = (-3809);
//       String string0 = "Invalid 'day' argument.";
//       Second second0 = new Second();
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertNotNull(second0);
//       
//       PeriodAxis periodAxis0 = new PeriodAxis(string0, (RegularTimePeriod) second0, (RegularTimePeriod) second0);
//       assertEquals(false, periodAxis0.isNegativeArrowVisible());
//       assertEquals(false, periodAxis0.isMinorTickMarksVisible());
//       assertEquals(true, periodAxis0.isAutoRange());
//       assertEquals(true, periodAxis0.isTickLabelsVisible());
//       assertEquals("Invalid 'day' argument.", periodAxis0.getLabel());
//       assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
//       assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
//       assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
//       assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
//       assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
//       assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
//       assertNull(periodAxis0.getLabelToolTip());
//       assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
//       assertEquals(true, periodAxis0.isAxisLineVisible());
//       assertEquals(false, periodAxis0.isVerticalTickLabels());
//       assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
//       assertNull(periodAxis0.getLabelURL());
//       assertEquals(true, periodAxis0.isAutoTickUnitSelection());
//       assertEquals(false, periodAxis0.isInverted());
//       assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
//       assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
//       assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
//       assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
//       assertEquals(true, periodAxis0.isTickMarksVisible());
//       assertEquals(false, periodAxis0.isPositiveArrowVisible());
//       assertEquals(true, periodAxis0.isVisible());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertNotNull(periodAxis0);
//       
//       CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) periodAxis0);
//       assertEquals(false, periodAxis0.isNegativeArrowVisible());
//       assertEquals(false, periodAxis0.isMinorTickMarksVisible());
//       assertEquals(true, periodAxis0.isAutoRange());
//       assertEquals(true, periodAxis0.isTickLabelsVisible());
//       assertEquals("Invalid 'day' argument.", periodAxis0.getLabel());
//       assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
//       assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
//       assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
//       assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
//       assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
//       assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
//       assertNull(periodAxis0.getLabelToolTip());
//       assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
//       assertEquals(true, periodAxis0.isAxisLineVisible());
//       assertEquals(false, periodAxis0.isVerticalTickLabels());
//       assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
//       assertNull(periodAxis0.getLabelURL());
//       assertEquals(true, periodAxis0.isAutoTickUnitSelection());
//       assertEquals(false, periodAxis0.isInverted());
//       assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
//       assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
//       assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
//       assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
//       assertEquals(true, periodAxis0.isTickMarksVisible());
//       assertEquals(false, periodAxis0.isPositiveArrowVisible());
//       assertEquals(true, periodAxis0.isVisible());
//       assertEquals(3601570881L, second0.getSerialIndex());
//       assertEquals(21, second0.getSecond());
//       assertEquals(1392409281999L, second0.getLastMillisecond());
//       assertEquals(1392409281000L, second0.getFirstMillisecond());
//       assertEquals(false, combinedDomainXYPlot0.isSubplot());
//       assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
//       assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
//       assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
//       assertNull(combinedDomainXYPlot0.getNoDataMessage());
//       assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
//       assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
//       assertEquals(1, combinedDomainXYPlot0.getWeight());
//       assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
//       assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
//       assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
//       assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
//       assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
//       assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
//       assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
//       assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
//       assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
//       assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
//       assertNotNull(combinedDomainXYPlot0);
//       
//       // Undeclared exception!
//       try {
//         Paint paint0 = combinedDomainXYPlot0.getQuadrantPaint(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The index value (-3809) should be in the range 0 to 3.
//          //
//       }
//   }

  @Test
  public void test050()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      Point2D point2D0 = null;
      // Undeclared exception!
      try {
        combinedRangeXYPlot0.setQuadrantOrigin(point2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'origin' argument.
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      int int0 = (-2389);
      int int1 = xYPlot0.getRangeAxisCount();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      assertEquals("java.awt.GridBagLayout", gridBagLayout0.toString());
      assertNotNull(gridBagLayout0);
      
      Point point0 = gridBagLayout0.location(int0, int1);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.GridBagLayout", gridBagLayout0.toString());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      xYPlot0.setQuadrantOrigin((Point2D) point0);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.GridBagLayout", gridBagLayout0.toString());
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      Color color0 = (Color)cyclicNumberAxis0.getTickLabelPaint();
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeZeroBaselinePaint((Paint) color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
  }

  @Test
  public void test053()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      PlumNeedle plumNeedle0 = new PlumNeedle();
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01D);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01D);
      assertNotNull(plumNeedle0);
      
      BasicStroke basicStroke0 = (BasicStroke)plumNeedle0.getOutlineStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01D);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01D);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5, plumNeedle0.getRotateX(), 0.01D);
      assertEquals(5, plumNeedle0.getSize());
      assertEquals(0.5, plumNeedle0.getRotateY(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      Color color0 = (Color)stackedBarRenderer3D0.lookupSeriesFillPaint(int0);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test055()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = 0;
      BasicStroke basicStroke0 = (BasicStroke)statisticalLineAndShapeRenderer0.getItemOutlineStroke(int0, int0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test056()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(layeredBarRenderer0);
      
      int int0 = 22;
      BasicStroke basicStroke0 = (BasicStroke)layeredBarRenderer0.lookupSeriesOutlineStroke(int0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test059()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 182;
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test061()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      int int0 = 375;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(waterfallBarRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)waterfallBarRenderer0.lookupSeriesStroke(int0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(basicStroke0);
      
      xYPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test062()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainGridlinesVisible(boolean0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test063()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(boolean0);
      
      combinedDomainXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test
  public void test064()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) rectangle2D_Double0.width);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertNull(xYItemRenderer0);
  }

  @Test
  public void test065()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(seriesRenderingOrder0);
      
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(datasetRenderingOrder0);
      
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      XYDataset xYDataset0 = combinedDomainXYPlot0.getDataset();
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(xYDataset0);
      
      int int0 = combinedDomainXYPlot0.indexOf(xYDataset0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0, int0);
  }

  @Test
  public void test068()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      int int0 = combinedRangeXYPlot0.indexOf((XYDataset) defaultWindDataset0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals((-1), int0);
  }

  @Test
  public void test069()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      int int1 = 2357;
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) int0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      assertFalse(int0 == int1);
      
      combinedDomainXYPlot0.setDataset(int1, (XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test070()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 1178;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test071()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2958465;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test072()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearRangeAxes();
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
  }

  @Test
  public void test073()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test074()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      String string0 = null;
      JMenu jMenu0 = new JMenu(string0);
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.isEnabled());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.getVisibleRect();
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertNotNull(numberAxis0);
      
      boolean boolean0 = false;
      xYPlot0.setRangeAxis(rectangle0.x, (ValueAxis) numberAxis0, boolean0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(false, jMenu0.isValid());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      xYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertNotNull(numberAxis0);
      
      xYPlot0.setRangeAxis((ValueAxis) numberAxis0);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 234;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearDomainAxes();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
  }

  @Test
  public void test078()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test079()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      LogAxis logAxis0 = new LogAxis();
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNotNull(logAxis0);
      
      valueAxisArray0[0] = (ValueAxis) logAxis0;
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0, valueAxisArray0[0].getUpperBound(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getUpperMargin(), 0.01D);
      assertEquals(0.0F, valueAxisArray0[0].getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[0].getFixedDimension(), 0.01D);
      assertEquals(0.0, valueAxisArray0[0].getLabelAngle(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isTickLabelsVisible());
      assertEquals(true, valueAxisArray0[0].isAxisLineVisible());
      assertEquals(0.0, valueAxisArray0[0].getLowerBound(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isNegativeArrowVisible());
      assertEquals(true, valueAxisArray0[0].isAutoTickUnitSelection());
      assertNull(valueAxisArray0[0].getLabelToolTip());
      assertEquals(1.0E-8, valueAxisArray0[0].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isVisible());
      assertEquals(true, valueAxisArray0[0].isTickMarksVisible());
      assertEquals(false, valueAxisArray0[0].isInverted());
      assertEquals(false, valueAxisArray0[0].isPositiveArrowVisible());
      assertEquals(false, valueAxisArray0[0].isVerticalTickLabels());
      assertNull(valueAxisArray0[0].getLabelURL());
      assertEquals(true, valueAxisArray0[0].isAutoRange());
      assertNull(valueAxisArray0[0].getLabel());
      assertEquals(0.0, valueAxisArray0[0].getFixedAutoRange(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getLowerMargin(), 0.01D);
      assertEquals(2.0F, valueAxisArray0[0].getTickMarkOutsideLength(), 0.01F);
      assertNotNull(valueAxisArray0[0]);
      
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test
  public void test080()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNotNull(piePlot3D0);
      
      RectangleInsets rectangleInsets0 = piePlot3D0.getInsets();
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test084()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      int int0 = 375;
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = layer0.equals((Object) xYPlot0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      JTextArea jTextArea0 = new JTextArea();
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertNotNull(jTextArea0);
      
      int int1 = 2;
      MouseEvent mouseEvent0 = new MouseEvent((Component) jTextArea0, int0, (long) int0, int0, int1, int1, int1, boolean0, int1);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(375, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(375L, mouseEvent0.getWhen());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(55, mouseEvent0.getModifiers());
      assertEquals(true, mouseEvent0.isAltGraphDown());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(mouseEvent0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Point point0 = jTextArea0.getPopupLocation(mouseEvent0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(375, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(375L, mouseEvent0.getWhen());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(55, mouseEvent0.getModifiers());
      assertEquals(true, mouseEvent0.isAltGraphDown());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(point0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      xYPlot0.zoomRangeAxes((double) int0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals(false, mouseEvent0.isAltDown());
      assertEquals(2, mouseEvent0.getClickCount());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(375, mouseEvent0.getID());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(2, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(375L, mouseEvent0.getWhen());
      assertEquals(2, mouseEvent0.getX());
      assertEquals(2, mouseEvent0.getY());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(55, mouseEvent0.getModifiers());
      assertEquals(true, mouseEvent0.isAltGraphDown());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test085()  throws Throwable  {
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(highLowRenderer0);
      
      boolean boolean0 = highLowRenderer0.getAutoPopulateSeriesOutlinePaint();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(boolean0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainZeroBaselineVisible(boolean0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test086()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNotNull(xYPlot0);
      
      RectangleInsets rectangleInsets0 = xYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test087()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test088()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setRangeAxis(int0, (ValueAxis) numberAxis0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
  }

  @Test
  public void test089()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test090()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearAnnotations();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test091()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = xYPlot0.isRangeZoomable();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(color0);
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(rendererChangeEvent0);
      
      combinedRangeXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test095()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertNotNull(xYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(250000.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(2735.109993827995, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(494529.780012344, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      
      double double0 = 0.0;
      boolean boolean0 = rectangle2D_Double0.intersects(double0, double0, double0, double0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(250000.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(2735.109993827995, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(494529.780012344, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertFalse(boolean0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      //  // Unstable assertion: assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      //  // Unstable assertion: assertNotNull(axisLocation0);
      
      xYPlot0.setRangeAxisLocation(axisLocation0, boolean0);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(250000.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(2735.109993827995, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(494529.780012344, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-244529.780012344), rectangle2D_Double0.x, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertNotNull(jColorChooser0);
      
      Rectangle rectangle0 = jColorChooser0.bounds();
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(rectangle0.height);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getWeight();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(1, int0);
  }

  @Test
  public void test097()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 182;
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_RIGHT;
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test098()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      List list0 = xYPlot0.getAnnotations();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(list0);
  }

  @Test
  public void test099()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      boolean boolean0 = xYPlot0.isDomainZoomable();
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test100()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getFixedLegendItems();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(legendItemCollection0);
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 0.0;
      DefaultPolarItemRenderer defaultPolarItemRenderer0 = new DefaultPolarItemRenderer();
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertNotNull(defaultPolarItemRenderer0);
      
      Color color0 = (Color)defaultPolarItemRenderer0.getBaseFillPaint();
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_STROKE;
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(valueMarker0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertEquals(true, defaultPolarItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultPolarItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultPolarItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultPolarItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultPolarItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultPolarItemRenderer0.getBaseSeriesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertFalse(boolean0);
  }

  @Test
  public void test102()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxis(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNotNull(xYPlot0);
      
      double double0 = 0.0;
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getOutlineStroke();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      Color color0 = Color.WHITE;
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertNotNull(color0);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertNotNull(valueMarker0);
      
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) valueMarker0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(-1, color0.getRGB());
      assertFalse(boolean0);
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2958465;
      String string0 = combinedDomainXYPlot0.getPlotType();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(string0);
      assertEquals("Combined_Domain_XYPlot", string0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, string0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2958465.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals("Combined_Domain_XYPlot", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2958465.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals("Combined_Domain_XYPlot", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2958465.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals("Combined_Domain_XYPlot", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2958465.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals("Combined_Domain_XYPlot", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test105() {}
//   @Test
//   public void test105()  throws Throwable  {
//       YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
//       assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
//       assertNotNull(yIntervalSeriesCollection0);
//       
//       CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
//       assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, combinedRangeCategoryPlot0.getWeight());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
//       assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
//       assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
//       assertNotNull(combinedRangeCategoryPlot0);
//       
//       int int0 = 1448;
//       NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxisForDataset(int0);
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
//       assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, combinedRangeCategoryPlot0.getWeight());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
//       assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
//       assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
//       assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
//       assertEquals(false, numberAxis0.isInverted());
//       assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
//       assertEquals(false, numberAxis0.isVerticalTickLabels());
//       assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
//       assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
//       assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
//       assertEquals(true, numberAxis0.isAxisLineVisible());
//       assertEquals(true, numberAxis0.getAutoRangeStickyZero());
//       assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
//       assertNull(numberAxis0.getLabel());
//       assertEquals(false, numberAxis0.isPositiveArrowVisible());
//       assertEquals(false, numberAxis0.isNegativeArrowVisible());
//       assertNull(numberAxis0.getLabelToolTip());
//       assertNull(numberAxis0.getLabelURL());
//       assertEquals(true, numberAxis0.isVisible());
//       assertEquals(true, numberAxis0.isTickMarksVisible());
//       assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
//       assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
//       assertEquals(true, numberAxis0.isTickLabelsVisible());
//       assertEquals(true, numberAxis0.isAutoTickUnitSelection());
//       assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
//       assertEquals(true, numberAxis0.isAutoRange());
//       assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
//       assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
//       assertNotNull(numberAxis0);
//       
//       VectorRenderer vectorRenderer0 = new VectorRenderer();
//       assertEquals(true, vectorRenderer0.getBaseCreateEntities());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(1, vectorRenderer0.getPassCount());
//       assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
//       assertNotNull(vectorRenderer0);
//       
//       XYPlot xYPlot0 = new XYPlot((XYDataset) yIntervalSeriesCollection0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0, (XYItemRenderer) vectorRenderer0);
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
//       assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, combinedRangeCategoryPlot0.getWeight());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
//       assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
//       assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
//       assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
//       assertEquals(false, numberAxis0.isInverted());
//       assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
//       assertEquals(false, numberAxis0.isVerticalTickLabels());
//       assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
//       assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
//       assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
//       assertEquals(true, numberAxis0.isAxisLineVisible());
//       assertEquals(true, numberAxis0.getAutoRangeStickyZero());
//       assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
//       assertNull(numberAxis0.getLabel());
//       assertEquals(false, numberAxis0.isPositiveArrowVisible());
//       assertEquals(false, numberAxis0.isNegativeArrowVisible());
//       assertNull(numberAxis0.getLabelToolTip());
//       assertNull(numberAxis0.getLabelURL());
//       assertEquals(true, numberAxis0.isVisible());
//       assertEquals(true, numberAxis0.isTickMarksVisible());
//       assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
//       assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
//       assertEquals(true, numberAxis0.isTickLabelsVisible());
//       assertEquals(true, numberAxis0.isAutoTickUnitSelection());
//       assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
//       assertEquals(true, numberAxis0.isAutoRange());
//       assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
//       assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
//       assertNull(xYPlot0.getNoDataMessage());
//       assertEquals(15, xYPlot0.getBackgroundImageAlignment());
//       assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
//       assertEquals(true, xYPlot0.isRangeGridlinesVisible());
//       assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
//       assertEquals(1, xYPlot0.getWeight());
//       assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, xYPlot0.isDomainGridlinesVisible());
//       assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, xYPlot0.isDomainZoomable());
//       assertEquals(false, xYPlot0.isRangeCrosshairVisible());
//       assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, xYPlot0.isSubplot());
//       assertEquals(false, xYPlot0.isDomainCrosshairVisible());
//       assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
//       assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
//       assertEquals(true, xYPlot0.isRangeZoomable());
//       assertEquals(true, xYPlot0.isOutlineVisible());
//       assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
//       assertEquals(true, vectorRenderer0.getBaseCreateEntities());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(1, vectorRenderer0.getPassCount());
//       assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
//       assertNotNull(xYPlot0);
//       
//       String string0 = "bC";
//       JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) xYPlot0);
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
//       assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, combinedRangeCategoryPlot0.getWeight());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
//       assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
//       assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
//       assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
//       assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
//       assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
//       assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(1, jFreeChart0.getSubtitleCount());
//       assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
//       assertEquals(false, numberAxis0.isInverted());
//       assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
//       assertEquals(false, numberAxis0.isVerticalTickLabels());
//       assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
//       assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
//       assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
//       assertEquals(true, numberAxis0.isAxisLineVisible());
//       assertEquals(true, numberAxis0.getAutoRangeStickyZero());
//       assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
//       assertNull(numberAxis0.getLabel());
//       assertEquals(false, numberAxis0.isPositiveArrowVisible());
//       assertEquals(false, numberAxis0.isNegativeArrowVisible());
//       assertNull(numberAxis0.getLabelToolTip());
//       assertNull(numberAxis0.getLabelURL());
//       assertEquals(true, numberAxis0.isVisible());
//       assertEquals(true, numberAxis0.isTickMarksVisible());
//       assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
//       assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
//       assertEquals(true, numberAxis0.isTickLabelsVisible());
//       assertEquals(true, numberAxis0.isAutoTickUnitSelection());
//       assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
//       assertEquals(true, numberAxis0.isAutoRange());
//       assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
//       assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
//       assertNull(xYPlot0.getNoDataMessage());
//       assertEquals(15, xYPlot0.getBackgroundImageAlignment());
//       assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
//       assertEquals(true, xYPlot0.isRangeGridlinesVisible());
//       assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
//       assertEquals(1, xYPlot0.getWeight());
//       assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, xYPlot0.isDomainGridlinesVisible());
//       assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
//       assertEquals(true, xYPlot0.isDomainZoomable());
//       assertEquals(false, xYPlot0.isRangeCrosshairVisible());
//       assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, xYPlot0.isSubplot());
//       assertEquals(false, xYPlot0.isDomainCrosshairVisible());
//       assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
//       assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
//       assertEquals(true, xYPlot0.isRangeZoomable());
//       assertEquals(true, xYPlot0.isOutlineVisible());
//       assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
//       assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
//       assertEquals(true, vectorRenderer0.getBaseCreateEntities());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
//       assertEquals(1, vectorRenderer0.getPassCount());
//       assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
//       assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
//       assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
//       assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
//       assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
//       assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test
  public void test106()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test107()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 1582.9077414;
      int int0 = 182;
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(int0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(1582.9077414, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2374.3616121, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2374.3616121, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(3165.8154828, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3165.8154828, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.width, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.height, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.y, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Graphics2D graphics2D0 = null;
      combinedRangeXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D_Double0);
      assertEquals(1582.9077414, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2374.3616121, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2374.3616121, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(3165.8154828, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3165.8154828, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1582.9077414, rectangle2D_Double0.width, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.height, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.y, 0.01D);
      assertEquals(1582.9077414, rectangle2D_Double0.x, 0.01D);
  }

  @Test
  public void test108()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertNotNull(color0);
  }

  @Test
  public void test109()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertNotNull(jColorChooser0);
      
      Rectangle rectangle0 = jColorChooser0.bounds();
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertNotNull(layeredBarRenderer0);
      
      Color color0 = (Color)layeredBarRenderer0.getItemFillPaint(rectangle0.x, rectangle0.x);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainTickBandPaint((Paint) color0);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test110()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertNotNull(jColorChooser0);
      
      Rectangle rectangle0 = jColorChooser0.bounds();
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(rectangle0.y);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test111()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 182;
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxis(int0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.add((XYPlot) combinedDomainXYPlot0, int0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(182, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test112()  throws Throwable  {
      double double0 = 4022.375804450552;
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = null;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Point2D point2D0 = null;
      xYPlot0.zoomDomainAxes(double0, plotRenderingInfo0, point2D0);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
  }

  @Test
  public void test113()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedDomainAxisSpace();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(axisSpace0);
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test114()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0, int0);
      
      combinedRangeXYPlot0.setRangeCrosshairValue((double) int0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
  }

  @Test
  public void test115()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 234;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 234 out of bounds.
         //
      }
  }

  @Test
  public void test116()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
      
      combinedDomainXYPlot0.setDomainCrosshairValue(double0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test117()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation((Shape) rectangle2D_Double0);
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
      assertNotNull(xYShapeAnnotation0);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0);
      assertNull(xYShapeAnnotation0.getURL());
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test119()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = layer0.equals((Object) xYPlot0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertFalse(boolean0);
      
      xYPlot0.setRangeZeroBaselineVisible(boolean0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNotNull(cyclicNumberAxis0);
      
      Color color0 = (Color)cyclicNumberAxis0.getTickLabelPaint();
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeTickBandPaint((Paint) color0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(2.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
  }

  @Test
  public void test121()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test122()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      SegmentedTimeline segmentedTimeline0 = SegmentedTimeline.newMondayThroughFridayTimeline();
      assertEquals(5, segmentedTimeline0.getSegmentsIncluded());
      assertEquals(172800000L, segmentedTimeline0.getSegmentsExcludedSize());
      assertEquals(7, segmentedTimeline0.getGroupSegmentCount());
      assertEquals(false, segmentedTimeline0.getAdjustForDaylightSaving());
      assertEquals(604800000L, segmentedTimeline0.getSegmentsGroupSize());
      assertEquals(2, segmentedTimeline0.getSegmentsExcluded());
      assertEquals((-2208988800000L), segmentedTimeline0.getStartTime());
      assertEquals(432000000L, segmentedTimeline0.getSegmentsIncludedSize());
      assertEquals(86400000L, segmentedTimeline0.getSegmentSize());
      assertEquals((-2208988800000L), segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
      assertNotNull(segmentedTimeline0);
      
      Date date0 = segmentedTimeline0.getDate(segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
      assertEquals(5, segmentedTimeline0.getSegmentsIncluded());
      assertEquals(172800000L, segmentedTimeline0.getSegmentsExcludedSize());
      assertEquals(7, segmentedTimeline0.getGroupSegmentCount());
      assertEquals(false, segmentedTimeline0.getAdjustForDaylightSaving());
      assertEquals(604800000L, segmentedTimeline0.getSegmentsGroupSize());
      assertEquals(2, segmentedTimeline0.getSegmentsExcluded());
      assertEquals((-2208988800000L), segmentedTimeline0.getStartTime());
      assertEquals(432000000L, segmentedTimeline0.getSegmentsIncludedSize());
      assertEquals(86400000L, segmentedTimeline0.getSegmentSize());
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
      assertEquals((-2208988800000L), segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
      assertNotNull(date0);
      
      Hour hour0 = new Hour(date0, segmentedTimeline0.DEFAULT_TIME_ZONE);
      assertEquals(5, segmentedTimeline0.getSegmentsIncluded());
      assertEquals(172800000L, segmentedTimeline0.getSegmentsExcludedSize());
      assertEquals(7, segmentedTimeline0.getGroupSegmentCount());
      assertEquals(false, segmentedTimeline0.getAdjustForDaylightSaving());
      assertEquals(604800000L, segmentedTimeline0.getSegmentsGroupSize());
      assertEquals(2, segmentedTimeline0.getSegmentsExcluded());
      assertEquals((-2208988800000L), segmentedTimeline0.getStartTime());
      assertEquals(432000000L, segmentedTimeline0.getSegmentsIncludedSize());
      assertEquals(86400000L, segmentedTimeline0.getSegmentSize());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(48L, hour0.getSerialIndex());
      assertEquals((-2208988800000L), hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, hour0.getMonth());
      assertEquals(1900, hour0.getYear());
      assertEquals((-2208985200001L), hour0.getLastMillisecond());
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
      assertEquals((-2208988800000L), segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
      assertNotNull(hour0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) hour0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(5, segmentedTimeline0.getSegmentsIncluded());
      assertEquals(172800000L, segmentedTimeline0.getSegmentsExcludedSize());
      assertEquals(7, segmentedTimeline0.getGroupSegmentCount());
      assertEquals(false, segmentedTimeline0.getAdjustForDaylightSaving());
      assertEquals(604800000L, segmentedTimeline0.getSegmentsGroupSize());
      assertEquals(2, segmentedTimeline0.getSegmentsExcluded());
      assertEquals((-2208988800000L), segmentedTimeline0.getStartTime());
      assertEquals(432000000L, segmentedTimeline0.getSegmentsIncludedSize());
      assertEquals(86400000L, segmentedTimeline0.getSegmentSize());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(48L, hour0.getSerialIndex());
      assertEquals((-2208988800000L), hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, hour0.getMonth());
      assertEquals(1900, hour0.getYear());
      assertEquals((-2208985200001L), hour0.getLastMillisecond());
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
      assertEquals((-2208988800000L), segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
      assertNotNull(categoryMarker0);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(5, segmentedTimeline0.getSegmentsIncluded());
      assertEquals(172800000L, segmentedTimeline0.getSegmentsExcludedSize());
      assertEquals(7, segmentedTimeline0.getGroupSegmentCount());
      assertEquals(false, segmentedTimeline0.getAdjustForDaylightSaving());
      assertEquals(604800000L, segmentedTimeline0.getSegmentsGroupSize());
      assertEquals(2, segmentedTimeline0.getSegmentsExcluded());
      assertEquals((-2208988800000L), segmentedTimeline0.getStartTime());
      assertEquals(432000000L, segmentedTimeline0.getSegmentsIncludedSize());
      assertEquals(86400000L, segmentedTimeline0.getSegmentSize());
      assertEquals(1, hour0.getDayOfMonth());
      assertEquals(48L, hour0.getSerialIndex());
      assertEquals((-2208988800000L), hour0.getFirstMillisecond());
      assertEquals(0, hour0.getHour());
      assertEquals(1, hour0.getMonth());
      assertEquals(1900, hour0.getYear());
      assertEquals((-2208985200001L), hour0.getLastMillisecond());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Mon Jan 01 00:00:00 GMT 1900", date0.toString());
      assertEquals((-2208988800000L), segmentedTimeline0.FIRST_MONDAY_AFTER_1900);
  }

  @Test
  public void test123()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 22;
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(categoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getDomainAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(axisLocation0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(false, categoryAxis0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test
  public void test124()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      XYDataset xYDataset0 = null;
      combinedRangeXYPlot0.setDataset(xYDataset0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
  }

  @Test
  public void test125()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      int int0 = (-1675);
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(int0);
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertNotNull(standardXYItemRenderer0);
      
      int int1 = xYPlot0.getIndexOf((XYItemRenderer) standardXYItemRenderer0);
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, standardXYItemRenderer0.getPlotImages());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test126()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test127()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      String string0 = "dy!";
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertNotNull(windItemRenderer0);
      
      int int0 = 12;
      Font font0 = windItemRenderer0.getSeriesItemLabelFont(int0);
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertNull(font0);
      
      boolean boolean0 = false;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) xYPlot0, boolean0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(jFreeChart0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(12, bufferedImage0.getHeight());
      assertEquals(12, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(12, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(12, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(12, bufferedImage0.getHeight());
      assertEquals(12, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(12, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(12, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.paintState);
      assertNotNull(sunGraphics2D0);
      
      Box box0 = Box.createVerticalBox();
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isCursorSet());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertNotNull(box0);
      
      Rectangle rectangle0 = box0.bounds();
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isCursorSet());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisSpace axisSpace0 = combinedDomainCategoryPlot0.calculateAxisSpace(sunGraphics2D0, rectangle0);
      assertEquals(4.0, axisSpace0.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace0.getRight(), 0.01D);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01D);
      assertEquals(0.0, axisSpace0.getTop(), 0.01D);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(12, bufferedImage0.getHeight());
      assertEquals(12, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(12, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(12, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isCursorSet());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.paintState);
      assertNotNull(axisSpace0);
      
      xYPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(4.0, axisSpace0.getBottom(), 0.01D);
      assertEquals(0.0, axisSpace0.getRight(), 0.01D);
      assertEquals(0.0, axisSpace0.getLeft(), 0.01D);
      assertEquals(0.0, axisSpace0.getTop(), 0.01D);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(12, bufferedImage0.getHeight());
      assertEquals(12, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(12, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(12, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(0, box0.countComponents());
      assertEquals(false, box0.isPreferredSizeSet());
      assertEquals(false, box0.isFocusTraversalPolicyProvider());
      assertEquals(true, box0.getFocusTraversalKeysEnabled());
      assertEquals(false, box0.getIgnoreRepaint());
      assertEquals(false, box0.isForegroundSet());
      assertEquals(true, box0.isVisible());
      assertEquals(false, box0.isMaximumSizeSet());
      assertEquals(false, box0.isLightweight());
      assertEquals(false, box0.isValid());
      assertEquals(false, box0.isFontSet());
      assertEquals(false, box0.isBackgroundSet());
      assertEquals(false, box0.isFocusTraversalPolicySet());
      assertEquals(false, box0.isFocusCycleRoot());
      assertEquals(false, box0.isCursorSet());
      assertEquals(true, box0.isEnabled());
      assertEquals(false, box0.isMinimumSizeSet());
      assertEquals(false, box0.isDisplayable());
      assertEquals(false, box0.isShowing());
      assertEquals(0, box0.getComponentCount());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals((-1), sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.paintState);
  }

  @Test
  public void test128()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(xYItemRenderer0);
      
      combinedRangeXYPlot0.setRenderer(xYItemRenderer0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
  }

  @Test
  public void test129()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeGridlineStroke();
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test130()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      Color color0 = (Color)xYPlot0.getDomainCrosshairPaint();
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }

  @Test
  public void test131()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(axisSpace0);
  }

  @Test
  public void test132()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(xYPlot0);
      
      String string0 = xYPlot0.getPlotType();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNotNull(string0);
      assertEquals("XY Plot", string0);
  }
}
