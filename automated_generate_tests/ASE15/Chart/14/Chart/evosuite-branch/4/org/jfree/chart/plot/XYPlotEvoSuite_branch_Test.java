/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:09:48 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JFormattedTextField;
import javax.swing.JPopupMenu;
import javax.swing.text.InternationalFormatter;




import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYBoxAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.needle.LongNeedle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;
import sun.util.calendar.ZoneInfo;


public class XYPlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertNotNull(defaultXYItemRenderer0);
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      
      xYItemRendererArray0[0] = (XYItemRenderer) defaultXYItemRenderer0;
      assertNotNull(xYItemRendererArray0[0]);
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisible());
      assertEquals(true, xYItemRendererArray0[0].getBaseCreateEntities());
      assertEquals(false, xYItemRendererArray0[0].getBaseItemLabelsVisible());
      assertEquals(2, xYItemRendererArray0[0].getPassCount());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisibleInLegend());
      
      xYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      boolean boolean0 = xYPlot0.equals((Object) combinedRangeXYPlot0);
      assertFalse(boolean0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test001()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      
      int int0 = xYPlot0.getWeight();
      assertEquals(1, int0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      xYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      boolean boolean0 = xYPlot0.equals((Object) combinedRangeXYPlot0);
      assertFalse(boolean0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test002()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      xYPlot0.setDataset((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      
      int int0 = 2556;
      String string0 = "+e";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) xYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      
      // Undeclared exception!
      try {
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(0, int0);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test004()  throws Throwable  {
      double double0 = 1456.58302;
      Point2D.Double point2D_Double0 = new Point2D.Double(double0, double0);
      assertNotNull(point2D_Double0);
      assertEquals(1456.58302, point2D_Double0.x, 0.01D);
      assertEquals(1456.58302, point2D_Double0.y, 0.01D);
      
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      xYPlot0.zoomRangeAxes(point2D_Double0.y, point2D_Double0.y, plotRenderingInfo0, (Point2D) point2D_Double0);
      assertEquals(1456.58302, point2D_Double0.x, 0.01D);
      assertEquals(1456.58302, point2D_Double0.y, 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      float float0 = combinedDomainXYPlot0.getForegroundAlpha();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      
      Point point0 = jPopupMenu_Separator0.location();
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.zoomRangeAxes((double) float0, plotRenderingInfo0, (Point2D) point0, boolean0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
  }

  @Test
  public void test006()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      float float0 = combinedDomainXYPlot0.getForegroundAlpha();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = 1044;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      
      Point point0 = jPopupMenu_Separator0.location();
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) float0, (double) float0, (double) float0, (double) int0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1044.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(523.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1045.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      combinedDomainXYPlot0.zoomDomainAxes(rectangle2D_Double0.width, rectangle2D_Double0.width, plotRenderingInfo0, (Point2D) point0);
      assertEquals(1.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(1.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1044.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(523.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(1.5, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(1045.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      
      combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test009()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test010()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test012()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      Marker marker0 = null;
      boolean boolean0 = combinedDomainXYPlot0.removeDomainMarker(marker0);
      assertFalse(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertNotNull(color0);
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      
      combinedDomainXYPlot0.setDomainCrosshairPaint((Paint) color0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
  }

  @Test
  public void test014()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getDomainGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) basicStroke0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test015()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      
      boolean boolean0 = xYPlot0.equals((Object) combinedRangeXYPlot0);
      assertFalse(boolean0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      
      xYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = false;
      xYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test018()  throws Throwable  {
      double double0 = 676.87;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      
      XYDataset xYDataset0 = combinedRangeXYPlot0.getDataset();
      assertNull(xYDataset0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      
      XYPlot xYPlot0 = new XYPlot(xYDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, (XYItemRenderer) cyclicXYItemRenderer0);
      assertNotNull(xYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
  }

  @Test
  public void test019()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      
      int int0 = 36;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertNotNull(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(36.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(36.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(36.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      
      xYPlot0.setRangeAxis(int0, (ValueAxis) cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(36.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(36.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals((-35.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(36.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test020()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      String string0 = "BZh3G";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals("BZh3G", logAxis0.getLabel());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      
      valueAxisArray0[1] = (ValueAxis) logAxis0;
      assertNotNull(valueAxisArray0[1]);
      assertEquals(false, valueAxisArray0[1].isPositiveArrowVisible());
      assertEquals(false, valueAxisArray0[1].isNegativeArrowVisible());
      assertEquals(0.0, valueAxisArray0[1].getFixedDimension(), 0.01D);
      assertEquals(0.05, valueAxisArray0[1].getUpperMargin(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isInverted());
      assertEquals(1.0E-8, valueAxisArray0[1].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, valueAxisArray0[1].getTickMarkInsideLength(), 0.01F);
      assertEquals("BZh3G", valueAxisArray0[1].getLabel());
      assertEquals(true, valueAxisArray0[1].isVisible());
      assertEquals(true, valueAxisArray0[1].isAxisLineVisible());
      assertNull(valueAxisArray0[1].getLabelToolTip());
      assertEquals(0.05, valueAxisArray0[1].getLowerMargin(), 0.01D);
      assertEquals(2.0F, valueAxisArray0[1].getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[1].isTickMarksVisible());
      assertEquals(0.0, valueAxisArray0[1].getFixedAutoRange(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isAutoTickUnitSelection());
      assertEquals(false, valueAxisArray0[1].isVerticalTickLabels());
      assertNull(valueAxisArray0[1].getLabelURL());
      assertEquals(0.0, valueAxisArray0[1].getLabelAngle(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isAutoRange());
      assertEquals(0.0, valueAxisArray0[1].getLowerBound(), 0.01D);
      assertEquals(1.0, valueAxisArray0[1].getUpperBound(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isTickLabelsVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals("BZh3G", logAxis0.getLabel());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelURL());
      
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test021()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      
      int int0 = 1107;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      xYPlot0.handleClick(int0, int0, plotRenderingInfo0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
  }

  @Test
  public void test022()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test023()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      int int0 = 953;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 953 out of bounds.
         //
      }
  }

  @Test
  public void test024()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertNotNull(defaultXYItemRenderer0);
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      
      int int0 = combinedDomainXYPlot0.getIndexOf((XYItemRenderer) defaultXYItemRenderer0);
      assertEquals((-1), int0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index -1 out of bounds.
         //
      }
  }

  @Test
  public void test025()  throws Throwable  {
      double double0 = 676.87;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      
      int int0 = (-2204);
      Line2D.Double line2D_Double0 = new Line2D.Double((double) int0, (double) int0, double0, double0);
      assertNotNull(line2D_Double0);
      assertEquals((-2204.0), line2D_Double0.x1, 0.01D);
      assertEquals(676.87, line2D_Double0.x2, 0.01D);
      assertEquals((-2204.0), line2D_Double0.y1, 0.01D);
      assertEquals(676.87, line2D_Double0.y2, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      
      String string0 = rectangle2D_Double0.toString();
      assertNotNull(string0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", string0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation(string0, line2D_Double0.x1, rectangle2D_Double0.y, (double) int0);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals((-2204.0), line2D_Double0.x1, 0.01D);
      assertEquals(676.87, line2D_Double0.x2, 0.01D);
      assertEquals((-2204.0), line2D_Double0.y1, 0.01D);
      assertEquals(676.87, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01D);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals((-2204.0), xYPointerAnnotation0.getX(), 0.01D);
      assertEquals((-2204.0), xYPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01D);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", xYPointerAnnotation0.getText());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01D);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYPointerAnnotation0, boolean0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals((-2204.0), line2D_Double0.x1, 0.01D);
      assertEquals(676.87, line2D_Double0.x2, 0.01D);
      assertEquals((-2204.0), line2D_Double0.y1, 0.01D);
      assertEquals(676.87, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01D);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals((-2204.0), xYPointerAnnotation0.getX(), 0.01D);
      assertEquals((-2204.0), xYPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01D);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", xYPointerAnnotation0.getText());
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test026()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) xYSeriesCollection0);
      assertEquals((-1), int0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation((double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(xYLineAnnotation0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0, boolean0);
      assertNull(xYLineAnnotation0.getToolTipText());
      assertNull(xYLineAnnotation0.getURL());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
  }

  @Test
  public void test027()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      
      int int0 = 2956;
      InternationalFormatter internationalFormatter0 = new InternationalFormatter();
      assertNotNull(internationalFormatter0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) internationalFormatter0);
      assertNotNull(jFormattedTextField0);
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.isEnabled());
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jFormattedTextField0.getCaretColor();
      assertNotNull(printColorUIResource0);
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      
      int int1 = 1;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      
      BasicStroke basicStroke0 = (BasicStroke)levelRenderer0.lookupSeriesOutlineStroke(int0);
      assertNotNull(basicStroke0);
      assertFalse(int0 == int1);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int1, rectangle2D_Double0.height, (Paint) printColorUIResource0, (Stroke) basicStroke0, (Paint) printColorUIResource0, (Stroke) basicStroke0, (float) int1);
      assertNotNull(intervalMarker0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(int0, (Marker) intervalMarker0, layer0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertFalse(boolean0);
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertNull(intervalMarker0.getLabel());
      assertEquals(1.0F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
  }

  @Test
  public void test028()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      int int0 = 0;
      combinedDomainXYPlot0.clearRangeMarkers(int0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test029()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      
      int int0 = 2039;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      
      Color color0 = (Color)statisticalLineAndShapeRenderer0.getItemFillPaint(int0, int0);
      assertNotNull(color0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      
      LongNeedle longNeedle0 = new LongNeedle();
      assertNotNull(longNeedle0);
      assertEquals(0.5, longNeedle0.getRotateX(), 0.01D);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01D);
      assertEquals(5, longNeedle0.getSize());
      
      BasicStroke basicStroke0 = (BasicStroke)longNeedle0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5, longNeedle0.getRotateX(), 0.01D);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01D);
      assertEquals(5, longNeedle0.getSize());
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertNull(valueMarker0.getLabel());
      assertEquals(2039.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5, longNeedle0.getRotateX(), 0.01D);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01D);
      assertEquals(5, longNeedle0.getSize());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.addRangeMarker(int0, (Marker) valueMarker0, layer0, boolean0);
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertNull(valueMarker0.getLabel());
      assertEquals(2039.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.5, longNeedle0.getRotateX(), 0.01D);
      assertEquals(0.8, longNeedle0.getRotateY(), 0.01D);
      assertEquals(5, longNeedle0.getSize());
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-2204);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNotNull(categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = null;
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      
      int int0 = 2;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNotNull(categoryMarker0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
  }

  @Test
  public void test032()  throws Throwable  {
      NumberAxis numberAxis0 = new NumberAxis();
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      
      int int0 = 2956;
      InternationalFormatter internationalFormatter0 = new InternationalFormatter();
      assertNotNull(internationalFormatter0);
      
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatter) internationalFormatter0);
      assertNotNull(jFormattedTextField0);
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jFormattedTextField0.getCaretColor();
      assertNotNull(printColorUIResource0);
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      
      BasicStroke basicStroke0 = (BasicStroke)levelRenderer0.lookupSeriesOutlineStroke(int0);
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      ValueMarker valueMarker0 = new ValueMarker(rectangle2D_Double0.height, (Paint) printColorUIResource0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      
      combinedDomainXYPlot0.addDomainMarker((Marker) valueMarker0, layer0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(false, jFormattedTextField0.isFocusCycleRoot());
      assertEquals(true, jFormattedTextField0.isEnabled());
      assertEquals(true, jFormattedTextField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jFormattedTextField0.isPreferredSizeSet());
      assertEquals(true, jFormattedTextField0.isForegroundSet());
      assertEquals(0, jFormattedTextField0.countComponents());
      assertEquals(false, jFormattedTextField0.isLightweight());
      assertEquals(false, jFormattedTextField0.isDisplayable());
      assertEquals(false, jFormattedTextField0.getIgnoreRepaint());
      assertEquals(true, jFormattedTextField0.isBackgroundSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jFormattedTextField0.isMaximumSizeSet());
      assertEquals(true, jFormattedTextField0.isFontSet());
      assertEquals(false, jFormattedTextField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jFormattedTextField0.isValid());
      assertEquals(false, jFormattedTextField0.isMinimumSizeSet());
      assertEquals(true, jFormattedTextField0.isCursorSet());
      assertEquals(true, jFormattedTextField0.isVisible());
      assertEquals(false, jFormattedTextField0.isShowing());
      assertEquals(0, jFormattedTextField0.getComponentCount());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      double double0 = 0.0;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) double0);
      assertNotNull(categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      
      int int0 = 0;
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker(int0, (Marker) categoryMarker0, layer0);
      assertFalse(boolean0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      Marker marker0 = null;
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.addDomainMarker(int0, marker0, layer0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
      }
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      int int0 = 2;
      combinedDomainXYPlot0.clearDomainMarkers(int0);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test
  public void test035()  throws Throwable  {
      double double0 = 0.0;
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      xYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      xYPlot0.clearDomainMarkers();
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
  }

  @Test
  public void test036()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      
      int int0 = 0;
      Paint paint0 = xYPlot0.getQuadrantPaint(int0);
      assertNull(paint0);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test037()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      
      int int0 = 1107;
      // Undeclared exception!
      try {
        Paint paint0 = xYPlot0.getQuadrantPaint(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1107) should be in the range 0 to 3.
         //
      }
  }

  @Test
  public void test038()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      
      Color color0 = (Color)boxAndWhiskerRenderer0.getBaseItemLabelPaint();
      assertNotNull(color0);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      combinedRangeXYPlot0.setRangeZeroBaselinePaint((Paint) color0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
  }

  @Test
  public void test039()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertNotNull(xYDifferenceRenderer0);
      assertEquals(false, xYDifferenceRenderer0.getShapesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDifferenceRenderer0.getBaseCreateEntities());
      
      BasicStroke basicStroke0 = (BasicStroke)xYDifferenceRenderer0.getBaseOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, xYDifferenceRenderer0.getShapesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDifferenceRenderer0.getBaseCreateEntities());
      
      xYPlot0.setRangeZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYDifferenceRenderer0.getShapesVisible());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDifferenceRenderer0.getBaseCreateEntities());
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      DeviationRenderer deviationRenderer0 = new DeviationRenderer();
      assertNotNull(deviationRenderer0);
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      
      int int0 = 1676;
      Color color0 = (Color)deviationRenderer0.lookupSeriesOutlinePaint(int0);
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
  }

  @Test
  public void test041()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test042()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      Color color0 = Color.GRAY;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      combinedDomainXYPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
  }

  @Test
  public void test043()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      combinedDomainXYPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test045()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) xYSeriesCollection0);
      assertEquals((-1), int0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertNotNull(windItemRenderer0);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      
      Color color0 = (Color)windItemRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      
      combinedDomainXYPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test046()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      
      combinedRangeXYPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test048()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test049()  throws Throwable  {
      TimeSeries timeSeries0 = null;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(timeSeriesCollection0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      //  // Unstable assertion: assertNotNull(combinedDomainXYPlot0);
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxis();
      //  // Unstable assertion: assertNotNull(numberAxis0);
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertNull(numberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, numberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(numberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(numberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRenderer();
      //  // Unstable assertion: assertNull(xYItemRenderer0);
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) timeSeriesCollection0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis0, xYItemRenderer0);
      //  // Unstable assertion: assertNotNull(xYPlot0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertNull(numberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, numberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, numberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertNull(numberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, numberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(numberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals("", zoneInfo0.getID());
  }

  @Test
  public void test050()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
      
      combinedDomainXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test
  public void test051()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      
      DatasetRenderingOrder datasetRenderingOrder0 = xYPlot0.getDatasetRenderingOrder();
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
  }

  @Test
  public void test052()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 319;
      xYPlot0.setDataset(int0, (XYDataset) defaultTableXYDataset0);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
  }

  @Test
  public void test053()  throws Throwable  {
      double double0 = 2462.117;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      int int0 = 0;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.contains(double0, double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      combinedDomainXYPlot0.setRangeAxisLocation(int0, axisLocation0, boolean0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) dateAxis0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
  }

  @Test
  public void test057()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      
      ValueAxis valueAxis0 = xYPlot0.getRangeAxis();
      assertNull(valueAxis0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      
      xYPlot0.setRangeAxis(valueAxis0);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test058()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      int int0 = 255;
      int int1 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int1);
      assertNotNull(numberAxis0);
      assertFalse(int1 == int0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertFalse(int1 == int0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getRangeAxisLocation(int1);
      assertNotNull(axisLocation0);
      assertFalse(int1 == int0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setDomainAxisLocation(int0, axisLocation0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test059()  throws Throwable  {
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxisArray0[1]);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      int int0 = 0;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      int int0 = (-321);
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test061()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      int int0 = 2039;
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
  }

  @Test
  public void test062()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      xYPlot0.clearDomainAxes();
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test064()  throws Throwable  {
      int int0 = 0;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeZeroBaselinePaint();
      assertNotNull(color0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (double) int0, (double) int0);
      assertNotNull(colorBlock0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      
      RectangleInsets rectangleInsets0 = colorBlock0.getPadding();
      assertNotNull(rectangleInsets0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
  }

  @Test
  public void test065()  throws Throwable  {
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxisArray0[1]);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      String string0 = "))\")P@6CzG]kK~";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) defaultXYZDataset0, (ValueAxis) numberAxis0, (ValueAxis) logAxis0, (XYItemRenderer) xYStepRenderer0);
      assertNotNull(xYPlot0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
  }

  @Test
  public void test067()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainZeroBaselineVisible();
      assertFalse(boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
  }

  @Test
  public void test069()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test
  public void test070()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(boolean0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
  }

  @Test
  public void test071()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      ValueAxis[] valueAxisArray0 = new ValueAxis[9];
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxisArray0[1]);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      double double0 = combinedDomainXYPlot0.getDomainCrosshairValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test073()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      
      combinedRangeXYPlot0.setRangeAxis(int0, (ValueAxis) numberAxis0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabel());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainZeroBaselineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      combinedDomainXYPlot0.clearAnnotations();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      int int0 = 0;
      combinedDomainXYPlot0.setWeight(int0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertNotNull(color0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
  }

  @Test
  public void test078()  throws Throwable  {
      double double0 = 676.87;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainGridlinePaint();
      assertNotNull(color0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test
  public void test079()  throws Throwable  {
      double double0 = 676.87;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge();
      assertNotNull(rectangleEdge0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
  }

  @Test
  public void test080()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      double double0 = combinedRangeXYPlot0.getRangeCrosshairValue();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test081()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) defaultXYZDataset0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test083()  throws Throwable  {
      XYDataset xYDataset0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxis();
      assertNull(valueAxis0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer();
      assertNotNull(xYStepRenderer0);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      
      XYPlot xYPlot0 = new XYPlot(xYDataset0, valueAxis0, valueAxis0, (XYItemRenderer) xYStepRenderer0);
      assertNotNull(xYPlot0);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      
      int int0 = 0;
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      
      boolean boolean0 = true;
      xYPlot0.setRangeAxisLocation(axisLocation0, boolean0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test084()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      
      ValueAxis valueAxis0 = null;
      xYPlot0.setDomainAxis(valueAxis0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
  }

  @Test
  public void test085()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      Paint paint0 = combinedRangeXYPlot0.getDomainTickBandPaint();
      assertNull(paint0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test086()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeGridlinesVisible();
      assertTrue(boolean0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test087()  throws Throwable  {
      double double0 = 676.87;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertNull(axisSpace0);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(676.87, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-675.87), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(676.87, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test088()  throws Throwable  {
      int int0 = (-2204);
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      
      combinedRangeXYPlot0.setDomainCrosshairValue((double) int0);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals((-2204.0), combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
  }

  @Test
  public void test089()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      
      List list0 = combinedRangeXYPlot0.getAnnotations();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test090()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      float float0 = (-252.72F);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((double) float0, (double) float0, (double) float0, (double) float0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-252.72000122070312), rectangle2D_Double0.height, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.width, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.y, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.x, 0.01D);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxY(), 0.01D);
      
      int int0 = rectangle2D_Double0.outcode(rectangle2D_Double0.y, rectangle2D_Double0.height);
      assertEquals((-252.72000122070312), rectangle2D_Double0.height, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.width, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.y, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.x, 0.01D);
      assertEquals(15, int0);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxY(), 0.01D);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedDomainXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      boolean boolean0 = true;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, int0, int0, int0, int0, int0, int0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertNotNull(chartPanel0);
      assertEquals((-252.72000122070312), rectangle2D_Double0.height, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.width, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.y, 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.x, 0.01D);
      assertEquals(true, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(15, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(15, chartPanel0.getMinimumDrawWidth());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(15, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(15, chartPanel0.getMaximumDrawWidth());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-379.0800018310547), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-252.72000122070312), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-505.44000244140625), rectangle2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      float float0 = combinedDomainXYPlot0.getForegroundAlpha();
      assertEquals(1.0F, float0, 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      
      Point point0 = jPopupMenu_Separator0.location();
      assertNotNull(point0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.zoomDomainAxes((double) float0, plotRenderingInfo0, (Point2D) point0, boolean0);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
  }

  @Test
  public void test092()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      LegendItemCollection legendItemCollection0 = combinedDomainXYPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      
      int int0 = 0;
      String string0 = "\"";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals("\"", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      
      combinedDomainXYPlot0.setDomainAxis(int0, (ValueAxis) logarithmicAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals("\"", logarithmicAxis0.getLabel());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      LegendItemCollection legendItemCollection0 = null;
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      
      double double0 = 0.0;
      int int0 = 0;
      XYBoxAnnotation xYBoxAnnotation0 = new XYBoxAnnotation((double) int0, (double) int0, double0, double0);
      assertNotNull(xYBoxAnnotation0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYBoxAnnotation0);
      assertFalse(boolean0);
      assertNull(xYBoxAnnotation0.getToolTipText());
      assertNull(xYBoxAnnotation0.getURL());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      int int0 = combinedDomainXYPlot0.getDomainAxisCount();
      assertEquals(1, int0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_OUTLINE_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_TICK_MARK_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean0 = xYPlot0.removeDomainMarker((Marker) valueMarker0, layer0);
      assertFalse(boolean0);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
  }

  @Test
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      AxisLocation axisLocation0 = AxisLocation.TOP_OR_LEFT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test100()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      
      int int0 = 2556;
      String string0 = "+e";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) xYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      // Undeclared exception!
      try {
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      assertFalse(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      DateAxis dateAxis0 = new DateAxis();
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeCrosshairPaint();
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertNull(dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      assertNotNull(seriesRenderingOrder0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertNotNull(basicStroke0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test
  public void test105()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot1.isSubplot());
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
  }

  @Test
  public void test106()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      
      int int0 = 1044;
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo((EntityCollection) standardEntityCollection0);
      assertNotNull(chartRenderingInfo0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertNotNull(jPopupMenu_Separator0);
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      
      Point point0 = jPopupMenu_Separator0.location();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      
      combinedDomainXYPlot0.zoomDomainAxes((double) int0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
  }

  @Test
  public void test109()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 71;
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
  }

  @Test
  public void test110()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      
      int int0 = 71;
      combinedRangeXYPlot0.setRangeCrosshairValue((double) int0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(71.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test111()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      double double0 = 0.0;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) valueMarker0, layer0);
      assertFalse(boolean0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      float float0 = valueMarker0.getAlpha();
      assertEquals(0.8F, float0, 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      combinedDomainXYPlot0.setDomainCrosshairValue((double) float0, boolean0);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.800000011920929, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test112()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertNull(collection0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test113()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeZeroBaselineVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test114()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      Color color0 = Color.GRAY;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      
      combinedDomainXYPlot0.setRangeTickBandPaint((Paint) color0);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test115()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      int int0 = 0;
      ValueAxis valueAxis0 = xYPlot0.getDomainAxisForDataset(int0);
      assertNull(valueAxis0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = xYPlot0.isDomainCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      AxisLocation axisLocation0 = combinedRangeCategoryPlot0.getDomainAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      
      xYPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test116()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      XYDataset xYDataset0 = null;
      combinedRangeXYPlot0.setDataset(xYDataset0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertTrue(boolean0);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertNull(logAxis0.getLabelToolTip());
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test118()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedRangeAxisSpace();
      assertNull(axisSpace0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      combinedDomainXYPlot0.setFixedDomainAxisSpace(axisSpace0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test119()  throws Throwable  {
      double double0 = 0.0;
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(double0);
      assertNotNull(xYBarRenderer0);
      assertEquals(0.0, xYBarRenderer0.getMargin(), 0.01D);
      assertEquals(1, xYBarRenderer0.getPassCount());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, xYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBarRenderer0.getUseYInterval());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBarRenderer0.isDrawBarOutline());
      
      xYPlot0.setRenderer((XYItemRenderer) xYBarRenderer0);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYBarRenderer0.getMargin(), 0.01D);
      assertEquals(1, xYBarRenderer0.getPassCount());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, xYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, xYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBarRenderer0.getUseYInterval());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBarRenderer0.isDrawBarOutline());
  }

  @Test
  public void test120()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test
  public void test121()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      String string0 = "#<PAxyf_ wARd1E";
      LogAxis logAxis0 = new LogAxis(string0);
      assertNotNull(logAxis0);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      String string1 = rectangle2D_Double0.toString();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", string1);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      int int0 = 2;
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string1);
      assertNotSame(string1, string0);
      assertNotNull(extendedCategoryAxis0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertNotSame(string1, string0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(int0);
      assertNotSame(string1, string0);
      assertNotNull(axisLocation0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      
      combinedDomainXYPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(9, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("#<PAxyf_ wARd1E", logAxis0.getLabel());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", extendedCategoryAxis0.getLabel());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
  }

  @Test
  public void test122()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainCrosshairPaint();
      assertNotNull(color0);
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }
}
