/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:12 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.text.FieldPosition;
import java.text.Format;
import java.util.TimeZone;
import javax.swing.JEditorPane;



import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;
import sun.util.calendar.ZoneInfo;


public class BorderArrangementEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      double double0 = (-2098.9379298519507);
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-2098.9379298519507), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-2098.9379298519507), emptyBlock0.getWidth(), 0.01D);
      
      int int0 = 0;
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertNotNull(fieldPosition0);
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
      assertNull(format_Field0);
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) format_Field0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-2098.9379298519507), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-2098.9379298519507), emptyBlock0.getWidth(), 0.01D);
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertTrue(boolean0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Object object0 = null;
      boolean boolean0 = borderArrangement0.equals(object0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(boolean0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
  }

  @Test
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      borderArrangement0.add((Block) blockContainer0, (Object) evoSuiteFile0);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      double double0 = 2697.6099924208897;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      JEditorPane jEditorPane0 = new JEditorPane();
      assertNotNull(jEditorPane0);
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jEditorPane0.getCaretColor();
      assertNotNull(printColorUIResource0);
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      
      ColorBlock colorBlock0 = new ColorBlock((Paint) printColorUIResource0, rectangle2D_Double0.width, rectangle2D_Double0.y);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertNotNull(colorBlock0);
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) colorBlock0, (Object) rectangleEdge0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(2697.6099924208897, size2D0.height, 0.01D);
      assertEquals(2697.6099924208897, size2D0.width, 0.01D);
      assertNotNull(size2D0);
      assertEquals(2697.6099924208897, size2D0.getHeight(), 0.01D);
      assertEquals(2697.6099924208897, size2D0.getWidth(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      borderArrangement0.add((Block) blockContainer0, (Object) evoSuiteFile0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.width);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 2697.6099924208897;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      JEditorPane jEditorPane0 = new JEditorPane();
      assertNotNull(jEditorPane0);
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jEditorPane0.getCaretColor();
      assertNotNull(printColorUIResource0);
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      
      ColorBlock colorBlock0 = new ColorBlock((Paint) printColorUIResource0, rectangle2D_Double0.width, rectangle2D_Double0.y);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertNotNull(colorBlock0);
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) colorBlock0, (Object) rectangleEdge0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.width);
      assertEquals(2697.6099924208897, size2D0.height, 0.01D);
      assertEquals(2697.6099924208897, size2D0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(2697.6099924208897, size2D0.getHeight(), 0.01D);
      assertEquals(2697.6099924208897, size2D0.getWidth(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = blockContainer0.toContentConstraint(rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      
      borderArrangement0.add((Block) blockContainer0, (Object) evoSuiteFile0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
  }

  @Test
  public void test10()  throws Throwable  {
      double double0 = 2697.6099924208897;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      JEditorPane jEditorPane0 = new JEditorPane();
      assertNotNull(jEditorPane0);
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jEditorPane0.getCaretColor();
      assertNotNull(printColorUIResource0);
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      
      ColorBlock colorBlock0 = new ColorBlock((Paint) printColorUIResource0, rectangle2D_Double0.width, rectangle2D_Double0.y);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertNotNull(colorBlock0);
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) colorBlock0, (Object) rectangleEdge0);
      assertEquals(2697.6099924208897, rectangle2D_Double0.height, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.x, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.y, 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.width, 0.01D);
      assertEquals(true, jEditorPane0.isFocusCycleRoot());
      assertEquals(0, jEditorPane0.countComponents());
      assertEquals(true, jEditorPane0.isFontSet());
      assertEquals(0, jEditorPane0.getComponentCount());
      assertEquals(false, jEditorPane0.isShowing());
      assertEquals(false, jEditorPane0.isMaximumSizeSet());
      assertEquals(true, jEditorPane0.isVisible());
      assertEquals(false, jEditorPane0.isFocusTraversalPolicyProvider());
      assertEquals(true, jEditorPane0.isForegroundSet());
      assertEquals(true, jEditorPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jEditorPane0.isPreferredSizeSet());
      assertEquals(true, jEditorPane0.isFocusTraversalPolicySet());
      assertEquals(false, jEditorPane0.isLightweight());
      assertEquals(false, jEditorPane0.isMinimumSizeSet());
      assertEquals(true, jEditorPane0.isCursorSet());
      assertEquals(false, jEditorPane0.isDisplayable());
      assertEquals(true, jEditorPane0.isEnabled());
      assertEquals(true, jEditorPane0.isBackgroundSet());
      assertEquals(false, jEditorPane0.getIgnoreRepaint());
      assertEquals(false, jEditorPane0.isValid());
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(4046.4149886313344, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(2697.6099924208897, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(5395.2199848417795, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(2697.6099924208897, colorBlock0.getWidth(), 0.01D);
      assertEquals(2697.6099924208897, colorBlock0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getRed());
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertEquals(2697.6099924208897, size2D0.width, 0.01D);
      assertEquals(2697.6099924208897, size2D0.height, 0.01D);
      assertNotNull(size2D0);
      assertEquals(2697.6099924208897, size2D0.getWidth(), 0.01D);
      assertEquals(2697.6099924208897, size2D0.getHeight(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      //  // Unstable assertion: assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      //  // Unstable assertion: assertNotNull(blockContainer0);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      double double0 = 1.0;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      //  // Unstable assertion: assertNotNull(rectangleEdge0);
      //  // Unstable assertion: assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      //  // Unstable assertion: assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("{4", zoneInfo0.getID());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(timeSeriesCollection0);
      //  // Unstable assertion: assertEquals("{4", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = true;
      Range range0 = timeSeriesCollection0.getDomainBounds(boolean0);
      //  // Unstable assertion: assertNull(range0);
      //  // Unstable assertion: assertEquals("{4", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, range0);
      //  // Unstable assertion: assertNotNull(rectangleConstraint0);
      //  // Unstable assertion: assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals("{4", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
       //  fail("Expecting exception: StackOverflowError");
       // Unstable assertion
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      
      boolean boolean0 = false;
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      Range range0 = categoryTableXYDataset0.getDomainBounds(boolean0);
      assertNull(range0);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      double double0 = 0.5;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.contains(rectangle2D_Double0.x, rectangle2D_Double0.width, rectangle2D_Double0.x, double0);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      double double0 = Double.NEGATIVE_INFINITY;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, double0);
      assertNotNull(rectangleConstraint0);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint0.getWidth(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotNull(rectangleConstraint1);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, rectangleConstraint0.getWidth(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      double double0 = 778.2528;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(778.2528, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(778.2528, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(778.2528, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(778.2528, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
