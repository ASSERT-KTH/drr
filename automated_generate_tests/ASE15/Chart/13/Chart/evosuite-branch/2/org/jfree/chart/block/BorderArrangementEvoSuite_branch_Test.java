/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:31 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.text.FieldPosition;
import java.text.Format;
import java.util.TimeZone;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;
import sun.swing.PrintColorUIResource;
import sun.util.calendar.ZoneInfo;


public class BorderArrangementEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      boolean boolean0 = borderArrangement0.equals((Object) rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
  }

  @Test
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertNotNull(defaultTreeCellRenderer0);
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)defaultTreeCellRenderer0.getForeground();
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getRed());
      assertNotNull(printColorUIResource0);
      
      double double0 = 0.0;
      ColorBlock colorBlock0 = new ColorBlock((Paint) printColorUIResource0, double0, double0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getRed());
      assertNotNull(colorBlock0);
      
      Object object0 = null;
      borderArrangement0.add((Block) colorBlock0, object0);
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(51, printColorUIResource0.getGreen());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getRed());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      //  // Unstable assertion: assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, range0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getLength(), 0.01D);
      //  // Unstable assertion: assertNotNull(range0);
      
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      //  // Unstable assertion: assertEquals(59, fieldPosition0.getField());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getEndIndex());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getBeginIndex());
      //  // Unstable assertion: assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      //  // Unstable assertion: assertNotNull(fieldPosition0);
      
      Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
      //  // Unstable assertion: assertEquals(59, fieldPosition0.getField());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getEndIndex());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getBeginIndex());
      //  // Unstable assertion: assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      //  // Unstable assertion: assertNull(format_Field0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) format_Field0);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(59, fieldPosition0.getField());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getEndIndex());
      //  // Unstable assertion: assertEquals(0, fieldPosition0.getBeginIndex());
      //  // Unstable assertion: assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      //  // Unstable assertion: assertEquals(0.0, size2D0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, size2D0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, range0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getLength(), 0.01D);
      //  // Unstable assertion: assertNotNull(size2D0);
      //  // Unstable assertion: assertEquals(0.0, size2D0.width, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      double double0 = 293.17838485828287;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      assertNotNull(emptyBlock0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(range0);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(293.17838485828287, size2D0.getWidth(), 0.01D);
      assertEquals(293.17838485828287, size2D0.getHeight(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(293.17838485828287, size2D0.width, 0.01D);
      assertEquals(293.17838485828287, size2D0.height, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      //  // Unstable assertion: assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(dynamicTimeSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      //  // Unstable assertion: assertEquals(0.0, range0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getLength(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(range0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      //  // Unstable assertion: assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      //  // Unstable assertion: assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      //  // Unstable assertion: assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      //  // Unstable assertion: assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      //  // Unstable assertion: assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      //  // Unstable assertion: assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      //  // Unstable assertion: assertNotSame(rectangleEdge0, rectangleEdge1);
      //  // Unstable assertion: assertNotSame(rectangleEdge1, rectangleEdge0);
      //  // Unstable assertion: assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      //  // Unstable assertion: assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      //  // Unstable assertion: assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      //  // Unstable assertion: assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      //  // Unstable assertion: assertNotSame(rectangleEdge0, rectangleEdge1);
      //  // Unstable assertion: assertNotSame(rectangleEdge1, rectangleEdge0);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      //  // Unstable assertion: assertEquals(0.0, range0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getLength(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      //  // Unstable assertion: assertEquals(58, dynamicTimeSeriesCollection0.getNewestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, blockContainer0.isEmpty());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      //  // Unstable assertion: assertNull(blockContainer0.getID());
      //  // Unstable assertion: assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals("L", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(0.0, size2D0.getWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, size2D0.getHeight(), 0.01D);
      //  // Unstable assertion: assertNotNull(size2D0);
      //  // Unstable assertion: assertEquals(0.0, size2D0.width, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNotNull(fieldPosition0);
      
      Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNull(format_Field0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) format_Field0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, int0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(59.0, size2D0.getWidth(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(59.0, size2D0.width, 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      int int0 = 10;
      BufferedImage bufferedImage0 = new BufferedImage(int0, int0, int0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertNotNull(sunGraphics2D0);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, sunGraphics2D0, rectangle2D_Double0.x);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      double double0 = 293.17838485828287;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      assertNotNull(emptyBlock0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, double0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(293.17838485828287, size2D0.getWidth(), 0.01D);
      assertEquals(293.17838485828287, size2D0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(293.17838485828287, size2D0.height, 0.01D);
      assertEquals(293.17838485828287, size2D0.width, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, int0);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(59.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(59.0, size2D0.width, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNull(format_Field0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) format_Field0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals("java.text.FieldPosition[field=59,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(59, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      int int0 = 10;
      BufferedImage bufferedImage0 = new BufferedImage(int0, int0, int0);
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getType());
      assertNotNull(bufferedImage0);
      
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getType());
      assertNotNull(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, sunGraphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals("sun.java2d.SunGraphics2D[font=java.awt.Font[family=Dialog,name=Dialog,style=plain,size=12],color=java.awt.Color[r=255,g=255,b=255]]", sunGraphics2D0.toString());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(10, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(10, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(10, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(10, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(10, bufferedImage0.getType());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0, sunGraphics2D0.transformState);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals(1, sunGraphics2D0.antialiasHint);
      assertEquals(0, sunGraphics2D0.renderHint);
      assertEquals(0, sunGraphics2D0.clipState);
      assertEquals(0, sunGraphics2D0.constrainX);
      assertEquals(0, sunGraphics2D0.paintState);
      assertEquals(0, sunGraphics2D0.constrainY);
      assertEquals(0, sunGraphics2D0.strokeState);
      assertEquals((-1), sunGraphics2D0.eargb);
      assertEquals(140, sunGraphics2D0.lcdTextContrast);
      assertEquals(0, sunGraphics2D0.transY);
      assertEquals(0, sunGraphics2D0.compositeState);
      assertEquals(0, sunGraphics2D0.transX);
      assertEquals(1, sunGraphics2D0.interpolationType);
      assertEquals(0, sunGraphics2D0.strokeHint);
      assertEquals(0, sunGraphics2D0.textAntialiasHint);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = 293.17838485828287;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNotNull(emptyBlock0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(293.17838485828287, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(293.17838485828287, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertEquals(293.17838485828287, size2D0.getWidth(), 0.01D);
      assertEquals(293.17838485828287, size2D0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(293.17838485828287, size2D0.width, 0.01D);
      assertEquals(293.17838485828287, size2D0.height, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = 1.4344343711350378;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNotNull(defaultTableXYDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultTableXYDataset0.getDomainBounds(boolean0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, double0);
      assertEquals(1.4344343711350378, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotNull(rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 59;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, int0);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(59.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(59.0, size2D0.width, 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = timeTableXYDataset0.getDomainBounds(boolean0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotNull(rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = 36.96543333958437;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, double0);
      assertEquals(36.96543333958437, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(36.96543333958437, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertEquals(36.96543333958437, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(36.96543333958437, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(36.96543333958437, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(36.96543333958437, rectangleConstraint1.getWidth(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotNull(rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      byte byte0 = (byte)74;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) byte0, range0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(74.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(74.0, size2D0.getWidth(), 0.01D);
      assertEquals(74.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(74.0, size2D0.width, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
