/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:43 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.geom.Rectangle2D;
import javax.swing.JPasswordField;
import javax.swing.plaf.FontUIResource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.junit.runner.RunWith;


public class BorderArrangementEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Graphics2D graphics2D0 = null;
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      borderArrangement0.add((Block) blockContainer0, (Object) graphics2D0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertTrue(boolean0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
  }

  @Test
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      JPasswordField jPasswordField0 = new JPasswordField();
      assertNotNull(jPasswordField0);
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isDisplayable());
      
      boolean boolean0 = borderArrangement0.equals((Object) jPasswordField0);
      assertFalse(boolean0);
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isDisplayable());
  }

  @Test
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test04()  throws Throwable  {
      Rectangle2D rectangle2D0 = null;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangle2D0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      boolean boolean0 = false;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Rectangle2D rectangle2D0 = null;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangle2D0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = false;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotNull(rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(double0);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer1 = new BlockContainer();
      assertNotNull(blockContainer1);
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getWidth(), 0.01D);
      assertNotSame(blockContainer1, blockContainer0);
      assertTrue(blockContainer1.equals((Object)blockContainer0));
      
      blockContainer0.add((Block) blockContainer1, (Object) graphics2D0);
      assertEquals(false, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer1.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer1.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer1.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer1.isEmpty());
      assertNull(blockContainer1.getID());
      assertEquals(0.0, blockContainer1.getWidth(), 0.01D);
      assertNotSame(blockContainer0, blockContainer1);
      assertNotSame(blockContainer1, blockContainer0);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertFalse(blockContainer1.equals((Object)blockContainer0));
      
      Size2D size2D0 = blockContainer0.arrange(graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNotSame(blockContainer0, blockContainer1);
      assertFalse(blockContainer0.equals((Object)blockContainer1));
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotNull(rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      Range range0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      double double0 = 0.0;
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedWidth(double0);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      
      Graphics2D graphics2D0 = null;
      boolean boolean0 = false;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      Range range0 = defaultTableXYDataset0.getDomainBounds(boolean0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      double double0 = 0.8394527312625129;
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toFixedHeight(double0);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.8394527312625129, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      String string0 = "";
      JPasswordField jPasswordField0 = new JPasswordField();
      assertNotNull(jPasswordField0);
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      
      FontUIResource fontUIResource0 = (FontUIResource)jPasswordField0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      
      Paint paint0 = null;
      LabelBlock labelBlock0 = new LabelBlock(string0, (Font) fontUIResource0, paint0);
      assertNotNull(labelBlock0);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) labelBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(true, jPasswordField0.isEnabled());
      assertNull(labelBlock0.getID());
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
