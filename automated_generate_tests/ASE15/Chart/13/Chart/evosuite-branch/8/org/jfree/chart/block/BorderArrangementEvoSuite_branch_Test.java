/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:09 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;



import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;


public class BorderArrangementEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement0, borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      double double0 = 2135.00384274;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = (-1.0);
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-1.0), emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-1.0), emptyBlock0.getHeight(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-1.0), emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-1.0), emptyBlock0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
  }

  @Test
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotNull(borderArrangement1);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertTrue(boolean0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
  }

  @Test
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) rectangle2D_Double0.x);
      assertNotNull(xYSeries0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = false;
      xYSeries0.add(rectangle2D_Double0.width, rectangle2D_Double0.x, boolean0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) rectangle2D_Double0.x);
      assertNotNull(xYSeries0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      
      boolean boolean0 = false;
      xYSeries0.add(rectangle2D_Double0.width, rectangle2D_Double0.x, boolean0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      
      Range range0 = xYSeriesCollection0.getDomainBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
  }

  @Test
  public void test06()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      double double0 = 2135.00384274;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(2135.00384274, size2D0.height, 0.01D);
      assertEquals(2135.00384274, size2D0.width, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(2135.00384274, size2D0.getWidth(), 0.01D);
      assertEquals(2135.00384274, size2D0.getHeight(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Size2D size2D1 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, size2D0.height);
      assertNotNull(size2D1);
      assertEquals(0.0, size2D1.width, 0.01D);
      assertEquals(0.0, size2D1.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D1.getWidth(), 0.01D);
      assertEquals(0.0, size2D1.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertTrue(size2D1.equals((Object)size2D0));
      assertTrue(size2D0.equals((Object)size2D1));
      assertNotSame(size2D1, size2D0);
      assertNotSame(size2D0, size2D1);
  }

  @Test
  public void test09()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.y);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      double double0 = 2135.00384274;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = blockContainer0.arrange(graphics2D0);
      assertNotNull(size2D0);
      assertEquals(2135.00384274, size2D0.height, 0.01D);
      assertEquals(2135.00384274, size2D0.width, 0.01D);
      assertEquals(2135.00384274, size2D0.getHeight(), 0.01D);
      assertEquals(2135.00384274, size2D0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      double double0 = 2135.00384274;
      EmptyBlock emptyBlock0 = new EmptyBlock(double0, double0);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getHeight(), 0.01D);
      assertEquals(2135.00384274, emptyBlock0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      boolean boolean0 = borderArrangement0.equals((Object) defaultMultiValueCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toRangeWidth(range0);
      assertNotNull(rectangleConstraint1);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      Graphics2D graphics2D0 = null;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.y);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
  }

  @Test
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      double double0 = (-1.0);
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      boolean boolean0 = false;
      Range range0 = categoryTableXYDataset0.getDomainBounds(boolean0);
      assertNull(range0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotNull(rectangleConstraint1);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals((-1.0), rectangleConstraint1.getWidth(), 0.01D);
      assertEquals((-1.0), rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Block block0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotNull(rectangleEdge1);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      
      borderArrangement0.add(block0, (Object) rectangleEdge1);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge1.toString());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
  }

  @Test
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
