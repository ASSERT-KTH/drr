/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:27 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.print.attribute.standard.JobState;
import javax.swing.AbstractButton;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;



import org.evosuite.runtime.testdata.FileSystemHandling;;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = 1800;
//       String string0 = ">T3{";
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals((-1381433315), int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2014, month0.getYearValue());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       String string0 = ">T3{";
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       String string1 = null;
//       timeSeries0.setDomainDescription(string1);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-1739454260), int0);
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//   }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       boolean boolean0 = true;
//       timeSeries1.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertNull(timeSeries1.getDescription());
//   }

  @Test
  public void test03()  throws Throwable  {
      int int0 = SwingConstants.SOUTH;
      assertEquals(5, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      
      timeSeries0.setMaximumItemCount(int0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(5, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(5, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 2541L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      String string0 = timeSeries0.getRangeDescription();
      assertNotNull(string0);
      assertEquals("Value", string0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) long0, string0, string0, (Class) class0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Value", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Value", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      String string0 = "0Z-C";
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("0Z-C", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("0Z-C", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("0Z-C", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("0Z-C", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) class0);
      assertFalse(boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int0 = 974;
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       Hour hour1 = (Hour)hour0.previous();
//       assertNotNull(hour1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(19, hour1.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour1, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(19, hour1.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(hour0, hour1);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//   }

  @Test
  public void test09() {}
//   @Test
//   public void test09()  throws Throwable  {
//       String string0 = AbstractButton.MARGIN_CHANGED_PROPERTY;
//       assertNotNull(string0);
//       assertEquals("margin", string0);
//       
//       Class<Quarter> class0 = Quarter.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("margin", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("margin", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
//       assertNotNull(fixedMillisecond1);
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertEquals(1392409281321L, fixedMillisecond1.getMiddleMillisecond());
//       assertEquals(1392409281321L, fixedMillisecond1.getFirstMillisecond());
//       assertEquals(1392409281321L, fixedMillisecond1.getLastMillisecond());
//       assertEquals(1392409281321L, fixedMillisecond1.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test
  public void test10() {}
//   @Test
//   public void test10()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       
//       int int0 = 1800;
//       String string0 = ">T3{";
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       
//       int int1 = 0;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       int int0 = (-46);
//       int int1 = timeSeries0.getIndex((RegularTimePeriod) quarter0);
//       assertEquals((-1), int1);
//       assertFalse(int1 == int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start >= 0.
//          //
//       }
//   }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       int int0 = 2580;
//       Millisecond millisecond0 = new Millisecond();
//       assertNotNull(millisecond0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       
//       Class<Minute> class0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) millisecond0);
//       assertNull(number0);
//       assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
//       assertEquals(320L, millisecond0.getMillisecond());
//       assertEquals(3601570881320L, millisecond0.getSerialIndex());
//       assertEquals(1392409281320L, millisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals((-1555978550), int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.delete(int0, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       int int0 = 2;
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       timeSeries0.delete((RegularTimePeriod) hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//   }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       
//       timeSeries0.delete((RegularTimePeriod) day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       int int0 = 2218;
//       String string0 = "!&H`S$Kw";
//       Class<Integer> class0 = Integer.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       
//       timeSeries0.clear();
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//   }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "pz%v,CkD#6r1";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("selectedIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      long long0 = 1812L;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (double) long0, boolean0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       
//       int int0 = 974;
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(3, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(3, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       
//       boolean boolean0 = false;
//       timeSeries0.setMaximumItemAge((long) int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(974L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(974L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//   }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       //  // Unstable assertion: assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       //  // Unstable assertion: assertNotNull(string0);
//       //  // Unstable assertion: assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       
//       int int0 = 974;
//       Quarter quarter0 = new Quarter();
//       //  // Unstable assertion: assertNotNull(quarter0);
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       
//       Day day0 = new Day((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396224000000L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(31, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1396310399999L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(41729L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1396224000000L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(31, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1396310399999L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(41729L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
//       //  // Unstable assertion: assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
//       //  // Unstable assertion: assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       
//       EvoSuiteFile evoSuiteFile0 = null;
//       boolean boolean0 = false;
//       boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertTrue(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(boolean1 == boolean0);
//       
//       timeSeries0.removeAgedItems((long) int0, boolean1);
//       //  // Unstable assertion: assertTrue(boolean0 == boolean1);
//       //  // Unstable assertion: assertTrue(boolean1 == boolean0);
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//   }

  @Test
  public void test22()  throws Throwable  {
      JobState jobState0 = JobState.PROCESSING;
      assertNotNull(jobState0);
      
      String string0 = jobState0.getName();
      assertNotNull(string0);
      assertEquals("job-state", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = 974;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      
      timeSeries0.removeAgedItems((long) int0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertTrue(boolean0 == boolean1);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 2;
//       long long0 = 0L;
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       Hour hour1 = (Hour)hour0.previous();
//       assertNotNull(hour1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(19, hour1.getHour());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) long0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour0, hour1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       timeSeries0.setMaximumItemAge(long0);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) hour1, (double) int0);
//       assertNull(timeSeriesDataItem1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(19, hour1.getHour());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//   }

  @Test
  public void test24() {}
//   @Test
//   public void test24()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       long long0 = 0L;
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       Hour hour1 = (Hour)hour0.previous();
//       assertNotNull(hour1);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(19, hour1.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour1, (double) long0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(hour1.equals((Object)hour0));
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour1, hour0);
//       assertNotSame(hour0, hour1);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1000435L, hour1.getSerialIndex());
//       assertEquals(2014, hour1.getYear());
//       assertEquals(14, hour1.getDayOfMonth());
//       assertEquals(1392404400000L, hour1.getFirstMillisecond());
//       assertEquals(1392407999999L, hour1.getLastMillisecond());
//       assertEquals(2, hour1.getMonth());
//       assertEquals(1392406199999L, hour1.getMiddleMillisecond());
//       assertEquals(19, hour1.getHour());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (double) long0);
//       assertNull(timeSeriesDataItem1);
//       assertFalse(hour0.equals((Object)hour1));
//       assertNotSame(hour0, hour1);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       timeSeries0.setMaximumItemAge(long0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(0L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//   }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//   }

  @Test
  public void test26() {}
//   @Test
//   public void test26()  throws Throwable  {
//       int int0 = 1334;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Class<Minute> class0 = Minute.class;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(1334, week0.getYearValue());
//       assertEquals(54, week0.getWeek());
//       assertEquals((-20036980800001L), week0.getMiddleMillisecond());
//       assertEquals((-20037283200000L), week0.getFirstMillisecond());
//       assertEquals((-20036678400001L), week0.getLastMillisecond());
//       assertEquals(70756L, week0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals(1334, week0.getYearValue());
//       assertEquals(54, week0.getWeek());
//       assertEquals((-20036980800001L), week0.getMiddleMillisecond());
//       assertEquals((-20037283200000L), week0.getFirstMillisecond());
//       assertEquals((-20036678400001L), week0.getLastMillisecond());
//       assertEquals(70756L, week0.getSerialIndex());
//       assertEquals("Sun Jan 15 23:59:59 GMT 1335", mockDate0.toString());
//       
//       SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateTimeInstance();
//       assertNotNull(simpleDateFormat0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       
//       RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
//       assertNull(regularTimePeriod0);
//       assertEquals(1334, week0.getYearValue());
//       assertEquals(54, week0.getWeek());
//       assertEquals((-20036980800001L), week0.getMiddleMillisecond());
//       assertEquals((-20037283200000L), week0.getFirstMillisecond());
//       assertEquals((-20036678400001L), week0.getLastMillisecond());
//       assertEquals(70756L, week0.getSerialIndex());
//       assertEquals("Sun Jan 15 23:59:59 GMT 1335", mockDate0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd-MMM-yyyy HH:mm:ss", simpleDateFormat0.toPattern());
//       
//       // Undeclared exception!
//       try {
//         TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'period' argument.
//          //
//       }
//   }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       int int0 = 974;
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(3, day0.getMonth());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(3, day0.getMonth());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       
//       MockDate mockDate1 = new MockDate(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockDate1);
//       assertFalse(mockDate1.equals((Object)mockDate0));
//       assertNotSame(mockDate1, mockDate0);
//       assertEquals("Fri Dec 09 06:30:14 GMT 2957", mockDate1.toString());
//       
//       Day day1 = new Day((Date) mockDate1);
//       assertNotNull(day1);
//       assertFalse(mockDate1.equals((Object)mockDate0));
//       assertFalse(day1.equals((Object)day0));
//       assertNotSame(mockDate1, mockDate0);
//       assertNotSame(day1, day0);
//       assertEquals("Fri Dec 09 06:30:14 GMT 2957", mockDate1.toString());
//       assertEquals(12, day1.getMonth());
//       assertEquals(31176403199999L, day1.getLastMillisecond());
//       assertEquals(31176316800000L, day1.getFirstMillisecond());
//       assertEquals(9, day1.getDayOfMonth());
//       assertEquals(31176359999999L, day1.getMiddleMillisecond());
//       assertEquals(2957, day1.getYear());
//       assertEquals(386406L, day1.getSerialIndex());
//       
//       timeSeries0.add((RegularTimePeriod) day1, (double) int0);
//       assertFalse(mockDate1.equals((Object)mockDate0));
//       assertFalse(day1.equals((Object)day0));
//       assertNotSame(mockDate1, mockDate0);
//       assertNotSame(day1, day0);
//       assertEquals("Fri Dec 09 06:30:14 GMT 2957", mockDate1.toString());
//       assertEquals(12, day1.getMonth());
//       assertEquals(31176403199999L, day1.getLastMillisecond());
//       assertEquals(31176316800000L, day1.getFirstMillisecond());
//       assertEquals(9, day1.getDayOfMonth());
//       assertEquals(31176359999999L, day1.getMiddleMillisecond());
//       assertEquals(2957, day1.getYear());
//       assertEquals(386406L, day1.getSerialIndex());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       
//       TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
//       assertNotNull(timeSeries2);
//       assertFalse(timeSeries2.equals((Object)timeSeries0));
//       assertFalse(timeSeries2.equals((Object)timeSeries1));
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries0.equals((Object)timeSeries2));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries1.equals((Object)timeSeries2));
//       assertNotSame(timeSeries2, timeSeries0);
//       assertNotSame(timeSeries2, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries0, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries2);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(false, timeSeries2.isEmpty());
//       assertEquals(true, timeSeries2.getNotify());
//       assertEquals("Time", timeSeries2.getDomainDescription());
//       assertNull(timeSeries2.getDescription());
//       assertEquals(1, timeSeries2.getItemCount());
//       assertEquals("Value", timeSeries2.getRangeDescription());
//       assertEquals(2147483647, timeSeries2.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//   }

  @Test
  public void test28() {}
//   @Test
//   public void test28()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       timeSeries0.update((RegularTimePeriod) hour0, (Number) int0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test29() {}
//   @Test
//   public void test29()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       int int0 = 2218;
//       String string0 = "!&H`S$Kw";
//       Class<Integer> class0 = Integer.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       int int1 = 0;
//       assertFalse(int1 == int0);
//       
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries0);
//       assertTrue(boolean0);
//       assertFalse(int0 == int1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertFalse(int0 == int1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//   }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 974;
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(3, day0.getMonth());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(3, day0.getMonth());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) day0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period 31-March-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       
//       int int0 = 1800;
//       String string0 = ">T3{";
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(">T3{", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(">T3{", timeSeries1.getRangeDescription());
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       
//       int int0 = 2208;
//       String string0 = "";
//       Class<TimeSeries> class0 = TimeSeries.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       boolean boolean0 = true;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = SwingConstants.SOUTH;
      assertEquals(5, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertNotNull(timeSeries1);
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       boolean boolean0 = false;
//       timeSeries1.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
//       assertNotNull(collection0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       boolean boolean0 = false;
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(20, hour0.getHour());
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertNotNull(collection0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = SwingConstants.SOUTH;
//       assertEquals(5, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       Day day0 = hour0.getDay();
//       assertNotNull(day0);
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       boolean boolean0 = true;
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(20, hour0.getHour());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 974;
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)quarter0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(3, day0.getMonth());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(3, day0.getMonth());
//       assertEquals(1396310399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1396224000000L, day0.getFirstMillisecond());
//       assertEquals(41729L, day0.getSerialIndex());
//       assertEquals(1396267199999L, day0.getMiddleMillisecond());
//       assertEquals(31, day0.getDayOfMonth());
//       assertEquals("Mon Mar 31 23:59:59 GMT 2014", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) quarter0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       JobState jobState0 = JobState.PROCESSING;
//       assertNotNull(jobState0);
//       
//       String string0 = jobState0.getName();
//       assertNotNull(string0);
//       assertEquals("job-state", string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Hour hour0 = new Hour();
//       assertNotNull(hour0);
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1000436L, hour0.getSerialIndex());
//       assertEquals(2, hour0.getMonth());
//       assertEquals(1392411599999L, hour0.getLastMillisecond());
//       assertEquals(14, hour0.getDayOfMonth());
//       assertEquals(1392409799999L, hour0.getMiddleMillisecond());
//       assertEquals(2014, hour0.getYear());
//       assertEquals(1392408000000L, hour0.getFirstMillisecond());
//       assertEquals(20, hour0.getHour());
//   }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      String string0 = "0Z-C";
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("0Z-C", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("0Z-C", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      long long0 = (-254L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       
//       int int0 = 2208;
//       String string0 = "";
//       Class<TimeSeries> class0 = TimeSeries.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       
//       int int1 = 0;
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "[<";
      int int0 = (-1364);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       int int0 = 1800;
//       String string0 = ">T3{";
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) month0);
//       assertEquals(1800.0, (double)double0, 0.01D);
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(">T3{", timeSeries0.getDomainDescription());
//       assertEquals(">T3{", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(2, month0.getMonth());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//   }

  @Test
  public void test44()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      JobState jobState0 = JobState.PROCESSING;
      assertNotNull(jobState0);
      
      String string0 = jobState0.getName();
      assertNotNull(string0);
      assertEquals("job-state", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "yJ23";
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("yJ23", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("yJ23", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = 7;
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        timeSeries0.add(regularTimePeriod0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "pz%v,CkD#6r1";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = (-3698);
      byte byte0 = Character.DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC;
      assertEquals((byte)2, byte0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = SwingConstants.SOUTH;
      assertEquals(5, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertTrue(boolean0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test50()  throws Throwable  {
      JobState jobState0 = JobState.PROCESSING;
      assertNotNull(jobState0);
      
      String string0 = jobState0.getName();
      assertNotNull(string0);
      assertEquals("job-state", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setRangeDescription(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("job-state", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }
}
