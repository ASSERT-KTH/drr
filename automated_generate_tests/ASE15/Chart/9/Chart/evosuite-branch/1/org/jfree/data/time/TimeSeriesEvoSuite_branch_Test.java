/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:01 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.SpinnerDateModel;
import javax.swing.text.View;



import org.evosuite.runtime.testdata.FileSystemHandling;;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       int int0 = (-34);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       
//       FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
//       assertNotNull(fixedMillisecond1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-33L), fixedMillisecond1.getLastMillisecond());
//       assertEquals((-33L), fixedMillisecond1.getSerialIndex());
//       assertEquals((-33L), fixedMillisecond1.getMiddleMillisecond());
//       assertEquals((-33L), fixedMillisecond1.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertNotSame(fixedMillisecond1, fixedMillisecond0);
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-33L), fixedMillisecond1.getLastMillisecond());
//       assertEquals((-33L), fixedMillisecond1.getSerialIndex());
//       assertEquals((-33L), fixedMillisecond1.getMiddleMillisecond());
//       assertEquals((-33L), fixedMillisecond1.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem1);
//       assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
//       assertNotSame(fixedMillisecond0, fixedMillisecond1);
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(927501958, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//   }

  @Test
  public void test01() {}
//   @Test
//   public void test01()  throws Throwable  {
//       int int0 = (-34);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals((-34L), fixedMillisecond0.getSerialIndex());
//       assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(2121487693, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//   }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      String string0 = timeSeries0.getDescription();
      assertNull(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      Class<Object> class0 = null;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      
      int int1 = timeSeries1.hashCode();
      assertEquals((-363013715), int1);
      assertFalse(int1 == int0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(int0 == int1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      assertNull(timeSeriesDataItem1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertTrue(boolean0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(false, timeSeries1.isEmpty());
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       
//       int int1 = timeSeries1.hashCode();
//       assertEquals((-961148501), int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int1);
//       assertNull(timeSeriesDataItem1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(boolean0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(false, timeSeries1.isEmpty());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(1, timeSeries1.getItemCount());
//       assertEquals(true, timeSeries1.getNotify());
//   }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = (-4021);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int1 = 333;
      timeSeries0.setMaximumItemCount(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(333, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries1);
      assertFalse(int0 == int1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(333, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      assertEquals(1, int0);
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      
      String string0 = "{2p";
      timeSeries0.setDomainDescription(string0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("{2p", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("{2p", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond1);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-34);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-34L), fixedMillisecond0.getSerialIndex());
      assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertEquals((-34L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-34L), fixedMillisecond0.getSerialIndex());
      assertEquals((-34L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-34L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-33L), fixedMillisecond1.getLastMillisecond());
      assertEquals((-33L), fixedMillisecond1.getMiddleMillisecond());
      assertEquals((-33L), fixedMillisecond1.getSerialIndex());
      assertEquals((-33L), fixedMillisecond1.getFirstMillisecond());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond1, (RegularTimePeriod) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test12() {}
//   @Test
//   public void test12()  throws Throwable  {
//       Month month0 = new Month();
//       assertNotNull(month0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       
//       String string0 = "4F,If\"f<?sm~.{o#82.";
//       Class<Day> class0 = Day.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(24170L, month0.getSerialIndex());
//       assertEquals(2, month0.getMonth());
//       assertEquals(1392422399999L, month0.getMiddleMillisecond());
//       assertEquals(2014, month0.getYearValue());
//       assertEquals(1391212800000L, month0.getFirstMillisecond());
//       assertEquals(1393631999999L, month0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("4F,If\"f<?sm~.{o#82.", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("4F,If\"f<?sm~.{o#82.", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       RegularTimePeriod regularTimePeriod0 = null;
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, regularTimePeriod0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 1618;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      String string0 = "Null 'period' argument.";
      Minute minute0 = Minute.parseMinute(string0);
      assertNull(minute0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) minute0, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       Day day0 = new Day();
//       assertNotNull(day0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       
//       Class<String> class0 = String.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) day0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals(2, day0.getMonth());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       int int0 = 2148;
//       int int1 = (-3356);
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-3L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-3L), fixedMillisecond0.getSerialIndex());
      assertEquals((-3L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-3L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-3L), fixedMillisecond0.getLastMillisecond());
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals((-3L), fixedMillisecond0.getSerialIndex());
      assertEquals((-3L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-3L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-3L), fixedMillisecond0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = (-171);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       int int0 = 0;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       
//       String string0 = timeSeries0.getDescription();
//       assertNull(string0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       
//       Class<Object> class0 = Object.class;
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertNotNull(timeSeriesDataItem1);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
//       assertNotNull(timeSeries1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       
//       int int1 = timeSeries1.hashCode();
//       assertEquals(100615649, int1);
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.getNotify());
//       assertNull(timeSeries1.getRangeDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.delete(int1, int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start <= end.
//          //
//       }
//   }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       int int0 = (-3992);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2014, day0.getYear());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//   }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.clear();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      long long0 = fixedMillisecond0.getFirstMillisecond();
      assertEquals(0L, long0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) long0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeriesDataItem0);
      assertFalse(boolean0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      boolean boolean0 = true;
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      long long0 = fixedMillisecond1.getFirstMillisecond();
      assertEquals(1L, long0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) long0);
      assertNull(timeSeriesDataItem0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem1);
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      FixedMillisecond fixedMillisecond1 = (FixedMillisecond)fixedMillisecond0.next();
      assertNotNull(fixedMillisecond1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      long long0 = fixedMillisecond1.getFirstMillisecond();
      assertEquals(1L, long0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) long0);
      assertNull(timeSeriesDataItem0);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond1, (double) long0);
      assertNull(timeSeriesDataItem1);
      assertFalse(fixedMillisecond1.equals((Object)fixedMillisecond0));
      assertFalse(fixedMillisecond0.equals((Object)fixedMillisecond1));
      assertNotSame(fixedMillisecond1, fixedMillisecond0);
      assertNotSame(fixedMillisecond0, fixedMillisecond1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1L, fixedMillisecond1.getSerialIndex());
      assertEquals(1L, fixedMillisecond1.getMiddleMillisecond());
      assertEquals(1L, fixedMillisecond1.getLastMillisecond());
      assertEquals(1L, fixedMillisecond1.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       int int0 = (-3973);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int1 = 0;
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertFalse(int0 == int1);
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//   }

  @Test
  public void test28()  throws Throwable  {
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      assertEquals(1, int0);
      
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotNull(timeSeries2);
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries2.getDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(true, timeSeries2.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
      }
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       long long0 = (-30L);
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals((-30L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals((-30L), fixedMillisecond0.getLastMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getMiddleMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getFirstMillisecond());
//       assertEquals((-30L), fixedMillisecond0.getSerialIndex());
//       
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(21, minute0.getMinute());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) minute0, (Number) long0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       int int0 = (-3973);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       
//       int int1 = 0;
//       timeSeries0.setMaximumItemCount(int1);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//       assertFalse(int0 == int1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getMaximumItemCount());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(2014, day0.getYear());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(2, day0.getMonth());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       int int0 = (-3996);
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertNotNull(timeSeries0);
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       Day day0 = new Day((Date) mockDate0);
//       assertNotNull(day0);
//       assertEquals(2, day0.getMonth());
//       assertEquals(1392336000000L, day0.getFirstMillisecond());
//       assertEquals(14, day0.getDayOfMonth());
//       assertEquals(1392422399999L, day0.getLastMillisecond());
//       assertEquals(1392379199999L, day0.getMiddleMillisecond());
//       assertEquals(41684L, day0.getSerialIndex());
//       assertEquals(2014, day0.getYear());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
//          //
//       }
//   }

  @Test
  public void test34()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Month month0 = new Month(int0, int0);
      assertNotNull(month0);
      assertEquals(1, month0.getMonth());
      assertEquals(13L, month0.getSerialIndex());
      assertEquals((-62133091200001L), month0.getLastMillisecond());
      assertEquals((-62134430400001L), month0.getMiddleMillisecond());
      assertEquals((-62135769600000L), month0.getFirstMillisecond());
      assertEquals(1, month0.getYearValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, month0.getMonth());
      assertEquals(13L, month0.getSerialIndex());
      assertEquals((-62133091200001L), month0.getLastMillisecond());
      assertEquals((-62134430400001L), month0.getMiddleMillisecond());
      assertEquals((-62135769600000L), month0.getFirstMillisecond());
      assertEquals(1, month0.getYearValue());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       Quarter quarter0 = new Quarter();
//       assertNotNull(quarter0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       
//       Class<Week> class0 = Week.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Number number0 = timeSeries0.getValue((RegularTimePeriod) quarter0);
//       assertNull(number0);
//       assertEquals(1396310399999L, quarter0.getLastMillisecond());
//       assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
//       assertEquals(1388534400000L, quarter0.getFirstMillisecond());
//       assertEquals(2014, quarter0.getYearValue());
//       assertEquals(8057L, quarter0.getSerialIndex());
//       assertEquals(1, quarter0.getQuarter());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//   }

  @Test
  public void test36()  throws Throwable  {
      int int0 = View.X_AXIS;
      assertEquals(0, int0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      
      String string0 = timeSeries0.getDescription();
      assertNull(string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertNotNull(collection0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = (-4003);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertNotNull(timeSeriesDataItem1);
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      long long0 = (-2336L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-3973);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      
      int int1 = 0;
      timeSeries0.setMaximumItemCount(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test
  public void test43()  throws Throwable  {
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) year0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = (-1283);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      //  // Unstable assertion: assertEquals(1, int0);
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Class<Month> class1 = Month.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("lE='NOlNGv$", zoneInfo0.getID());
      
      Month month0 = (Month)RegularTimePeriod.createInstance((Class) class1, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("lE='NOlNGv$", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1582, month0.getYearValue());
      //  // Unstable assertion: assertEquals((-12218731200001L), month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219638400000L), month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(10, month0.getMonth());
      //  // Unstable assertion: assertEquals(18994L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-12217824000001L), month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("lE='NOlNGv$", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(1582, month0.getYearValue());
      //  // Unstable assertion: assertEquals((-12218731200001L), month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-12219638400000L), month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(10, month0.getMonth());
      //  // Unstable assertion: assertEquals(18994L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-12217824000001L), month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      Quarter quarter0 = new Quarter(int0, int0);
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-62135769600000L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-62127993600001L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(5L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62131881600001L), quarter0.getMiddleMillisecond());
      
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertEquals(1, (int)integer0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals((-62135769600000L), quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-62127993600001L), quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(5L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-62131881600001L), quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test45() {}
//   @Test
//   public void test45()  throws Throwable  {
//       int int0 = 1060;
//       Class<Object> class0 = Object.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       
//       Minute minute0 = new Minute();
//       assertNotNull(minute0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       
//       Second second0 = new Second(int0, minute0);
//       assertNotNull(second0);
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409296499L, second0.getMiddleMillisecond());
//       assertEquals(36, second0.getSecond());
//       assertEquals(3601570896L, second0.getSerialIndex());
//       assertEquals(1392409296000L, second0.getFirstMillisecond());
//       assertEquals(1392409296999L, second0.getLastMillisecond());
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) second0, (double) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of java.lang.Object.
//          //
//       }
//   }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-4003);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.isEmpty());
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = (-37);
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test49()  throws Throwable  {
      SpinnerDateModel spinnerDateModel0 = new SpinnerDateModel();
      //  // Unstable assertion: assertNotNull(spinnerDateModel0);
      
      Date date0 = spinnerDateModel0.getDate();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:47:52 GMT 2014", date0.toString());
      
      int int0 = 52;
      String string0 = "{ .WnK";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals(52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id={ .WnK,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Second second0 = new Second(date0, (TimeZone) simpleTimeZone0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:47:52 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id={ .WnK,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(1418312872947L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1418312872447L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52, second0.getSecond());
      //  // Unstable assertion: assertEquals(3627474472L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1418312871948L, second0.getFirstMillisecond());
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:47:52 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("{ .WnK", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id={ .WnK,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(1418312872947L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1418312872447L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52, second0.getSecond());
      //  // Unstable assertion: assertEquals(3627474472L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1418312871948L, second0.getFirstMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) second0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 15:47:52 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("{ .WnK", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(52, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id={ .WnK,offset=52,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("{ .WnK", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(1418312872947L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1418312872447L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(52, second0.getSecond());
      //  // Unstable assertion: assertEquals(3627474472L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1418312871948L, second0.getFirstMillisecond());
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((long) int0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = (-37);
      String string0 = "q!hU`Em3@kfQB";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.setRangeDescription(string0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("q!hU`Em3@kfQB", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
  }
}
