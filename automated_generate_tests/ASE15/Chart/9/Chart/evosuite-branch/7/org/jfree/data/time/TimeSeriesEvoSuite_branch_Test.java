/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:52:07 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodAnchor;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00() {}
//   @Test
//   public void test00()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235125336), int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals(1771330964, int1);
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertFalse(int1 == int0);
//   }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertEquals((-957834513), int1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test03()  throws Throwable  {
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(minute0);
      
      int int0 = MonthConstants.MAY;
      //  // Unstable assertion: assertEquals(5, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      String string0 = "";
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Class<Month> class1 = Month.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) timeSeriesDataItem0, string0, string0, (Class) class1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timeSeriesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNotNull(timePeriodAnchor0);
      
      String string0 = timePeriodAnchor0.toString();
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", string0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNotNull(string0);
      
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeriesCollection0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test06()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test07()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      double double0 = 0.0;
      Day day1 = (Day)day0.next();
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, double0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) timeSeriesDataItem0, (Class) class0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = "You are attemptng to add an obsrvation for ";
      Second second0 = Second.parseSecond(string0);
      assertNull(second0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = MonthConstants.MAY;
      assertEquals(5, int0);
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Class<Second> class0 = Second.class;
      int int0 = (-2213);
      String string0 = "%2HCxNeM95MY^cW}.EU";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals("%2HCxNeM95MY^cW}.EU", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("%2HCxNeM95MY^cW}.EU", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertEquals(359697985, int1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      
      timeSeries0.delete((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
  }

  @Test
  public void test13()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.delete((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test14()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 1531L;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      String string0 = "J$`~piC,?";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 1531L;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test
  public void test20() {}
//   @Test
//   public void test20()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       //  // Unstable assertion: assertEquals((-235125336), int0);
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Millisecond millisecond0 = new Millisecond((Date) mockDate0);
//       //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2209161600003L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(3L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(millisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       
//       Second second0 = millisecond0.getSecond();
//       //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2209161600003L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(3L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(0, second0.getSecond());
//       //  // Unstable assertion: assertEquals(499L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2209161600L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(second0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) long0);
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2209161600003L, millisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(3L, millisecond0.getMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, millisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(0, second0.getSecond());
//       //  // Unstable assertion: assertEquals(499L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2209161600L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(0L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(999L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
//   }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "org.jfree.data.saatistic}.HistogramType";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      double double0 = 1.0;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      timeSeries0.update((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test23() {}
//   @Test
//   public void test23()  throws Throwable  {
//       String string0 = JComponent.TOOL_TIP_TEXT_KEY;
//       assertEquals("ToolTipText", string0);
//       assertNotNull(string0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.getMaximumItemCount();
//       assertEquals(Integer.MAX_VALUE, int0);
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertNotNull(fixedMillisecond0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // TimeSeries.update(TimePeriod, Number):  period does not exist.
//          //
//       }
//   }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 1531L;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"TimePeriodAnchor.START\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=323,ZONE_OFFSET=3,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"TimePeriodAnchor.START\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=323,ZONE_OFFSET=3,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(date0);
      
      Minute minute0 = (Minute)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"TimePeriodAnchor.START\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=323,ZONE_OFFSET=3,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(minute0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) minute0, (double) long0, boolean0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289996L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409319996L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409259997L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"TimePeriodAnchor.START\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=323,ZONE_OFFSET=3,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test25()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      
      timeSeries0.add((RegularTimePeriod) day1, (Number) int0, boolean0);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
  }

  @Test
  public void test26()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals((-1), int0);
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertNotNull(year0);
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) year0);
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNull(number0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 336;
      String string0 = "TableOrder.BY_COLUMN";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("TableOrder.BY_COLUMN", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("TableOrder.BY_COLUMN", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=336,MONTH=336,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=336,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=336,HOUR_OF_DAY=336,MINUTE=336,SECOND=336,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-50650251504000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=364,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=41,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("Wed Dec 15 05:41:36 GMT 364", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-50650251504000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=364,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=41,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("Wed Dec 15 05:41:36 GMT 364", date0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235125336), int0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertNotNull(collection0);
//   }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       int int0 = SwingConstants.LEADING;
//       assertEquals(10, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeriesDataItem0);
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(collection0);
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235125336), int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(timeSeriesDataItem1);
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       int int0 = SwingConstants.LEADING;
//       assertEquals(10, int0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNotNull(timeSeries0);
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//   }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      long long0 = (-59L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 1531L;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      timeSeries0.setMaximumItemAge(long0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1531L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertNotNull(year0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries1.setMaximumItemCount(int1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      int int1 = (-1342);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = SwingConstants.LEADING;
      //  // Unstable assertion: assertEquals(10, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      Year year0 = new Year();
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(year0);
      
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) year0);
      //  // Unstable assertion: assertEquals(10, (int)integer0);
      //  // Unstable assertion: assertEquals(1420070399996L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302399996L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399997L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = MonthConstants.MAY;
      assertEquals(5, int0);
      
      Class<RegularTimePeriod> class0 = RegularTimePeriod.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test40()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timeSeriesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNotNull(timePeriodAnchor0);
      
      String string0 = timePeriodAnchor0.toString();
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", string0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertNotNull(string0);
      
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertEquals(true, list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(list0);
  }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235125336), int0);
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertNull(timeSeriesDataItem0);
//       
//       boolean boolean0 = false;
//       timeSeries0.removeAgedItems((long) int0, boolean0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test
  public void test42()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      long long0 = hour0.getLastMillisecond();
      //  // Unstable assertion: assertEquals(1392411599996L, long0);
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) long0);
      //  // Unstable assertion: assertEquals(1392409799996L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407999997L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411599996L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392422399996L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335999997L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199996L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNotNull(timeSeries0);
//       
//       int int0 = 1003;
//       Week week0 = new Week(int0, int0);
//       assertEquals((-30527841600001L), week0.getMiddleMillisecond());
//       assertEquals((-30527539200001L), week0.getLastMillisecond());
//       assertEquals(-21, week0.getWeek());
//       assertEquals((-30528144000000L), week0.getFirstMillisecond());
//       assertEquals(1003, week0.getYearValue());
//       assertEquals(53138L, week0.getSerialIndex());
//       assertNotNull(week0);
//       
//       int int1 = timeSeries0.hashCode();
//       assertEquals((-235124495), int1);
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertFalse(int1 == int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) week0, (Number) int1);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//          //
//       }
//   }

  @Test
  public void test44()  throws Throwable  {
      long long0 = 1531L;
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = "+#{";
      timeSeries0.setDomainDescription(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("+#{", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      String string0 = "J$`~piC,?";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 128, Size: 0
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertEquals("ToolTipText", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("ToolTipText", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("ToolTipText", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("ToolTipText", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals("ToolTipText", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
  }

  @Test
  public void test47() {}
//   @Test
//   public void test47()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertNotNull(fixedMillisecond0);
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertNotNull(timeSeries0);
//       
//       int int0 = timeSeries0.hashCode();
//       assertEquals((-235125336), int0);
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) int0);
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertNull(timeSeriesDataItem0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test
  public void test48()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timeSeriesCollection0);
      
      TimePeriodAnchor timePeriodAnchor0 = timeSeriesCollection0.getXPosition();
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(timePeriodAnchor0);
      
      String string0 = timePeriodAnchor0.toString();
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", string0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(string0);
      
      Class<TimeSeries> class0 = TimeSeries.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.setRangeDescription(string0);
      //  // Unstable assertion: assertEquals(0, timeSeriesCollection0.getSeriesCount());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timePeriodAnchor0.toString());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("TimePeriodAnchor.START", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }
}
