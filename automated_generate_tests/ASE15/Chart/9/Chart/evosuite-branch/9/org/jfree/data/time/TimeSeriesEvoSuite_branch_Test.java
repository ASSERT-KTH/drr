/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:13:35 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.color.ICC_Profile;
import java.awt.event.KeyEvent;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.border.TitledBorder;
import javax.swing.text.View;




import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class TimeSeriesEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      
      Quarter quarter1 = (Quarter)quarter0.previous();
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotNull(quarter1);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter1);
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = KeyEvent.VK_GREATER;
      //  // Unstable assertion: assertEquals(160, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter1, (double) int0);
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(quarter0.equals((Object)quarter1));
      //  // Unstable assertion: assertFalse(quarter1.equals((Object)quarter0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(quarter0, quarter1);
      //  // Unstable assertion: assertNotSame(quarter1, quarter0);
      //  // Unstable assertion: assertEquals(1864988154, int1);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1384559999999L, quarter1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2013, quarter1.getYearValue());
      //  // Unstable assertion: assertEquals(4, quarter1.getQuarter());
      //  // Unstable assertion: assertEquals(8056L, quarter1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534399999L, quarter1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1380585600000L, quarter1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test
  public void test01()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      int int0 = KeyEvent.VK_GREATER;
      //  // Unstable assertion: assertEquals(160, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1771404131, int1);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
  }

  @Test
  public void test02()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-235125336), int0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      //  // Unstable assertion: assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Class<Week> class0 = Week.class;
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int1, int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1110589745,MONTH=1110589745,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1110589745,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1110589745,HOUR_OF_DAY=1110589745,MINUTE=0,SECOND=1110589745,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173800087126241768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37198214,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=17,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("Sat Jan 08 13:17:21 GMT 37198214", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      
      Week week0 = (Week)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173800087126241768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37198214,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=17,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1390401L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-26234, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-890048736001814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-890049340801813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-890049038401814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Sat Jan 08 13:17:21 GMT 37198214", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173800087126241768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37198214,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=17,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1390401L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-26234, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-890048736001814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-890049340801813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-890049038401814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Sat Jan 08 13:17:21 GMT 37198214", date0.toString());
      
      Class<Object> class1 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173800087126241768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37198214,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=1,HOUR_OF_DAY=13,MINUTE=17,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals((-1390401L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-26234, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-890048736001814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-890049340801813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, week0.getWeek());
      //  // Unstable assertion: assertEquals((-890049038401814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Sat Jan 08 13:17:21 GMT 37198214", date0.toString());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      //  // Unstable assertion: assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Class<Week> class0 = Week.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1110589745,MONTH=1110589745,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1110589745,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1110589745,HOUR_OF_DAY=1110589745,MINUTE=1110589745,SECOND=1110589745,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      
      Week week0 = (Week)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(-24123, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1278486L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-823411569601814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-823411267201814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals((-823411872001813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(-24123, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1278486L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-823411569601814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-823411267201814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals((-823411872001813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      Class<Object> class1 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(-24123, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1278486L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-823411569601814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-823411267201814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals((-823411872001813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
  }

  @Test
  public void test05()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Class<Millisecond> class1 = Millisecond.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) second0, (Class) class1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(1110589745L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(1110589745L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int1 = timeSeries0.getMaximumItemCount();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(int0 == int1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      
      timeSeries1.setKey((Comparable) int1);
      assertFalse(int1 == int0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(int0 == int1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(boolean0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      String string0 = null;
      Month month0 = Month.parseMonth(string0);
      assertNull(month0);
      
      boolean boolean0 = timeSeries0.equals((Object) month0);
      assertFalse(boolean0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      String string0 = "jZBh55y";
      timeSeries0.setRangeDescription(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("jZBh55y", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, (Class) class0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("jZBh55y", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      String string0 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      TimeZone timeZone0 = null;
      Week week0 = new Week(date0, timeZone0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) long0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      Year year1 = new Year();
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year1, (RegularTimePeriod) year1);
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      String string0 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      TimeZone timeZone0 = null;
      Week week0 = new Week(date0, timeZone0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      Year year1 = new Year();
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      
      timeSeries0.add((RegularTimePeriod) year1, (double) long0);
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertFalse(year0.equals((Object)year1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(year0, year1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      String string0 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      
      TimeZone timeZone0 = null;
      Week week0 = new Week(date0, timeZone0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      
      timeSeries0.add((RegularTimePeriod) year0, (double) long0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392407998187L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411598186L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409798186L, hour0.getMiddleMillisecond());
      
      Hour hour1 = (Hour)hour0.previous();
      //  // Unstable assertion: assertFalse(hour1.equals((Object)hour0));
      //  // Unstable assertion: assertFalse(hour0.equals((Object)hour1));
      //  // Unstable assertion: assertNotSame(hour1, hour0);
      //  // Unstable assertion: assertNotSame(hour0, hour1);
      //  // Unstable assertion: assertNotNull(hour1);
      //  // Unstable assertion: assertEquals(2014, hour1.getYear());
      //  // Unstable assertion: assertEquals(1392406199999L, hour1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000435L, hour1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392407999999L, hour1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour1.getMonth());
      //  // Unstable assertion: assertEquals(14, hour1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(19, hour1.getHour());
      //  // Unstable assertion: assertEquals(1392404400000L, hour1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392407998187L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411598186L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409798186L, hour0.getMiddleMillisecond());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) hour0, (RegularTimePeriod) hour1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) quarter0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = 0;
      int int1 = (-285);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = (-972);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 75;
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = (-17);
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      timeSeries0.delete((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test20()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.delete((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      //  // Unstable assertion: assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Class<Week> class0 = Week.class;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1110589745,MONTH=1110589745,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1110589745,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1110589745,HOUR_OF_DAY=1110589745,MINUTE=1110589745,SECOND=1110589745,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      
      Week week0 = (Week)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals((-823411872001813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1278486L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-24123, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-823411569601814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-823411267201814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals((-823411872001813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(33, week0.getWeek());
      //  // Unstable assertion: assertEquals((-1278486L), week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(-24123, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-823411569601814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-823411267201814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1173866722510941768,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=37200325,MONTH=7,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=12,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=22,SECOND=21,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("Wed Aug 12 10:22:21 GMT 37200325", date0.toString());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("T;327o~8n5wa&/", zoneInfo0.getID());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 3;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      boolean boolean0 = false;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1388534398187L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070398186L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302398186L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      timeSeries0.add((RegularTimePeriod) year0, (double) long0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1388534398187L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1420070398186L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1404302398186L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      boolean boolean0 = timeSeries0.isEmpty();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      int int0 = 0;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 3;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test
  public void test27()  throws Throwable  {
      boolean boolean0 = true;
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      String string0 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      TimeZone timeZone0 = null;
      Week week0 = new Week(date0, timeZone0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) long0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      Year year1 = new Year();
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertNotNull(year1);
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      
      timeSeries0.add((RegularTimePeriod) year1, (double) long0);
      //  // Unstable assertion: assertFalse(year1.equals((Object)year0));
      //  // Unstable assertion: assertNotSame(year1, year0);
      //  // Unstable assertion: assertEquals(1404302398186L, year1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("2014", year1.toString());
      //  // Unstable assertion: assertEquals(2014L, year1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070398186L, year1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year1.getYear());
      //  // Unstable assertion: assertEquals(1388534398187L, year1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test28()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 243;
      SpreadsheetDate spreadsheetDate0 = new SpreadsheetDate(int0);
      assertNotNull(spreadsheetDate0);
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(243, spreadsheetDate0.toSerial());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(30, spreadsheetDate0.getDayOfMonth());
      assertEquals(5, spreadsheetDate0.getDayOfWeek());
      assertNull(spreadsheetDate0.getDescription());
      assertEquals(1900, spreadsheetDate0.getYYYY());
      assertEquals(8, spreadsheetDate0.getMonth());
      assertEquals(243, spreadsheetDate0.toSerial());
      
      String string0 = "V~).tjCf5>h<0L";
      Day day0 = Day.parseDay(string0);
      assertNull(day0);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Second, but the TimeSeries is expecting an instance of org.jfree.data.time.Quarter.
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      timeSeries0.update((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
  }

  @Test
  public void test33()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) minute0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      long long0 = 0L;
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      String string0 = "";
      Locale locale0 = JComponent.getDefaultLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      TimeZone timeZone0 = null;
      Week week0 = new Week(date0, timeZone0);
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      
      Year year0 = week0.getYear();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (Number) long0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      //  // Unstable assertion: assertEquals(1934, week0.getYearValue());
      //  // Unstable assertion: assertEquals(102552L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106438401813L), week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-1105833601814L), week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106136001814L), week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(50, week0.getWeek());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Tue Dec 11 17:13:25 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(1934L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1120305600001L), year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-1136073600000L), year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1934, year0.getYear());
      //  // Unstable assertion: assertEquals("1934", year0.toString());
      //  // Unstable assertion: assertEquals((-1104537600001L), year0.getLastMillisecond());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) year0, (double) long0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 1934 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertNotNull(week0);
      //  // Unstable assertion: assertEquals(1392292798186L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990398187L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595198186L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) week0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392292798186L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391990398187L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392595198186L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0, boolean0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertNull(number0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        Number number0 = timeSeries0.getValue(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      int int0 = KeyEvent.VK_GREATER;
      //  // Unstable assertion: assertEquals(160, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      String string0 = ">";
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
  }

  @Test
  public void test39()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = KeyEvent.VK_GREATER;
      //  // Unstable assertion: assertEquals(160, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(1392422398186L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310398186L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534398187L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test
  public void test40()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      
      Day day0 = minute0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test41()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      Day day0 = minute0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392335998187L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198186L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398186L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test42()  throws Throwable  {
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411598186L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409798186L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407998187L, hour0.getFirstMillisecond());
      
      String string0 = null;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) hour0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411598186L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409798186L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407998187L, hour0.getFirstMillisecond());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-1552656152), int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411598186L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409798186L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407998187L, hour0.getFirstMillisecond());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge((long) int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = (-949);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(1, (int)integer0);
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test46()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test
  public void test48()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      List list0 = timeSeries0.getItems();
      //  // Unstable assertion: assertNotNull(list0);
      //  // Unstable assertion: assertEquals(true, list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (double) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test
  public void test50() {}
//   @Test
//   public void test50()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       
//       int int0 = View.ExcellentBreakWeight;
//       assertEquals(2000, int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) int0);
//         fail("Expecting exception: RuntimeException");
//       
//       } catch(RuntimeException e) {
//          //
//          // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
//          //
//       }
//   }

  @Test
  public void test51()  throws Throwable  {
      int int0 = ICC_Profile.icSigBToA1Tag;
      assertEquals(1110589745, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      String string0 = timeSeries0.getRangeDescription();
      assertNotNull(string0);
      assertEquals("Value", string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test
  public void test52()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int0 = 0;
      int int1 = timeSeries0.getIndex((RegularTimePeriod) millisecond0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-1), int1);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(133L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570883133L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int1);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      
      int int0 = TitledBorder.LEFT;
      //  // Unstable assertion: assertEquals(1, int0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(23, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281686L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570883L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282186L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281187L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
  }
}
