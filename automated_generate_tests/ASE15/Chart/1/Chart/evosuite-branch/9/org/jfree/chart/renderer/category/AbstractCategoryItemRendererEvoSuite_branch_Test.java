/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:24:02 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.EventListener;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JTextPane;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.MatteBorder;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.LegendItemSource;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ExtendedCategoryAxis;
import org.jfree.chart.axis.ModuloAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.FlowArrangement;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.title.DateTitle;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.util.HorizontalAlignment;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.VerticalAlignment;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;


public class AbstractCategoryItemRendererEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      int int0 = waterfallBarRenderer0.getPassCount();
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, int0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertNotNull(lineRenderer3D0);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer();
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01D);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getShadowsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(clusteredXYBarRenderer0);
      
      Shape shape0 = clusteredXYBarRenderer0.getLegendShape(int0);
      assertEquals(2, clusteredXYBarRenderer0.getPassCount());
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals((-1.0), clusteredXYBarRenderer0.getBarAlignmentFactor(), 0.01D);
      assertEquals(4.0, clusteredXYBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getShadowsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, clusteredXYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNull(shape0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        lineRenderer3D0.addEntity(standardEntityCollection0, shape0, defaultCategoryDataset0, int0, int0, boolean0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      //  // Unstable assertion: assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(0, ganttRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1, ganttRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getShadowsVisible());
      //  // Unstable assertion: assertEquals(0, ganttRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertNotNull(ganttRenderer0);
      
      CategoryDataset categoryDataset0 = null;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      //  // Unstable assertion: assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      //  // Unstable assertion: assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, multiplePiePlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, multiplePiePlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      //  // Unstable assertion: assertEquals(true, multiplePiePlot0.isNotify());
      //  // Unstable assertion: assertNull(multiplePiePlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertNotNull(multiplePiePlot0);
      
      boolean boolean0 = ganttRenderer0.hasListener((EventListener) multiplePiePlot0);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      //  // Unstable assertion: assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.isDrawBarOutline());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(0, ganttRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1, ganttRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getShadowsVisible());
      //  // Unstable assertion: assertEquals(0, ganttRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      //  // Unstable assertion: assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, multiplePiePlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, multiplePiePlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      //  // Unstable assertion: assertEquals(true, multiplePiePlot0.isNotify());
      //  // Unstable assertion: assertNull(multiplePiePlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertFalse(boolean0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(0, lineRenderer3D0.getRowCount());
      //  // Unstable assertion: assertEquals(0, lineRenderer3D0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(2, lineRenderer3D0.getPassCount());
      //  // Unstable assertion: assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertNotNull(lineRenderer3D0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)lineRenderer3D0.getBaseShape();
      //  // Unstable assertion: assertEquals((-1399.19147485), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals((-207.37298117500018), rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1684.282435398974), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1070.92963985457), rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(984.4455124999997, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1377.606037626772), rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(0, lineRenderer3D0.getRowCount());
      //  // Unstable assertion: assertEquals(0, lineRenderer3D0.getColumnCount());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseFillPaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      //  // Unstable assertion: assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getDrawOutlines());
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(2, lineRenderer3D0.getPassCount());
      //  // Unstable assertion: assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(613.352795544404, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1684.282435398974), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals((-1399.19147485), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2383.63698735, rectangle2D_Double0.width, 0.01D);
      
      StandardEntityCollection standardEntityCollection0 = new StandardEntityCollection();
      //  // Unstable assertion: assertEquals(0, standardEntityCollection0.getEntityCount());
      //  // Unstable assertion: assertNotNull(standardEntityCollection0);
      
      // Undeclared exception!
      try {
        lineRenderer3D0.addEntity(standardEntityCollection0, rectangle2D_Double0, categoryDataset0, int0, int0, boolean0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertNotNull(groupedStackedBarRenderer0);
      
      LegendItemCollection legendItemCollection0 = groupedStackedBarRenderer0.getLegendItems();
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test03()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedAreaRenderer0);
      
      String string0 = "w";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertNotNull(combinedDomainCategoryPlot0);
      
      stackedAreaRenderer0.setPlot((CategoryPlot) combinedDomainCategoryPlot0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      
      LegendItemCollection legendItemCollection0 = stackedAreaRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(barRenderer3D0);
      
      ValueAxis valueAxis0 = barRenderer3D0.getRangeAxis(combinedDomainCategoryPlot0, int0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertNull(valueAxis0);
  }

  @Test
  public void test05()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      GanttRenderer ganttRenderer1 = (GanttRenderer)ganttRenderer0.clone();
      assertNotSame(ganttRenderer1, ganttRenderer0);
      assertNotSame(ganttRenderer0, ganttRenderer1);
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      assertTrue(ganttRenderer0.equals((Object)ganttRenderer1));
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer1.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer1.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer1.getShadowsVisible());
      assertEquals(false, ganttRenderer1.isDrawBarOutline());
      assertEquals(true, ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01D);
      assertEquals(0, ganttRenderer1.getRowCount());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer1.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(ganttRenderer1);
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      double double0 = defaultCategoryItemRenderer0.getItemLabelAnchorOffset();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(2.0, double0, 0.01D);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(boxAndWhiskerRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      int int0 = 0;
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertNull(categoryDataset0);
      
      boolean boolean0 = false;
      boxAndWhiskerRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, int0, int0, boolean0, double0, double0, boolean0);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
  }

  @Test
  public void test07()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      int int0 = 3;
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertNotNull(categoryCrosshairState0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try {
        waterfallBarRenderer0.updateCrosshairValues(categoryCrosshairState0, int0, int0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertNotNull(intervalBarRenderer0);
      
      boolean boolean0 = false;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertNotNull(lineRenderer3D0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      int int0 = 1295;
      CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.createState(plotRenderingInfo0);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertNotNull(categoryItemRendererState0);
      
      CategoryCrosshairState categoryCrosshairState0 = categoryItemRendererState0.getCrosshairState();
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertNull(categoryCrosshairState0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      intervalBarRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, boolean0, int0, int0, int0, int0, plotOrientation0);
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      StatisticalBarRenderer statisticalBarRenderer1 = new StatisticalBarRenderer();
      assertNotSame(statisticalBarRenderer1, statisticalBarRenderer0);
      assertTrue(statisticalBarRenderer1.equals((Object)statisticalBarRenderer0));
      assertEquals(0.0, statisticalBarRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer1.isDrawBarOutline());
      assertEquals(0.2, statisticalBarRenderer1.getItemMargin(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(3, statisticalBarRenderer1.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer1.getPassCount());
      assertEquals(true, statisticalBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer1.getBaseCreateEntities());
      assertEquals(1.0, statisticalBarRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer1.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer1.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer1.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer1.getRowCount());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer1.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer1.getBase(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer1.getColumnCount());
      assertEquals(4.0, statisticalBarRenderer1.getShadowYOffset(), 0.01D);
      assertNotNull(statisticalBarRenderer1);
      
      boolean boolean0 = statisticalBarRenderer0.equals((Object) statisticalBarRenderer1);
      assertNotSame(statisticalBarRenderer0, statisticalBarRenderer1);
      assertNotSame(statisticalBarRenderer1, statisticalBarRenderer0);
      assertTrue(statisticalBarRenderer0.equals((Object)statisticalBarRenderer1));
      assertTrue(statisticalBarRenderer1.equals((Object)statisticalBarRenderer0));
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer1.isDrawBarOutline());
      assertEquals(0.2, statisticalBarRenderer1.getItemMargin(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(3, statisticalBarRenderer1.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer1.getPassCount());
      assertEquals(true, statisticalBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer1.getBaseCreateEntities());
      assertEquals(1.0, statisticalBarRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer1.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer1.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer1.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer1.getRowCount());
      assertEquals(true, statisticalBarRenderer1.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer1.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer1.getBase(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer1.getColumnCount());
      assertEquals(4.0, statisticalBarRenderer1.getShadowYOffset(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(layeredBarRenderer0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertNotNull(groupedStackedBarRenderer0);
      
      boolean boolean0 = layeredBarRenderer0.equals((Object) groupedStackedBarRenderer0);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 3037;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(int0, int0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(legendItem0);
  }

  @Test
  public void test12()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(waterfallBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(scatterRenderer0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.bounds();
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      HorizontalAlignment horizontalAlignment0 = Title.DEFAULT_HORIZONTAL_ALIGNMENT;
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(horizontalAlignment0);
      
      VerticalAlignment verticalAlignment0 = VerticalAlignment.TOP;
      assertEquals("VerticalAlignment.TOP", verticalAlignment0.toString());
      assertNotNull(verticalAlignment0);
      
      FlowArrangement flowArrangement0 = new FlowArrangement(horizontalAlignment0, verticalAlignment0, (double) rectangle0.height, (double) rectangle0.height);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals("VerticalAlignment.TOP", verticalAlignment0.toString());
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(flowArrangement0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      LegendTitle legendTitle0 = new LegendTitle((LegendItemSource) waterfallBarRenderer0, (Arrangement) flowArrangement0, (Arrangement) flowArrangement0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals("VerticalAlignment.TOP", verticalAlignment0.toString());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(true, legendTitle0.isVisible());
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(legendTitle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertTrue(legendTitle0.visible);
      
      RectangleInsets rectangleInsets0 = legendTitle0.getLegendItemGraphicPadding();
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals("VerticalAlignment.TOP", verticalAlignment0.toString());
      assertNull(legendTitle0.getID());
      assertEquals(0.0, legendTitle0.getHeight(), 0.01D);
      assertEquals(1.0, legendTitle0.getContentXOffset(), 0.01D);
      assertEquals(true, legendTitle0.isVisible());
      assertEquals(true, legendTitle0.getNotify());
      assertEquals(1.0, legendTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, legendTitle0.getWidth(), 0.01D);
      assertEquals("HorizontalAlignment.CENTER", horizontalAlignment0.toString());
      assertNotNull(rectangleInsets0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertTrue(legendTitle0.visible);
      
      LengthAdjustmentType lengthAdjustmentType0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.CENTER;
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Point2D point2D0 = scatterRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer();
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(lineAndShapeRenderer0);
      
      boolean boolean0 = lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke();
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(boolean0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(plotChangeEvent0);
      
      JFreeChart jFreeChart0 = plotChangeEvent0.getChart();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(jFreeChart0);
      
      int int0 = 1;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, int0, int0, int0, int0, int0, int0, boolean0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(1, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(1, chartPanel0.getMinimumDrawHeight());
      assertEquals(1, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(chartPanel0);
      
      PlotOrientation plotOrientation0 = chartPanel0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(1, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(1, chartPanel0.getMinimumDrawHeight());
      assertEquals(1, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(plotOrientation0);
      
      JTextPane jTextPane0 = new JTextPane();
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertNotNull(jTextPane0);
      
      Rectangle rectangle0 = jTextPane0.getVisibleRect();
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01D);
      assertNotNull(valueMarker0);
      
      RectangleAnchor rectangleAnchor0 = valueMarker0.getLabelAnchor();
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01D);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)waterfallBarRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, valueMarker0.getValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(1, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getUseBuffer());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(1, chartPanel0.getMinimumDrawHeight());
      assertEquals(1, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(1, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(true, jTextPane0.isVisible());
      assertEquals(true, jTextPane0.isFocusCycleRoot());
      assertEquals(true, jTextPane0.isBackgroundSet());
      assertEquals(0, jTextPane0.countComponents());
      assertEquals(false, jTextPane0.isMinimumSizeSet());
      assertEquals(true, jTextPane0.isCursorSet());
      assertEquals(true, jTextPane0.isForegroundSet());
      assertEquals(false, jTextPane0.getIgnoreRepaint());
      assertEquals(0, jTextPane0.getComponentCount());
      assertEquals(false, jTextPane0.isPreferredSizeSet());
      assertEquals(false, jTextPane0.isShowing());
      assertEquals(true, jTextPane0.isEnabled());
      assertEquals(false, jTextPane0.isDisplayable());
      assertEquals(true, jTextPane0.isFontSet());
      assertEquals(true, jTextPane0.isFocusTraversalPolicySet());
      assertEquals(true, jTextPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextPane0.isValid());
      assertEquals(false, jTextPane0.isLightweight());
      assertEquals(false, jTextPane0.isMaximumSizeSet());
      assertEquals(false, jTextPane0.isFocusTraversalPolicyProvider());
      assertNotNull(point2D_Double0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(4.0, point2D_Double0.x, 0.01D);
      assertEquals((-4.0), point2D_Double0.y, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(statisticalBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      DateTitle dateTitle0 = new DateTitle();
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals(true, dateTitle0.isVisible());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertNull(dateTitle0.getID());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertNotNull(dateTitle0);
      assertTrue(dateTitle0.visible);
      
      Rectangle2D.Float rectangle2D_Float0 = (Rectangle2D.Float)dateTitle0.getBounds();
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals(true, dateTitle0.isVisible());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertNull(dateTitle0.getID());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      assertTrue(dateTitle0.visible);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      
      JList<StatisticalLineAndShapeRenderer> jList0 = new JList<StatisticalLineAndShapeRenderer>();
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isLightweight());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertNotNull(jList0);
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isLightweight());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      RectangleInsets rectangleInsets0 = null;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) dateTitle0.visible);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals(true, dateTitle0.isVisible());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertNull(dateTitle0.getID());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertNotNull(categoryMarker0);
      assertTrue(dateTitle0.visible);
      
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0, dateTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, dateTitle0.getHeight(), 0.01D);
      assertEquals(true, dateTitle0.isVisible());
      assertEquals(true, dateTitle0.getNotify());
      assertNull(dateTitle0.getToolTipText());
      assertEquals(1.0, dateTitle0.getContentXOffset(), 0.01D);
      assertEquals("14 February 2014", dateTitle0.getText());
      assertNull(dateTitle0.getID());
      assertEquals(2147483647, dateTitle0.getMaximumLinesToDisplay());
      assertEquals(0.0, dateTitle0.getWidth(), 0.01D);
      assertEquals(false, dateTitle0.getExpandToFitSpace());
      assertNull(dateTitle0.getURLText());
      assertNotNull(lengthAdjustmentType0);
      assertTrue(dateTitle0.visible);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.BOTTOM_LEFT;
      assertEquals("RectangleAnchor.BOTTOM_LEFT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Point2D point2D0 = statisticalBarRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Float0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertNotNull(stackedAreaRenderer0);
      
      Rectangle2D rectangle2D0 = null;
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.EXPAND;
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.RIGHT;
      assertEquals("RectangleAnchor.RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Point2D point2D0 = stackedAreaRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D0, rectangle2D0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertNotNull(categoryStepRenderer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = 456.4;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0, boolean0);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(456.4, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(456.4, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(456.4, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(456.4, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertNull(categoryPlot0);
      
      String string0 = "1cF^egG";
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertNotNull(xYErrorRenderer0);
      
      TimeSeries timeSeries0 = null;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = xYErrorRenderer0.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("1cF^egG", moduloAxis0.getLabel());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, moduloAxis0.isMinorTickMarksVisible());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, moduloAxis0.isInverted());
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertNotNull(moduloAxis0);
      
      double double1 = (-894.861);
      double double2 = 631.95359051;
      IntervalMarker intervalMarker0 = new IntervalMarker(double1, double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-894.861), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(631.95359051, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0, boolean0);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isValid());
      assertNotNull(jInternalFrame0);
      
      Rectangle rectangle0 = jInternalFrame0.bounds();
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try {
        categoryStepRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, (ValueAxis) moduloAxis0, (Marker) intervalMarker0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertNotNull(categoryStepRenderer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = 456.4;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0, boolean0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(456.4, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(456.4, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(456.4, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(456.4, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertNull(categoryPlot0);
      
      String string0 = "51c]^eGG";
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertNotNull(xYErrorRenderer0);
      
      TimeSeries timeSeries0 = null;
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      Range range0 = xYErrorRenderer0.findDomainBounds((XYDataset) timeSeriesCollection0);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      ModuloAxis moduloAxis0 = new ModuloAxis(string0, range0);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isInverted());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("51c]^eGG", moduloAxis0.getLabel());
      assertEquals(false, moduloAxis0.isMinorTickMarksVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertNotNull(moduloAxis0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(456.4, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(456.4, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0, boolean0);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(jInternalFrame0);
      
      Rectangle rectangle0 = jInternalFrame0.bounds();
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      categoryStepRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, (ValueAxis) moduloAxis0, (Marker) intervalMarker0, (Rectangle2D) rectangle0);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertNull(intervalMarker0.getLabel());
      assertEquals(456.4, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(456.4, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, moduloAxis0.isVerticalTickLabels());
      assertEquals(true, moduloAxis0.isVisible());
      assertEquals(false, moduloAxis0.isPositiveArrowVisible());
      assertEquals(0, moduloAxis0.getMinorTickCount());
      assertEquals(true, moduloAxis0.isAutoTickUnitSelection());
      assertNull(moduloAxis0.getLabelToolTip());
      assertEquals(1.0, moduloAxis0.getUpperBound(), 0.01D);
      assertEquals(true, moduloAxis0.isAxisLineVisible());
      assertEquals(true, moduloAxis0.isAutoRange());
      assertEquals(270.0, moduloAxis0.getDisplayStart(), 0.01D);
      assertEquals(true, moduloAxis0.isTickLabelsVisible());
      assertEquals(0.0, moduloAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLabelAngle(), 0.01D);
      assertEquals(90.0, moduloAxis0.getDisplayEnd(), 0.01D);
      assertEquals(true, moduloAxis0.getAutoRangeIncludesZero());
      assertEquals(false, moduloAxis0.isInverted());
      assertNull(moduloAxis0.getLabelURL());
      assertEquals(0.0, moduloAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, moduloAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, moduloAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, moduloAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, moduloAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, moduloAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, moduloAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, moduloAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, moduloAxis0.isTickMarksVisible());
      assertEquals(0.0F, moduloAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, moduloAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("51c]^eGG", moduloAxis0.getLabel());
      assertEquals(false, moduloAxis0.isMinorTickMarksVisible());
      assertEquals(true, moduloAxis0.getAutoRangeStickyZero());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(456.4, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(456.4, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
  }

  @Test
  public void test18()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      int int0 = 0;
      Graphics2D graphics2D0 = null;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertNotNull(stackedBarRenderer0);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer0.getPlot();
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertNull(categoryPlot0);
      
      ValueAxis valueAxis0 = null;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertNotNull(categoryMarker0);
      
      Ellipse2D.Float ellipse2D_Float0 = new Ellipse2D.Float();
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(ellipse2D_Float0);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Float0.getFrame();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
      
      statisticalBarRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, valueAxis0, (Marker) categoryMarker0, (Rectangle2D) rectangle2D_Double0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Float0.getMaxX(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0F, ellipse2D_Float0.height, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.x, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.y, 0.01F);
      assertEquals(0.0F, ellipse2D_Float0.width, 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertNotNull(levelRenderer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = (-9.0);
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeCategoryPlot0.getRangeAxis();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNotNull(numberAxis0);
      
      Rectangle rectangle0 = new Rectangle(int0, int0, int0, int0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      String string0 = "uEn'j";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, (double) int0, string0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-9.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("uEn'j", cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      Color color0 = (Color)cyclicNumberAxis0.getLabelPaint();
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-9.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("uEn'j", cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      levelRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) combinedRangeCategoryPlot0, (ValueAxis) numberAxis0, (Rectangle2D) rectangle0, double0, (Paint) color0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-9.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals((-9.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals("uEn'j", cyclicNumberAxis0.getLabel());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test20()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(levelRenderer0);
      
      Graphics2D graphics2D0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertNotNull(combinedRangeCategoryPlot0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)defaultCategoryItemRenderer0.getRangeAxis(combinedRangeCategoryPlot0, int0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNotNull(numberAxis0);
      
      Rectangle rectangle0 = new Rectangle(int0, int0, int0, int0);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      String string0 = "uEn'j";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0, string0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals("uEn'j", cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNotNull(cyclicNumberAxis0);
      
      Color color0 = (Color)cyclicNumberAxis0.getLabelPaint();
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals("uEn'j", cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      // Undeclared exception!
      try {
        levelRenderer0.drawRangeLine(graphics2D0, (CategoryPlot) combinedRangeCategoryPlot0, (ValueAxis) numberAxis0, (Rectangle2D) rectangle0, (double) rectangle0.height, (Paint) color0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = (-76);
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Rectangle2D rectangle2D0 = null;
      Color color0 = Color.green;
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      boolean boolean0 = true;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(boolean0, boolean0);
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(deviationRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)deviationRenderer0.getItemStroke(int0, int0, boolean0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(true, deviationRenderer0.getBaseShapesVisible());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(basicStroke0);
      
      // Undeclared exception!
      try {
        boxAndWhiskerRenderer0.drawDomainLine(graphics2D0, (CategoryPlot) combinedDomainCategoryPlot0, rectangle2D0, (double) int0, (Paint) color0, (Stroke) basicStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      Number[][] numberArray0 = new Number[4][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0, boolean0);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test23()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = ganttRenderer0.getLegendItemURLGenerator();
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(categorySeriesLabelGenerator0);
      
      // Undeclared exception!
      try {
        defaultCategoryItemRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 30;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedAreaRenderer0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(30.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(30.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertNotNull(stackedBarRenderer3D0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)stackedBarRenderer3D0.getLegendItemLabelGenerator();
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(30.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(30.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      stackedAreaRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(30.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(30.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-3732);
      boolean boolean0 = true;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      String string0 = "";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) boolean0, (double) int0, (double) int0);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals((-3732.0), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals((-3732.0), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertNotNull(categoryPointerAnnotation0);
      
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals((-3732.0), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals((-3732.0), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
  }

  @Test
  public void test26()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(boxAndWhiskerRenderer0);
      
      int int0 = 1192;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertNotNull(xYSeries0);
      
      Comparable comparable0 = xYSeries0.getKey();
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(1192, comparable0);
      assertNotNull(comparable0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertNotNull(lineRenderer3D0);
      
      boolean boolean0 = true;
      Color color0 = (Color)lineRenderer3D0.getItemPaint(int0, int0, boolean0);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertNotNull(color0);
      
      BasicStroke basicStroke0 = (BasicStroke)Axis.DEFAULT_AXIS_LINE_STROKE;
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) comparable0, (double) int0, (Comparable) comparable0, (double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(1192.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(1192.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(true, categoryLineAnnotation0.getNotify());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertNotNull(categoryLineAnnotation0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boxAndWhiskerRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(1192.0, categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals(1192.0, categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(true, categoryLineAnnotation0.getNotify());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test
  public void test27()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertNotNull(layeredBarRenderer0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedAreaRenderer0);
      
      boolean boolean0 = stackedAreaRenderer0.equals((Object) layeredBarRenderer0);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertFalse(boolean0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = (-1970);
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator(int0, int0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(categoryURLGenerator0);
      
      layeredBarRenderer0.setBaseURLGenerator(categoryURLGenerator0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      boolean boolean0 = false;
      CategoryURLGenerator categoryURLGenerator0 = defaultCategoryItemRenderer0.getBaseURLGenerator();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertNull(categoryURLGenerator0);
      
      groupedStackedBarRenderer0.setSeriesURLGenerator(int0, categoryURLGenerator0, boolean0);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(minMaxCategoryRenderer0);
      
      boolean boolean1 = minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint();
      assertFalse(boolean1 == boolean0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertFalse(boolean1);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertNotNull(stackedBarRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer0.getBaseToolTipGenerator();
      assertFalse(boolean0 == boolean1);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertNull(categoryToolTipGenerator0);
      
      stackedBarRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1192;
      boolean boolean0 = true;
      boolean boolean1 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = groupedStackedBarRenderer0.getToolTipGenerator(int0, int0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNull(categoryToolTipGenerator0);
      
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
  }

  @Test
  public void test31()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = (-3);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertNotNull(defaultCategoryItemRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getItemLabelGenerator(int0, int0, boolean0);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertNull(categoryItemLabelGenerator0);
      
      boolean boolean1 = false;
      defaultCategoryItemRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 0;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(waterfallBarRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = waterfallBarRenderer0.getSeriesItemLabelGenerator(int0);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(categoryItemLabelGenerator0);
      
      categoryStepRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0, boolean0);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
  }

  @Test
  public void test33()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertNotNull(levelRenderer0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertNotNull(scatterRenderer0);
      
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertNull(categoryPlot0);
      
      // Undeclared exception!
      try {
        levelRenderer0.setPlot(categoryPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedAreaRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(lineRenderer3D0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemToolTipGenerator();
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(categorySeriesLabelGenerator0);
      
      lineRenderer3D0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 0;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertNotNull(stackedAreaRenderer0);
      
      String string0 = "w";
      ExtendedCategoryAxis extendedCategoryAxis0 = new ExtendedCategoryAxis(string0);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(extendedCategoryAxis0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) extendedCategoryAxis0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(combinedDomainCategoryPlot0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertNotNull(defaultTreeCellRenderer0);
      
      Icon icon0 = defaultTreeCellRenderer0.getIcon();
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertNull(icon0);
      
      MatteBorder matteBorder0 = new MatteBorder(int0, int0, int0, int0, icon0);
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertNotNull(matteBorder0);
      
      CompoundBorder compoundBorder0 = new CompoundBorder((Border) matteBorder0, (Border) matteBorder0);
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertNotNull(compoundBorder0);
      
      Rectangle rectangle0 = compoundBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, int0, int0, int0, int0);
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      RectangleEdge rectangleEdge0 = combinedDomainCategoryPlot0.getRangeAxisEdge(int0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isTickLabelsVisible());
      assertEquals(0.05, extendedCategoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, extendedCategoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, extendedCategoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, extendedCategoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, extendedCategoryAxis0.isMinorTickMarksVisible());
      assertEquals(1, extendedCategoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(0.2, extendedCategoryAxis0.getCategoryMargin(), 0.01D);
      assertNull(extendedCategoryAxis0.getLabelToolTip());
      assertEquals(0.0, extendedCategoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, extendedCategoryAxis0.isVisible());
      assertEquals(0.05, extendedCategoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, extendedCategoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(extendedCategoryAxis0.getLabelURL());
      assertEquals(0.0, extendedCategoryAxis0.getFixedDimension(), 0.01D);
      assertEquals("w", extendedCategoryAxis0.getLabel());
      assertEquals(true, extendedCategoryAxis0.isTickMarksVisible());
      assertEquals(true, extendedCategoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, extendedCategoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, extendedCategoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try {
        double double0 = stackedAreaRenderer0.getItemMiddle((Comparable) int0, (Comparable) int0, (CategoryDataset) defaultKeyedValues2DDataset0, (CategoryAxis) extendedCategoryAxis0, (Rectangle2D) rectangle0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      CategoryPointerAnnotation categoryPointerAnnotation0 = null;
      // Undeclared exception!
      try {
        waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertNotNull(minMaxCategoryRenderer0);
      
      minMaxCategoryRenderer0.removeAnnotations();
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
  }

  @Test
  public void test38()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertNotNull(minMaxCategoryRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = null;
      minMaxCategoryRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
  }

  @Test
  public void test39()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertNotNull(statisticalBarRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      // Undeclared exception!
      try {
        CategoryAxis categoryAxis0 = statisticalBarRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertNotNull(stackedBarRenderer3D0);
      
      int int0 = stackedBarRenderer3D0.getColumnCount();
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, int0);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 3037;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      boolean boolean0 = statisticalBarRenderer0.isSeriesVisible(int0);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertTrue(boolean0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertNotNull(categoryStepRenderer0);
      
      ValueAxis valueAxis0 = null;
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot(valueAxis0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertNull(categoryDataset0);
      
      Range range0 = categoryStepRenderer0.findRangeBounds(categoryDataset0);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertNull(range0);
  }

  @Test
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      LineAndShapeRenderer lineAndShapeRenderer0 = new LineAndShapeRenderer(boolean0, boolean0);
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, lineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(3, lineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, lineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, lineAndShapeRenderer0.getColumnCount());
      assertEquals(2, lineAndShapeRenderer0.getPassCount());
      assertEquals(true, lineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, lineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, lineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, lineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, lineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, lineAndShapeRenderer0.getRowCount());
      assertNotNull(lineAndShapeRenderer0);
      
      Graphics2D graphics2D0 = null;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertNotNull(scatterRenderer0);
      
      CategoryPlot categoryPlot0 = scatterRenderer0.getPlot();
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertNull(categoryPlot0);
      
      Rectangle2D rectangle2D0 = null;
      // Undeclared exception!
      try {
        lineAndShapeRenderer0.drawBackground(graphics2D0, categoryPlot0, rectangle2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 1192;
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedBarRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = statisticalLineAndShapeRenderer0.getURLGenerator(int0, int0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertNull(categoryURLGenerator0);
      
      stackedBarRenderer0.setBaseURLGenerator(categoryURLGenerator0);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
  }

  @Test
  public void test44()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertNotNull(scatterRenderer0);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = null;
      String string0 = "YhQ0;v\\yk?pa";
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(string0);
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertNotNull(mockJFileChooser0);
      
      Rectangle rectangle0 = mockJFileChooser0.getBounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, mockJFileChooser0.isValid());
      assertEquals(false, mockJFileChooser0.isFontSet());
      assertEquals(false, mockJFileChooser0.isPreferredSizeSet());
      assertEquals(false, mockJFileChooser0.isMinimumSizeSet());
      assertEquals(false, mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(false, mockJFileChooser0.isDisplayable());
      assertEquals(false, mockJFileChooser0.isLightweight());
      assertEquals(false, mockJFileChooser0.getIgnoreRepaint());
      assertEquals(false, mockJFileChooser0.isBackgroundSet());
      assertEquals(false, mockJFileChooser0.isShowing());
      assertEquals(true, mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, mockJFileChooser0.isForegroundSet());
      assertEquals(4, mockJFileChooser0.getComponentCount());
      assertEquals(4, mockJFileChooser0.countComponents());
      assertEquals(false, mockJFileChooser0.isMaximumSizeSet());
      assertEquals(false, mockJFileChooser0.isCursorSet());
      assertEquals(true, mockJFileChooser0.isVisible());
      assertEquals(false, mockJFileChooser0.isFocusCycleRoot());
      assertEquals(true, mockJFileChooser0.isEnabled());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      // Undeclared exception!
      try {
        scatterRenderer0.drawOutline(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = 441.483223898745;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0, boolean0);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(441.483223898745, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(441.483223898745, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      int int0 = 0;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertNotNull(ganttRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertNull(categoryToolTipGenerator0);
      
      stackedBarRenderer3D0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(441.483223898745, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(441.483223898745, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
  }

  @Test
  public void test46()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(ganttRenderer0);
      
      int int0 = ganttRenderer0.getRowCount();
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, int0);
  }

  @Test
  public void test47()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(layeredBarRenderer0);
      
      String string0 = "Null 'generator' argument.";
      double double0 = 2.0;
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) string0, double0);
      assertEquals(2.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("Null 'generator' argument.", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertNotNull(categoryTextAnnotation0);
      
      boolean boolean0 = layeredBarRenderer0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("Null 'generator' argument.", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertFalse(boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedBarRenderer3D0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertNotNull(levelRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = levelRenderer0.getSeriesURLGenerator(int0);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertNull(categoryURLGenerator0);
      
      stackedBarRenderer3D0.setSeriesURLGenerator(int0, categoryURLGenerator0);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test49()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertNotNull(ganttRenderer0);
      
      boolean boolean0 = false;
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 2983;
      CategoryToolTipGenerator categoryToolTipGenerator0 = defaultCategoryItemRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertNull(categoryToolTipGenerator0);
      
      ganttRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
  }

  @Test
  public void test50()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(minMaxCategoryRenderer0);
      
      int int0 = minMaxCategoryRenderer0.hashCode();
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1387400799, int0);
  }

  @Test
  public void test51()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(intervalBarRenderer0);
      
      int int0 = 30;
      boolean boolean0 = false;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = groupedStackedBarRenderer0.getItemLabelGenerator(int0, int0, boolean0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(categoryItemLabelGenerator0);
      
      intervalBarRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test52()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(layeredBarRenderer0);
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertNotNull(levelRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = levelRenderer0.getBaseItemLabelGenerator();
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertNull(categoryItemLabelGenerator0);
      
      layeredBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
  }
}
