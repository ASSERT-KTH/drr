/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:37:42 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JPasswordField;
import javax.swing.JViewport;
import javax.swing.border.MatteBorder;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryLineAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.PeriodAxisLabelInfo;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.StandardCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;


public class AbstractCategoryItemRendererEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      
      CategoryPlot categoryPlot0 = null;
      Graphics2D graphics2D0 = null;
      JList<BarRenderer> jList0 = new JList<BarRenderer>();
      assertNotNull(jList0);
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(1, jList0.countComponents());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.isMinimumSizeSet());
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(1, jList0.countComponents());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(rectangle0.x);
      assertNull(categoryAxis0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(1, jList0.countComponents());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      
      NumberAxis numberAxis0 = (NumberAxis)groupedStackedBarRenderer0.getRangeAxis(combinedRangeCategoryPlot0, rectangle0.y);
      assertNotNull(numberAxis0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(1, jList0.countComponents());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(rectangle0.width);
      assertNull(categoryDataset0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(1, jList0.countComponents());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      boolean boolean0 = ganttRenderer0.getBaseCreateEntities();
      assertTrue(boolean0);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      
      CategoryItemRendererState categoryItemRendererState0 = null;
      // Undeclared exception!
      try {
        Rectangle2D rectangle2D0 = boxAndWhiskerRenderer0.createHotSpotBounds(graphics2D0, (Rectangle2D) rectangle0, categoryPlot0, categoryAxis0, (ValueAxis) numberAxis0, categoryDataset0, rectangle0.x, rectangle0.height, boolean0, categoryItemRendererState0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)chartRenderingInfo0.getEntityCollection();
      assertNotNull(standardEntityCollection0);
      assertEquals(0, standardEntityCollection0.getEntityCount());
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertNotNull(defaultTreeCellRenderer0);
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      
      Rectangle rectangle0 = defaultTreeCellRenderer0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, defaultTreeCellRenderer0.isShowing());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTreeCellRenderer0.isFontSet());
      assertEquals(false, defaultTreeCellRenderer0.isCursorSet());
      assertEquals(0, defaultTreeCellRenderer0.countComponents());
      assertEquals(true, defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTreeCellRenderer0.isVisible());
      assertEquals(false, defaultTreeCellRenderer0.isValid());
      assertEquals(false, defaultTreeCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.isDisplayable());
      assertEquals(0, defaultTreeCellRenderer0.getComponentCount());
      assertEquals(false, defaultTreeCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTreeCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTreeCellRenderer0.isLightweight());
      assertEquals(true, defaultTreeCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTreeCellRenderer0.isEnabled());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        statisticalBarRenderer0.addEntity(standardEntityCollection0, rectangle0, categoryDataset0, rectangle0.width, rectangle0.y, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      
      LegendItemCollection legendItemCollection0 = ganttRenderer0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-387);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      
      ValueAxis valueAxis0 = layeredBarRenderer0.getRangeAxis(combinedDomainCategoryPlot0, int0);
      assertNull(valueAxis0);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertNotNull(stackedAreaRenderer0);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      
      StackedAreaRenderer stackedAreaRenderer1 = (StackedAreaRenderer)stackedAreaRenderer0.clone();
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertTrue(stackedAreaRenderer0.equals((Object)stackedAreaRenderer1));
      assertNotNull(stackedAreaRenderer1);
      assertEquals(false, stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer1.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisible());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertEquals(true, stackedAreaRenderer1.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
  }

  @Test
  public void test05()  throws Throwable  {
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertNotNull(barRenderer3D0);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      
      Graphics2D graphics2D0 = null;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertNotNull(fastScatterPlot0);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      PlotOrientation plotOrientation0 = fastScatterPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 221;
      boolean boolean0 = true;
      barRenderer3D0.drawItemLabel(graphics2D0, plotOrientation0, taskSeriesCollection0, int0, int0, boolean0, int0, int0, boolean0);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertNull(fastScatterPlot0.getNoDataMessage());
  }

  @Test
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      
      CategoryCrosshairState categoryCrosshairState0 = null;
      double double0 = 4.0;
      int int0 = 3;
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertNotNull(thermometerPlot0);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      
      levelRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, boolean0, double0, int0, int0, double0, plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertNotNull(categoryCrosshairState0);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      
      Comparable<CategoryStepRenderer> comparable0 = null;
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.updateCrosshairValues(categoryCrosshairState0, comparable0, comparable0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      
      int int0 = (-18);
      boolean boolean0 = false;
      Color color0 = (Color)levelRenderer0.getItemPaint(int0, int0, boolean0);
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      assertNotNull(ganttRenderer1);
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer1.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01D);
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getShadowsVisible());
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer1.getBaseCreateEntities());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01D);
      assertEquals(false, ganttRenderer1.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01D);
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(true, ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotSame(ganttRenderer1, ganttRenderer0);
      
      boolean boolean0 = ganttRenderer0.equals((Object) ganttRenderer1);
      assertTrue(boolean0);
      assertTrue(ganttRenderer0.equals((Object)ganttRenderer1));
      assertTrue(ganttRenderer1.equals((Object)ganttRenderer0));
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer1.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01D);
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getShadowsVisible());
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer1.getBaseCreateEntities());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01D);
      assertEquals(false, ganttRenderer1.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01D);
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(true, ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotSame(ganttRenderer0, ganttRenderer1);
      assertNotSame(ganttRenderer1, ganttRenderer0);
  }

  @Test
  public void test10()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      
      int int0 = (-387);
      SystemColor systemColor0 = SystemColor.infoText;
      assertNotNull(systemColor0);
      assertEquals("java.awt.SystemColor[i=25]", systemColor0.toString());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(-16777216, systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-387.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-387.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-387.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      
      CategoryLineAnnotation categoryLineAnnotation0 = new CategoryLineAnnotation((Comparable) int0, (double) int0, (Comparable) int0, (double) int0, (Paint) systemColor0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertNotNull(categoryLineAnnotation0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-387.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-387.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-387.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals("java.awt.SystemColor[i=25]", systemColor0.toString());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(-16777216, systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-387.0), categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals((-387.0), categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(true, categoryLineAnnotation0.getNotify());
      
      Layer layer0 = Layer.FOREGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      
      ganttRenderer0.addAnnotation((CategoryAnnotation) categoryLineAnnotation0, layer0);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals((-387.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-387.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals((-387.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals("java.awt.SystemColor[i=25]", systemColor0.toString());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getBlue());
      assertEquals(-16777216, systemColor0.getRGB());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals((-387.0), categoryLineAnnotation0.getValue2(), 0.01D);
      assertEquals((-387.0), categoryLineAnnotation0.getValue1(), 0.01D);
      assertEquals(true, categoryLineAnnotation0.getNotify());
      
      GanttRenderer ganttRenderer1 = new GanttRenderer();
      assertFalse(ganttRenderer1.equals((Object)ganttRenderer0));
      assertNotNull(ganttRenderer1);
      assertEquals(true, ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer1.isDrawBarOutline());
      assertEquals(true, ganttRenderer1.getShadowsVisible());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01D);
      assertEquals(false, ganttRenderer1.getIncludeBaseInRange());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getBaseCreateEntities());
      assertEquals(true, ganttRenderer1.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertNotSame(ganttRenderer1, ganttRenderer0);
      
      boolean boolean0 = ganttRenderer0.equals((Object) ganttRenderer1);
      assertFalse(boolean0);
      assertFalse(ganttRenderer1.equals((Object)ganttRenderer0));
      assertFalse(ganttRenderer0.equals((Object)ganttRenderer1));
      assertEquals(true, ganttRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer1.getColumnCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer1.isDrawBarOutline());
      assertEquals(true, ganttRenderer1.getShadowsVisible());
      assertEquals(0, ganttRenderer1.getRowCount());
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer1.getBase(), 0.01D);
      assertEquals(false, ganttRenderer1.getIncludeBaseInRange());
      assertEquals(1, ganttRenderer1.getPassCount());
      assertEquals(1.0, ganttRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, ganttRenderer1.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer1.getBaseSeriesVisible());
      assertEquals(3, ganttRenderer1.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer1.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, ganttRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer1.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer1.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer1.getBaseCreateEntities());
      assertEquals(true, ganttRenderer1.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertNotSame(ganttRenderer1, ganttRenderer0);
      assertNotSame(ganttRenderer0, ganttRenderer1);
  }

  @Test
  public void test11()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      
      int int0 = 221;
      LegendItem legendItem0 = levelRenderer0.getLegendItem(int0, int0);
      assertNull(legendItem0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = (-323);
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      
      Color color0 = (Color)defaultCategoryItemRenderer0.getBasePaint();
      assertNotNull(color0);
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      Ellipse2D.Double ellipse2D_Double0 = new Ellipse2D.Double((double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(ellipse2D_Double0);
      assertEquals((-484.5), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-646.0), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-484.5), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-646.0), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.height, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.x, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.width, 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ellipse2D_Double0.getFrame();
      assertNotNull(rectangle2D_Double0);
      assertEquals((-484.5), ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals((-646.0), ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-484.5), ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals((-646.0), ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-646.0), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-646.0), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-484.5), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-484.5), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.height, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.x, 0.01D);
      assertEquals((-323.0), ellipse2D_Double0.width, 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.height, 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.width, 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.x, 0.01D);
      assertEquals((-323.0), rectangle2D_Double0.y, 0.01D);
      
      String string0 = "'\"O&K";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertNotNull(logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals("'\"O&K", logarithmicAxis0.getLabel());
      
      RectangleInsets rectangleInsets0 = logarithmicAxis0.getTickLabelInsets();
      assertNotNull(rectangleInsets0);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals("'\"O&K", logarithmicAxis0.getLabel());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      assertNotNull(lengthAdjustmentType0);
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      
      BasicStroke basicStroke0 = (BasicStroke)Plot.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(categoryMarker0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      
      RectangleAnchor rectangleAnchor0 = categoryMarker0.getLabelAnchor();
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(1, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(0, color0.getRed());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      
      // Undeclared exception!
      try {
        Point2D point2D0 = stackedBarRenderer3D0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      double double0 = 1244.313;
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      
      int int0 = 45;
      Graphics2D graphics2D0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, (double) int0, (double) int0);
      assertNotNull(line2D_Double0);
      assertEquals(45.0, line2D_Double0.y2, 0.01D);
      assertEquals(45.0, line2D_Double0.x2, 0.01D);
      assertEquals(1244.313, line2D_Double0.x1, 0.01D);
      assertEquals(1244.313, line2D_Double0.y1, 0.01D);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(645.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(45.0, rectangle0.getX(), 0.01D);
      assertEquals(1245.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=45,y=45,width=1200,height=1200]", rectangle0.toString());
      assertEquals(45.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1200.0, rectangle0.getHeight(), 0.01D);
      assertEquals(45.0, rectangle0.getMinX(), 0.01D);
      assertEquals(45.0, rectangle0.getY(), 0.01D);
      assertEquals(1200.0, rectangle0.getWidth(), 0.01D);
      assertEquals(645.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(1245.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(45, rectangle0.x);
      assertEquals(45, rectangle0.y);
      assertEquals(1200, rectangle0.width);
      assertEquals(1200, rectangle0.height);
      assertEquals(45.0, line2D_Double0.y2, 0.01D);
      assertEquals(45.0, line2D_Double0.x2, 0.01D);
      assertEquals(1244.313, line2D_Double0.x1, 0.01D);
      assertEquals(1244.313, line2D_Double0.y1, 0.01D);
      
      RectangleInsets rectangleInsets0 = PeriodAxisLabelInfo.DEFAULT_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.NO_CHANGE;
      assertNotNull(lengthAdjustmentType0);
      assertEquals("NO_CHANGE", lengthAdjustmentType0.toString());
      
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.LEFT;
      assertNotNull(rectangleAnchor0);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor0.toString());
      
      Point2D.Double point2D_Double0 = (Point2D.Double)lineRenderer3D0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      assertNotNull(point2D_Double0);
      assertEquals("RectangleAnchor.LEFT", rectangleAnchor0.toString());
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals("NO_CHANGE", lengthAdjustmentType0.toString());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(645.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(45.0, rectangle0.getX(), 0.01D);
      assertEquals(1245.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=45,y=45,width=1200,height=1200]", rectangle0.toString());
      assertEquals(45.0, rectangle0.getMinY(), 0.01D);
      assertEquals(1200.0, rectangle0.getHeight(), 0.01D);
      assertEquals(45.0, rectangle0.getMinX(), 0.01D);
      assertEquals(45.0, rectangle0.getY(), 0.01D);
      assertEquals(1200.0, rectangle0.getWidth(), 0.01D);
      assertEquals(645.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(1245.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(645.0, point2D_Double0.y, 0.01D);
      assertEquals(47.0, point2D_Double0.x, 0.01D);
      assertEquals(45, rectangle0.x);
      assertEquals(45, rectangle0.y);
      assertEquals(1200, rectangle0.width);
      assertEquals(1200, rectangle0.height);
      assertEquals(45.0, line2D_Double0.y2, 0.01D);
      assertEquals(45.0, line2D_Double0.x2, 0.01D);
      assertEquals(1244.313, line2D_Double0.x1, 0.01D);
      assertEquals(1244.313, line2D_Double0.y1, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      
      boolean boolean1 = statisticalLineAndShapeRenderer0.getDrawOutlines();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = null;
      int int0 = 3482;
      Color color0 = Color.GREEN;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(0, color0.getBlue());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      
      String string0 = "RectangleEdge.LEFT";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNotNull(periodAxis0);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("RectangleEdge.LEFT", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertNotNull(xYBlockRenderer0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      
      XYToolTipGenerator xYToolTipGenerator0 = xYBlockRenderer0.getSeriesToolTipGenerator(int0);
      assertNull(xYToolTipGenerator0);
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      
      BasicStroke basicStroke0 = (BasicStroke)cyclicXYItemRenderer0.getItemOutlineStroke(int0, int0, boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(basicStroke0);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) color0, (Stroke) basicStroke0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(valueMarker0);
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(3482.0, valueMarker0.getValue(), 0.01D);
      
      Rectangle2D rectangle2D0 = null;
      ganttRenderer0.drawRangeMarker(graphics2D0, categoryPlot0, (ValueAxis) periodAxis0, (Marker) valueMarker0, rectangle2D0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("RectangleEdge.LEFT", periodAxis0.getLabel());
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(3482.0, valueMarker0.getValue(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = null;
      int int0 = 3482;
      Color color0 = Color.GREEN;
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      
      MatteBorder matteBorder0 = new MatteBorder(int0, int0, int0, int0, color0);
      assertNotNull(matteBorder0);
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      
      Component component0 = null;
      Rectangle rectangle0 = matteBorder0.getInteriorRectangle(component0, int0, int0, int0, int0);
      assertNotNull(rectangle0);
      assertEquals(6964.0, rectangle0.getY(), 0.01D);
      assertEquals(6964.0, rectangle0.getX(), 0.01D);
      assertEquals((-3482.0), rectangle0.getHeight(), 0.01D);
      assertEquals(5223.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=6964,y=6964,width=-3482,height=-3482]", rectangle0.toString());
      assertEquals(3482.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(6964.0, rectangle0.getMinX(), 0.01D);
      assertEquals((-3482.0), rectangle0.getWidth(), 0.01D);
      assertEquals(3482.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(5223.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(6964.0, rectangle0.getMinY(), 0.01D);
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(6964, rectangle0.x);
      assertEquals(6964, rectangle0.y);
      assertEquals((-3482), rectangle0.width);
      assertEquals((-3482), rectangle0.height);
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        statisticalLineAndShapeRenderer0.drawDomainLine(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0, (double) int0, (Paint) color0, stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Color color0 = (Color)Plot.DEFAULT_BACKGROUND_PAINT;
      assertNotNull(color0);
      assertEquals(192, color0.getRed());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertNotNull(categoryStepRenderer0);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      
      Graphics2D graphics2D0 = null;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertNotNull(stackedBarRenderer0);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      
      CategoryPlot categoryPlot0 = stackedBarRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertNotNull(defaultCaret0);
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertNotNull(xYLine3DRenderer0);
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)xYLine3DRenderer0.getItemStroke(defaultCaret0.height, defaultCaret0.height, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0, defaultCaret0.getY(), 0.01D);
      assertEquals(true, defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01D);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01D);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.height);
      
      // Undeclared exception!
      try {
        categoryStepRenderer0.drawDomainLine(graphics2D0, categoryPlot0, (Rectangle2D) defaultCaret0, (double) defaultCaret0.width, (Paint) color0, (Stroke) basicStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      
      Number[][] numberArray0 = new Number[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = ganttRenderer0.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
  }

  @Test
  public void test18()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      Range range0 = lineRenderer3D0.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test19()  throws Throwable  {
      Graphics2D graphics2D0 = null;
      JList<BarRenderer> jList0 = new JList<BarRenderer>();
      assertNotNull(jList0);
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      
      Rectangle rectangle0 = jList0.getVisibleRect();
      assertNotNull(rectangle0);
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(false, jList0.isShowing());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isLightweight());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(true, jList0.isEnabled());
      assertEquals(false, jList0.isValid());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      // Undeclared exception!
      try {
        CategoryItemRendererState categoryItemRendererState0 = lineRenderer3D0.initialise(graphics2D0, (Rectangle2D) rectangle0, (CategoryPlot) combinedRangeCategoryPlot0, (CategoryDataset) taskSeriesCollection0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertNotNull(areaRenderer0);
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(0, areaRenderer0.getColumnCount());
      
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertNotNull(intervalBarRenderer0);
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = intervalBarRenderer0.getLegendItemToolTipGenerator();
      assertNull(categorySeriesLabelGenerator0);
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      
      // Undeclared exception!
      try {
        areaRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)boxAndWhiskerRenderer0.getLegendItemLabelGenerator();
      assertNotNull(standardCategorySeriesLabelGenerator0);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      
      stackedBarRenderer3D0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
  }

  @Test
  public void test22()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      
      String string0 = "4iYH}NvI+Yil}2I#yIO";
      double double0 = 0.0;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("4iYH}NvI+Yil}2I#yIO", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      statisticalBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(0.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals("4iYH}NvI+Yil}2I#yIO", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
  }

  @Test
  public void test23()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      
      boolean boolean0 = stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke();
      assertFalse(boolean0);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getBaseURLGenerator();
      assertNull(categoryURLGenerator0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      
      waterfallBarRenderer0.setBaseURLGenerator(categoryURLGenerator0, boolean0);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
  }

  @Test
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 1737;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      
      boolean boolean1 = stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getBaseURLGenerator();
      assertTrue(boolean1 == boolean0);
      assertNull(categoryURLGenerator0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      
      stackedBarRenderer3D0.setSeriesURLGenerator(int0, categoryURLGenerator0, boolean0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertNotNull(areaRenderer0);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      
      int int0 = 4050;
      boolean boolean0 = false;
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertNull(categoryToolTipGenerator0);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      
      areaRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0, boolean0);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
  }

  @Test
  public void test26()  throws Throwable  {
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      
      int int0 = 0;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = groupedStackedBarRenderer0.getSeriesToolTipGenerator(int0);
      assertNull(categoryToolTipGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      
      boolean boolean0 = false;
      stackedBarRenderer3D0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0, boolean0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
  }

  @Test
  public void test27()  throws Throwable  {
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertNotNull(areaRenderer0);
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      
      int int0 = 4050;
      boolean boolean0 = false;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = groupedStackedBarRenderer0.getItemLabelGenerator(int0, int0, boolean0);
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      
      areaRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, boolean0);
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 4050;
      boolean boolean0 = false;
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertNotNull(stackedAreaRenderer0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = groupedStackedBarRenderer0.getItemLabelGenerator(int0, int0, boolean0);
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      
      stackedAreaRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0, boolean0);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
  }

  @Test
  public void test29()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertNotNull(layeredBarRenderer0);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      
      int int0 = (-894);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals((-894.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals((-894.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      
      int int1 = 2235;
      Graphics2D graphics2D0 = null;
      String string0 = "Null 'plot' argument.";
      JPasswordField jPasswordField0 = new JPasswordField(string0, int1);
      assertFalse(int1 == int0);
      assertNotNull(jPasswordField0);
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isEnabled());
      
      Rectangle rectangle0 = jPasswordField0.bounds();
      assertFalse(int1 == int0);
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertFalse(int0 == int1);
      assertNull(categoryPlot0);
      assertEquals((-894.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals((-894.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      CategoryDataset categoryDataset0 = multiplePiePlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(true, multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertNotNull(xYErrorRenderer0);
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      
      XYPlot xYPlot0 = xYErrorRenderer0.getPlot();
      assertNull(xYPlot0);
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      XYDataset xYDataset0 = combinedDomainXYPlot0.getDataset();
      assertNull(xYDataset0);
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      XYItemRendererState xYItemRendererState0 = vectorRenderer0.initialise(graphics2D0, (Rectangle2D) rectangle0, xYPlot0, xYDataset0, plotRenderingInfo0);
      assertFalse(int1 == int0);
      assertNotNull(xYItemRendererState0);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(true, xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      PlotRenderingInfo plotRenderingInfo1 = xYItemRendererState0.getInfo();
      assertFalse(int1 == int0);
      assertNull(plotRenderingInfo1);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, xYItemRendererState0.getFirstItemIndex());
      assertEquals(0, xYItemRendererState0.getLastItemIndex());
      assertEquals(true, xYItemRendererState0.getProcessVisibleItemsOnly());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, jPasswordField0.isValid());
      assertEquals(true, jPasswordField0.isForegroundSet());
      assertEquals(true, jPasswordField0.isCursorSet());
      assertEquals(true, jPasswordField0.isFontSet());
      assertEquals(0, jPasswordField0.countComponents());
      assertEquals(0, jPasswordField0.getComponentCount());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicySet());
      assertEquals(false, jPasswordField0.isFocusCycleRoot());
      assertEquals(false, jPasswordField0.isPreferredSizeSet());
      assertEquals(true, jPasswordField0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPasswordField0.isMinimumSizeSet());
      assertEquals(true, jPasswordField0.isVisible());
      assertEquals(false, jPasswordField0.isLightweight());
      assertEquals(true, jPasswordField0.isBackgroundSet());
      assertEquals(false, jPasswordField0.isShowing());
      assertEquals(false, jPasswordField0.getIgnoreRepaint());
      assertEquals(false, jPasswordField0.isDisplayable());
      assertEquals(false, jPasswordField0.isMaximumSizeSet());
      assertEquals(false, jPasswordField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jPasswordField0.isEnabled());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      // Undeclared exception!
      try {
        CategoryItemRendererState categoryItemRendererState0 = layeredBarRenderer0.initialise(graphics2D0, (Rectangle2D) rectangle0, categoryPlot0, categoryDataset0, plotRenderingInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertNotNull(boxAndWhiskerRenderer0);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = statisticalBarRenderer0.getLegendItemURLGenerator();
      assertNull(categorySeriesLabelGenerator0);
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      
      boxAndWhiskerRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertNotNull(categoryStepRenderer0);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getSeriesURLGenerator(int0);
      assertNull(categoryURLGenerator0);
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
  }

  @Test
  public void test32()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertNotNull(rectangle2D_Float0);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertNotNull(waterfallBarRenderer0);
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) rectangle2D_Float0.height);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      int int0 = 759;
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis();
      assertNull(categoryAxis0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      
      RectangleEdge rectangleEdge0 = null;
      // Undeclared exception!
      try {
        double double0 = waterfallBarRenderer0.getItemMiddle((Comparable) rectangle2D_Float0.y, (Comparable) rectangle2D_Float0.width, categoryDataset0, categoryAxis0, (Rectangle2D) rectangle2D_Float0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertNotNull(stackedBarRenderer0);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      
      CategoryAnnotation categoryAnnotation0 = null;
      // Undeclared exception!
      try {
        stackedBarRenderer0.addAnnotation(categoryAnnotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertNotNull(categoryStepRenderer0);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      
      categoryStepRenderer0.removeAnnotations();
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test
  public void test35()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)levelRenderer0.getLegendItemLabelGenerator();
      assertNotNull(standardCategorySeriesLabelGenerator0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      
      groupedStackedBarRenderer0.setLegendItemToolTipGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test
  public void test36()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = ganttRenderer0.getBaseToolTipGenerator();
      assertNull(categoryToolTipGenerator0);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
  }

  @Test
  public void test37()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertNotNull(stackedAreaRenderer0);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertNotNull(combinedRangeCategoryPlot0);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      
      Number[][] numberArray0 = new Number[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      
      // Undeclared exception!
      try {
        CategoryAxis categoryAxis0 = stackedAreaRenderer0.getDomainAxis(combinedRangeCategoryPlot0, defaultIntervalCategoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'index'.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = BarRenderer.getDefaultShadowsVisible();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(0, int0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
  }

  @Test
  public void test39()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      
      CategoryAxis categoryAxis0 = null;
      int int0 = 56;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot(categoryAxis0);
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertNull(categoryDataset0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      
      String string0 = "[";
      PeriodAxis periodAxis0 = new PeriodAxis(string0);
      assertNotNull(periodAxis0);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("[", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      
      CategoryPlot categoryPlot0 = new CategoryPlot(categoryDataset0, categoryAxis0, (ValueAxis) periodAxis0, (CategoryItemRenderer) levelRenderer0);
      assertNotNull(categoryPlot0);
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(false, periodAxis0.isInverted());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(8.64E7, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("[", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
  }

  @Test
  public void test40()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertNotNull(statisticalLineAndShapeRenderer0);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      
      Graphics2D graphics2D0 = null;
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertNotNull(defaultCategoryItemRenderer0);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      
      CategoryPlot categoryPlot0 = defaultCategoryItemRenderer0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      
      JComboBox<StandardCategoryURLGenerator> jComboBox0 = new JComboBox<StandardCategoryURLGenerator>();
      assertNotNull(jComboBox0);
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(false, jComboBox0.isShowing());
      
      Rectangle rectangle0 = jComboBox0.bounds();
      assertNotNull(rectangle0);
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      // Undeclared exception!
      try {
        statisticalLineAndShapeRenderer0.drawBackground(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      
      int int0 = 45;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      
      boolean boolean0 = false;
      CategoryURLGenerator categoryURLGenerator0 = statisticalBarRenderer0.getURLGenerator(int0, int0, boolean0);
      assertNull(categoryURLGenerator0);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      
      levelRenderer0.setBaseURLGenerator(categoryURLGenerator0);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test
  public void test42()  throws Throwable  {
      double double0 = 228.19508323322;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0, boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(228.19508323322, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(228.19508323322, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertNull(categoryPlot0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(228.19508323322, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(228.19508323322, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      
      JViewport jViewport0 = new JViewport();
      assertNotNull(jViewport0);
      assertEquals(false, jViewport0.isFocusCycleRoot());
      assertEquals(false, jViewport0.isValid());
      assertEquals(true, jViewport0.isBackgroundSet());
      assertEquals(false, jViewport0.getIgnoreRepaint());
      assertEquals(true, jViewport0.isForegroundSet());
      assertEquals(true, jViewport0.isVisible());
      assertEquals(false, jViewport0.isLightweight());
      assertEquals(false, jViewport0.isDisplayable());
      assertEquals(0, jViewport0.getComponentCount());
      assertEquals(true, jViewport0.isFontSet());
      assertEquals(false, jViewport0.isShowing());
      assertEquals(true, jViewport0.getFocusTraversalKeysEnabled());
      assertEquals(false, jViewport0.isCursorSet());
      assertEquals(false, jViewport0.isPreferredSizeSet());
      assertEquals(0, jViewport0.countComponents());
      assertEquals(false, jViewport0.isMaximumSizeSet());
      assertEquals(false, jViewport0.isFocusTraversalPolicySet());
      assertEquals(false, jViewport0.isMinimumSizeSet());
      assertEquals(true, jViewport0.isEnabled());
      assertEquals(false, jViewport0.isFocusTraversalPolicyProvider());
      
      Rectangle rectangle0 = jViewport0.bounds();
      assertNotNull(rectangle0);
      assertEquals(false, jViewport0.isFocusCycleRoot());
      assertEquals(false, jViewport0.isValid());
      assertEquals(true, jViewport0.isBackgroundSet());
      assertEquals(false, jViewport0.getIgnoreRepaint());
      assertEquals(true, jViewport0.isForegroundSet());
      assertEquals(true, jViewport0.isVisible());
      assertEquals(false, jViewport0.isLightweight());
      assertEquals(false, jViewport0.isDisplayable());
      assertEquals(0, jViewport0.getComponentCount());
      assertEquals(true, jViewport0.isFontSet());
      assertEquals(false, jViewport0.isShowing());
      assertEquals(true, jViewport0.getFocusTraversalKeysEnabled());
      assertEquals(false, jViewport0.isCursorSet());
      assertEquals(false, jViewport0.isPreferredSizeSet());
      assertEquals(0, jViewport0.countComponents());
      assertEquals(false, jViewport0.isMaximumSizeSet());
      assertEquals(false, jViewport0.isFocusTraversalPolicySet());
      assertEquals(false, jViewport0.isMinimumSizeSet());
      assertEquals(true, jViewport0.isEnabled());
      assertEquals(false, jViewport0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      
      // Undeclared exception!
      try {
        groupedStackedBarRenderer0.drawOutline(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineRenderer3D0.getPassCount());
      
      int int0 = 0;
      String string0 = "";
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      assertNotNull(simpleDateFormat0);
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
      
      DecimalFormat decimalFormat0 = (DecimalFormat)simpleDateFormat0.getNumberFormat();
      assertNotNull(decimalFormat0);
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("###0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isGroupingUsed());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
      
      BoxAndWhiskerToolTipGenerator boxAndWhiskerToolTipGenerator0 = new BoxAndWhiskerToolTipGenerator(string0, (NumberFormat) decimalFormat0);
      assertNotNull(boxAndWhiskerToolTipGenerator0);
      assertEquals("", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("###0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isGroupingUsed());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
      
      lineRenderer3D0.setSeriesToolTipGenerator(int0, (CategoryToolTipGenerator) boxAndWhiskerToolTipGenerator0);
      assertEquals("", boxAndWhiskerToolTipGenerator0.getLabelFormat());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("###0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("###0", decimalFormat0.toLocalizedPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isGroupingUsed());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("", simpleDateFormat0.toPattern());
      assertEquals("", simpleDateFormat0.toLocalizedPattern());
  }

  @Test
  public void test44()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      
      int int0 = statisticalBarRenderer0.getPassCount();
      assertEquals(1, int0);
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
  }

  @Test
  public void test45()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertNotNull(levelRenderer0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      
      int int0 = 56;
      String string0 = "[";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) int0, (double) int0, (double) int0);
      assertNotNull(categoryPointerAnnotation0);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("[", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(56.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(56.0, categoryPointerAnnotation0.getValue(), 0.01D);
      
      boolean boolean0 = levelRenderer0.removeAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertFalse(boolean0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("[", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(56.0, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(56.0, categoryPointerAnnotation0.getValue(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 4050;
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0, boolean0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(4050.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(4050.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      
      CategoryURLGenerator categoryURLGenerator0 = groupedStackedBarRenderer0.getURLGenerator(int0, int0, boolean0);
      assertNull(categoryURLGenerator0);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      
      stackedBarRenderer3D0.setSeriesURLGenerator(int0, categoryURLGenerator0);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(4050.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(4050.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
  }

  @Test
  public void test47()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertNotNull(ganttRenderer0);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = null;
      ganttRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
  }

  @Test
  public void test48()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      
      int int0 = scatterRenderer0.hashCode();
      assertEquals((-374931451), int0);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test
  public void test49()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertNotNull(scatterRenderer0);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      
      int int0 = scatterRenderer0.getRowCount();
      assertEquals(0, int0);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertNotNull(lineRenderer3D0);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertNotNull(groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = groupedStackedBarRenderer0.getSeriesItemLabelGenerator(int0);
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      
      lineRenderer3D0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
  }

  @Test
  public void test50()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertNotNull(statisticalBarRenderer0);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = minMaxCategoryRenderer0.getBaseItemLabelGenerator();
      assertNull(categoryItemLabelGenerator0);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      
      statisticalBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
  }
}
