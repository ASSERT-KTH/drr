/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:20:16 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Paint;
import java.awt.TexturePaint;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;

import org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;


public class MultiplePiePlotEvoSuite_branch_Test  {

  @Test
  public void test00()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      CategoryDataset categoryDataset0 = multiplePiePlot0.getDataset();
      assertNull(categoryDataset0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      float float0 = (-3792.9438F);
      multiplePiePlot0.setBackgroundAlpha(float0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals((-3792.9438F), multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot(categoryDataset0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNotNull(multiplePiePlot1);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals((-3792.9438F), multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(boolean0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals((-3792.9438F), multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotNull(multiplePiePlot1);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      
      boolean boolean0 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertTrue(boolean0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
  }

  @Test
  public void test02()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = multiplePiePlot0.equals((Object) byteArray0);
      assertFalse(boolean0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      
      Color color0 = Color.gray;
      assertNotNull(color0);
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      
      multiplePiePlot0.setAggregatedItemsPaint((Paint) color0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotNull(multiplePiePlot1);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      double double0 = (-547.74);
      defaultKeyedValues2DDataset0.addValue(double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      boolean boolean0 = false;
      int int0 = KeyEvent.VK_NUMPAD0;
      assertEquals(96, int0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, legendItemCollection0.getItemCount());
      
      String string0 = "2T";
      Font font0 = PiePlot.DEFAULT_LABEL_FONT;
      assertNotNull(font0);
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertNotNull(bufferedImage0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(96, bufferedImage0.getTileHeight());
      assertEquals(96, bufferedImage0.getHeight());
      assertEquals(96, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(96, bufferedImage0.getWidth());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, font0.getStyle());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isTransformed());
  }

  @Test
  public void test05() {}
//   @Test
//   public void test05()  throws Throwable  {
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
//       assertNotNull(multiplePiePlot0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       
//       double double0 = multiplePiePlot0.getLimit();
//       assertEquals(0.0, double0, 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       
//       DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
//       assertNotNull(defaultKeyedValues2DDataset0);
//       assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       defaultKeyedValues2DDataset0.addValue((Number) double0, (Comparable) double0, (Comparable) double0);
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       
//       float float0 = Component.LEFT_ALIGNMENT;
//       assertEquals(0.0F, float0, 0.01F);
//       
//       defaultKeyedValues2DDataset0.setValue((Number) float0, (Comparable) float0, (Comparable) float0);
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       int int0 = KeyEvent.VK_NUMPAD0;
//       assertEquals(96, int0);
//       
//       defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) year0, (Comparable) int0);
//       assertEquals(3, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(3, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
//       assertNotSame(multiplePiePlot1, multiplePiePlot0);
//       assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
//       assertNotNull(multiplePiePlot1);
//       assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
//       assertEquals(true, multiplePiePlot1.isOutlineVisible());
//       assertNull(multiplePiePlot1.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
//       assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot1.isSubplot());
//       assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
//       assertEquals(3, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(3, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       String string0 = multiplePiePlot1.getNoDataMessage();
//       assertNotSame(multiplePiePlot1, multiplePiePlot0);
//       assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
//       assertNull(string0);
//       assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
//       assertEquals(true, multiplePiePlot1.isOutlineVisible());
//       assertNull(multiplePiePlot1.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
//       assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot1.isSubplot());
//       assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
//       assertEquals(3, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(3, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       Font font0 = PiePlot.DEFAULT_LABEL_FONT;
//       assertNotNull(font0);
//       assertEquals(false, font0.isItalic());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.isBold());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.isTransformed());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot1, boolean0);
//       assertNotSame(multiplePiePlot1, multiplePiePlot0);
//       assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
//       assertNotNull(jFreeChart0);
//       assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
//       assertEquals(true, multiplePiePlot1.isOutlineVisible());
//       assertNull(multiplePiePlot1.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
//       assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot1.isSubplot());
//       assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
//       assertEquals(3, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(3, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(false, font0.isItalic());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.isBold());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(true, font0.isPlain());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test
  public void test06() {}
//   @Test
//   public void test06()  throws Throwable  {
//       DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
//       assertNotNull(defaultKeyedValues2DDataset0);
//       assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
//       
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       
//       int int0 = KeyEvent.VK_NUMPAD0;
//       assertEquals(96, int0);
//       
//       defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) year0, (Comparable) int0);
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
//       assertNotNull(multiplePiePlot0);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       
//       String string0 = multiplePiePlot0.getNoDataMessage();
//       assertNull(string0);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       
//       Font font0 = PiePlot.DEFAULT_LABEL_FONT;
//       assertNotNull(font0);
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.isBold());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(true, font0.isPlain());
//       assertEquals(0, font0.getStyle());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isItalic());
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.isBold());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(true, font0.isPlain());
//       assertEquals(0, font0.getStyle());
//       
//       multiplePiePlot0.setAggregatedItemsKey((Comparable) year0);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(2014, year0.getYear());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test
  public void test07() {}
//   @Test
//   public void test07()  throws Throwable  {
//       DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
//       assertNotNull(defaultKeyedValues2DDataset0);
//       assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
//       assertNotNull(multiplePiePlot0);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       double double0 = (-547.74);
//       defaultKeyedValues2DDataset0.addValue(double0, (Comparable) double0, (Comparable) double0);
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       
//       int int0 = KeyEvent.VK_NUMPAD0;
//       assertEquals(96, int0);
//       
//       defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) year0, (Comparable) int0);
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       assertEquals("2014", year0.toString());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       String string0 = "";
//       Font font0 = PiePlot.DEFAULT_LABEL_FONT;
//       assertNotNull(font0);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isBold());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.isItalic());
//       assertEquals(true, font0.isPlain());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(0, font0.getStyle());
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isBold());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(10, font0.getSize());
//       assertEquals(false, font0.isItalic());
//       assertEquals(true, font0.isPlain());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
//       assertNotNull(defaultKeyedValues2DDataset0);
//       assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
//       
//       double double0 = (-547.74);
//       defaultKeyedValues2DDataset0.addValue(double0, (Comparable) double0, (Comparable) double0);
//       assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
//       
//       boolean boolean0 = false;
//       Year year0 = new Year();
//       assertNotNull(year0);
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       
//       int int0 = KeyEvent.VK_NUMPAD0;
//       assertEquals(96, int0);
//       
//       defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) year0, (Comparable) int0);
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals("2014", year0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(2014, year0.getYear());
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
//       assertNotNull(multiplePiePlot0);
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       
//       String string0 = "2T";
//       Font font0 = PiePlot.DEFAULT_LABEL_FONT;
//       assertNotNull(font0);
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(false, font0.isItalic());
//       assertEquals(true, font0.isPlain());
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.isBold());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(10, font0.getSize());
//       
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(2, defaultKeyedValues2DDataset0.getColumnCount());
//       assertEquals(2, defaultKeyedValues2DDataset0.getRowCount());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(10.0F, font0.getSize2D(), 0.01F);
//       assertEquals(false, font0.isTransformed());
//       assertEquals(false, font0.hasLayoutAttributes());
//       assertEquals(false, font0.isItalic());
//       assertEquals(true, font0.isPlain());
//       assertEquals(0, font0.getStyle());
//       assertEquals(false, font0.hasUniformLineMetrics());
//       assertEquals(false, font0.isBold());
//       assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
//       assertEquals("SansSerif", font0.getName());
//       assertEquals(10, font0.getSize());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test
  public void test09()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      
      String string0 = "}d*wjGaas}&\"Szm+J";
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      assertNotNull(xYBoxAndWhiskerRenderer0);
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      
      int int0 = 1920;
      Font font0 = xYBoxAndWhiskerRenderer0.getItemLabelFont(int0, int0);
      assertNotNull(font0);
      assertEquals(false, font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      
      ChartRenderingInfo chartRenderingInfo0 = null;
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertNotNull(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      ChartRenderingInfo chartRenderingInfo1 = plotRenderingInfo0.getOwner();
      assertNull(chartRenderingInfo1);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, chartRenderingInfo1);
      assertNotNull(bufferedImage0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, font0.isTransformed());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isItalic());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1920, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1920, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(1920, bufferedImage0.getTileHeight());
      assertEquals(1920, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
  }

  @Test
  public void test10()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      Comparable<TexturePaint> comparable0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsKey(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      TableOrder tableOrder0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setDataExtractOrder(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'pieChart' argument must be a chart based on a PiePlot.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      assertNotNull(plotChangeEvent0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      JFreeChart jFreeChart0 = plotChangeEvent0.getChart();
      assertNull(jFreeChart0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      multiplePiePlot0.setPieChart(jFreeChart0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
  }

  @Test
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      Color color0 = (Color)multiplePiePlot0.getAggregatedItemsPaint();
      assertNotNull(color0);
      assertEquals(192, color0.getGreen());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getBlue());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
  }

  @Test
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      double double0 = 1492.385993271287;
      multiplePiePlot0.setLimit(double0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1492.385993271287, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test19()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNotNull(combinedDomainCategoryPlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertNull(categoryDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      assertEquals("Other", comparable0);
      assertNotNull(comparable0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
  }

  @Test
  public void test20()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      String string0 = multiplePiePlot0.getPlotType();
      assertEquals("Multiple Pie Plot", string0);
      assertNotNull(string0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
  }
}
