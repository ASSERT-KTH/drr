/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 07:14:58 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*; import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.MouseEvent;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JColorChooser;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.JScrollBar;



import org.evosuite.runtime.testdata.FileSystemHandling;;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.Drawable;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.annotations.XYShapeAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.block.ColorBlock;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.MiddlePinNeedle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.SamplingXYLineRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextBlock;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;


public class XYPlotEvoSuite_branch_Test  {

  @Test
  public void test000()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertNotNull(timeTableXYDataset0);
      
      String string0 = "h#}Ja+Ak575jhU";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("h#}Ja+Ak575jhU", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      
      int int0 = 6;
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(int0);
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertNotNull(xYAreaRenderer0);
      
      boolean boolean0 = true;
      XYToolTipGenerator xYToolTipGenerator0 = xYAreaRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertNull(xYToolTipGenerator0);
      
      XYURLGenerator xYURLGenerator0 = null;
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(true, xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertNotNull(xYStepRenderer0);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) timeTableXYDataset0, (ValueAxis) dateAxis0, (ValueAxis) dateAxis0, (XYItemRenderer) xYStepRenderer0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("h#}Ja+Ak575jhU", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(true, xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearSelection();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("h#}Ja+Ak575jhU", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(true, xYStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYAreaRenderer0.getPassCount());
  }

  @Test
  public void test001()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test002()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isSubplot());
      assertEquals(false, combinedRangeXYPlot1.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot1.isNotify());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertNotNull(combinedRangeXYPlot1);
  }

  @Test
  public void test003()  throws Throwable  {
      double double0 = 5000000.0;
      boolean boolean0 = false;
      int int0 = 87;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertNotNull(xYSplineRenderer0);
      
      int int1 = 0;
      XYToolTipGenerator xYToolTipGenerator0 = xYSplineRenderer0.getToolTipGenerator(int1, int0, boolean0);
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(xYToolTipGenerator0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(cyclicXYItemRenderer0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertNotNull(numberAxis0);
      
      String string0 = "N)T7&Tv<F";
      NumberAxis numberAxis1 = new NumberAxis(string0);
      assertNotSame(numberAxis1, numberAxis0);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(1.0, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertNotNull(numberAxis1);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) timeSeriesCollection0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis1, (XYItemRenderer) cyclicXYItemRenderer0);
      assertNotSame(numberAxis0, numberAxis1);
      assertNotSame(numberAxis1, numberAxis0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertFalse(numberAxis0.equals((Object)numberAxis1));
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(xYPlot0);
      
      xYPlot0.setDomainAxis(int1, (ValueAxis) numberAxis1);
      assertNotSame(numberAxis0, numberAxis1);
      assertNotSame(numberAxis1, numberAxis0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertFalse(numberAxis0.equals((Object)numberAxis1));
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test004()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      double double0 = (-1.5707963267948966);
      PlotRenderingInfo plotRenderingInfo0 = null;
      JScrollBar jScrollBar0 = new JScrollBar();
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertNotNull(jScrollBar0);
      
      int int0 = 783;
      int int1 = 0;
      MouseEvent mouseEvent0 = new MouseEvent((Component) jScrollBar0, int0, (long) int0, int0, int0, int0, int1, boolean0, int1);
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(783, mouseEvent0.getY());
      assertEquals(783, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(15, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals("java.awt.event.MouseEvent[unknown type,(783,783),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Shift+Button2+Button3,extModifiers=Meta+Alt,clickCount=0] on javax.swing.JScrollBar[,0,0,0x0,invalid,layout=javax.swing.plaf.metal.MetalScrollBarUI,alignmentX=0.0,alignmentY=0.0,border=,flags=4194632,maximumSize=,minimumSize=,preferredSize=,blockIncrement=10,orientation=VERTICAL,unitIncrement=1]", mouseEvent0.toString());
      assertEquals(783, mouseEvent0.getID());
      assertEquals(783L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mouseEvent0);
      
      Point point0 = jScrollBar0.getToolTipLocation(mouseEvent0);
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(783, mouseEvent0.getY());
      assertEquals(783, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(15, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals("java.awt.event.MouseEvent[unknown type,(783,783),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Shift+Button2+Button3,extModifiers=Meta+Alt,clickCount=0] on javax.swing.JScrollBar[,0,0,0x0,invalid,layout=javax.swing.plaf.metal.MetalScrollBarUI,alignmentX=0.0,alignmentY=0.0,border=,flags=4194632,maximumSize=,minimumSize=,preferredSize=,blockIncrement=10,orientation=VERTICAL,unitIncrement=1]", mouseEvent0.toString());
      assertEquals(783, mouseEvent0.getID());
      assertEquals(783L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(point0);
      
      combinedDomainXYPlot0.zoomDomainAxes(double0, double0, plotRenderingInfo0, (Point2D) point0);
      assertEquals(false, mouseEvent0.isConsumed());
      assertEquals(783, mouseEvent0.getY());
      assertEquals(783, mouseEvent0.getX());
      assertEquals(false, mouseEvent0.isPopupTrigger());
      assertEquals(0, mouseEvent0.getButton());
      assertEquals(true, mouseEvent0.isControlDown());
      assertEquals(true, mouseEvent0.isMetaDown());
      assertEquals(0, mouseEvent0.getXOnScreen());
      assertEquals(true, mouseEvent0.isAltDown());
      assertEquals(0, mouseEvent0.getClickCount());
      assertEquals(true, mouseEvent0.isShiftDown());
      assertEquals(15, mouseEvent0.getModifiers());
      assertEquals(0, mouseEvent0.getYOnScreen());
      assertEquals("java.awt.event.MouseEvent[unknown type,(783,783),absolute(0,0),button=0,modifiers=Alt+Meta+Ctrl+Shift+Button2+Button3,extModifiers=Meta+Alt,clickCount=0] on javax.swing.JScrollBar[,0,0,0x0,invalid,layout=javax.swing.plaf.metal.MetalScrollBarUI,alignmentX=0.0,alignmentY=0.0,border=,flags=4194632,maximumSize=,minimumSize=,preferredSize=,blockIncrement=10,orientation=VERTICAL,unitIncrement=1]", mouseEvent0.toString());
      assertEquals(783, mouseEvent0.getID());
      assertEquals(783L, mouseEvent0.getWhen());
      assertEquals(false, mouseEvent0.isAltGraphDown());
      assertEquals(true, jScrollBar0.getFocusTraversalKeysEnabled());
      assertEquals(true, jScrollBar0.isForegroundSet());
      assertEquals(false, jScrollBar0.isFocusCycleRoot());
      assertEquals(false, jScrollBar0.isLightweight());
      assertEquals(false, jScrollBar0.isShowing());
      assertEquals(true, jScrollBar0.isEnabled());
      assertEquals(false, jScrollBar0.isMinimumSizeSet());
      assertEquals(false, jScrollBar0.isDisplayable());
      assertEquals(false, jScrollBar0.isMaximumSizeSet());
      assertEquals(false, jScrollBar0.isValid());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicySet());
      assertEquals(false, jScrollBar0.isCursorSet());
      assertEquals(false, jScrollBar0.getIgnoreRepaint());
      assertEquals(true, jScrollBar0.isVisible());
      assertEquals(2, jScrollBar0.countComponents());
      assertEquals(2, jScrollBar0.getComponentCount());
      assertEquals(false, jScrollBar0.isFocusTraversalPolicyProvider());
      assertEquals(false, jScrollBar0.isPreferredSizeSet());
      assertEquals(false, jScrollBar0.isFontSet());
      assertEquals(true, jScrollBar0.isBackgroundSet());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test005()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedDomainAxisSpace();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(axisSpace0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
  }

  @Test
  public void test006()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = null;
      boolean boolean0 = false;
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test007()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test008()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
  }

  @Test
  public void test009()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test010()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test011()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeGridlinesVisible();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertTrue(boolean0);
      
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test
  public void test012()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)MeterPlot.DEFAULT_NEEDLE_PAINT;
      assertEquals(-16711936, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setDomainCrosshairPaint((Paint) color0);
      assertEquals(-16711936, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.canSelectByPoint();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test
  public void test014()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
  }

  @Test
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test016()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) combinedDomainXYPlot0);
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(rendererChangeEvent0);
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test
  public void test017()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(fastScatterPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getRangeAxis();
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(numberAxis0);
      
      valueAxisArray0[0] = (ValueAxis) numberAxis0;
      assertEquals("Y", valueAxisArray0[0].getLabel());
      assertEquals(0.0F, valueAxisArray0[0].getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, valueAxisArray0[0].isVerticalTickLabels());
      assertEquals(true, valueAxisArray0[0].isAutoTickUnitSelection());
      assertEquals(0.05, valueAxisArray0[0].getUpperMargin(), 0.01D);
      assertEquals(0.0F, valueAxisArray0[0].getTickMarkInsideLength(), 0.01F);
      assertNull(valueAxisArray0[0].getLabelToolTip());
      assertEquals(true, valueAxisArray0[0].isVisible());
      assertEquals(0.0, valueAxisArray0[0].getLowerBound(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isMinorTickMarksVisible());
      assertEquals(false, valueAxisArray0[0].isNegativeArrowVisible());
      assertEquals(true, valueAxisArray0[0].isTickLabelsVisible());
      assertEquals(true, valueAxisArray0[0].isTickMarksVisible());
      assertEquals(1.05, valueAxisArray0[0].getUpperBound(), 0.01D);
      assertEquals(true, valueAxisArray0[0].isAxisLineVisible());
      assertEquals(2.0F, valueAxisArray0[0].getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, valueAxisArray0[0].getMinorTickCount());
      assertEquals(true, valueAxisArray0[0].isAutoRange());
      assertEquals(false, valueAxisArray0[0].isInverted());
      assertEquals(0.0, valueAxisArray0[0].getFixedDimension(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getLowerMargin(), 0.01D);
      assertEquals(1.0E-8, valueAxisArray0[0].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, valueAxisArray0[0].getFixedAutoRange(), 0.01D);
      assertNull(valueAxisArray0[0].getLabelURL());
      assertEquals(2.0F, valueAxisArray0[0].getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, valueAxisArray0[0].isPositiveArrowVisible());
      assertEquals(0.0, valueAxisArray0[0].getLabelAngle(), 0.01D);
      assertEquals("Y", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isNotify());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(valueAxisArray0[0]);
      
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
  }

  @Test
  public void test018()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isNotify());
      assertNotNull(xYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[8];
      int int0 = 0;
      String string0 = "Mn4";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0, string0);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals("Mn4", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      valueAxisArray0[3] = (ValueAxis) cyclicNumberAxis0;
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals("Mn4", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals("Mn4", valueAxisArray0[3].getLabel());
      assertEquals(true, valueAxisArray0[3].isTickMarksVisible());
      assertEquals(1.0E-8, valueAxisArray0[3].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, valueAxisArray0[3].getFixedDimension(), 0.01D);
      assertEquals(false, valueAxisArray0[3].isVerticalTickLabels());
      assertEquals(true, valueAxisArray0[3].isAutoRange());
      assertEquals(0.0, valueAxisArray0[3].getLabelAngle(), 0.01D);
      assertEquals(0.0, valueAxisArray0[3].getFixedAutoRange(), 0.01D);
      assertEquals(0.0, valueAxisArray0[3].getLowerBound(), 0.01D);
      assertEquals(0.05, valueAxisArray0[3].getLowerMargin(), 0.01D);
      assertEquals(false, valueAxisArray0[3].isMinorTickMarksVisible());
      assertEquals(0.0F, valueAxisArray0[3].getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, valueAxisArray0[3].getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[3].isAxisLineVisible());
      assertEquals(false, valueAxisArray0[3].isInverted());
      assertNull(valueAxisArray0[3].getLabelURL());
      assertEquals(0.05, valueAxisArray0[3].getUpperMargin(), 0.01D);
      assertEquals(0, valueAxisArray0[3].getMinorTickCount());
      assertEquals(1.0, valueAxisArray0[3].getUpperBound(), 0.01D);
      assertEquals(false, valueAxisArray0[3].isPositiveArrowVisible());
      assertEquals(false, valueAxisArray0[3].isNegativeArrowVisible());
      assertEquals(2.0F, valueAxisArray0[3].getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxisArray0[3].getMinorTickMarkInsideLength(), 0.01F);
      assertNull(valueAxisArray0[3].getLabelToolTip());
      assertEquals(true, valueAxisArray0[3].isAutoTickUnitSelection());
      assertEquals(true, valueAxisArray0[3].isTickLabelsVisible());
      assertEquals(true, valueAxisArray0[3].isVisible());
      assertNotNull(valueAxisArray0[3]);
      
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isNotify());
  }

  @Test
  public void test019()  throws Throwable  {
      int int0 = 6;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(int0, layer0);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(collection0);
  }

  @Test
  public void test020()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(collection0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(valueAxis0);
  }

  @Test
  public void test022()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertNotNull(categoryStepRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)categoryStepRenderer0.getBaseShape();
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertNotNull(rectangle2D_Double0);
      
      XYShapeAnnotation xYShapeAnnotation0 = new XYShapeAnnotation((Shape) rectangle2D_Double0);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertNotNull(xYShapeAnnotation0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYShapeAnnotation0, boolean0);
      assertEquals((-3.0), rectangle2D_Double0.y, 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.x, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(6.0, rectangle2D_Double0.height, 0.01D);
      assertNull(xYShapeAnnotation0.getToolTipText());
      assertNull(xYShapeAnnotation0.getURL());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-3.0), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(3.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test
  public void test023()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      combinedRangeXYPlot0.clearRangeMarkers(int0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      boolean boolean0 = false;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = (-1055);
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addRangeMarker(int0, (Marker) categoryMarker0, layer0, boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
  }

  @Test
  public void test025()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      JPopupMenu.Separator jPopupMenu_Separator0 = new JPopupMenu.Separator();
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertNotNull(jPopupMenu_Separator0);
      
      Rectangle rectangle0 = jPopupMenu_Separator0.getBounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertNotNull(rectangle0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) rectangle0.height);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertNotNull(valueMarker0);
      
      Layer layer0 = null;
      combinedRangeXYPlot0.addRangeMarker((Marker) valueMarker0, layer0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(true, jPopupMenu_Separator0.isBackgroundSet());
      assertEquals(false, jPopupMenu_Separator0.isCursorSet());
      assertEquals(false, jPopupMenu_Separator0.isShowing());
      assertEquals(false, jPopupMenu_Separator0.isDisplayable());
      assertEquals(false, jPopupMenu_Separator0.isPreferredSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isValid());
      assertEquals(true, jPopupMenu_Separator0.isEnabled());
      assertEquals(false, jPopupMenu_Separator0.getIgnoreRepaint());
      assertEquals(true, jPopupMenu_Separator0.isForegroundSet());
      assertEquals(true, jPopupMenu_Separator0.isVisible());
      assertEquals(false, jPopupMenu_Separator0.isMinimumSizeSet());
      assertEquals(false, jPopupMenu_Separator0.isFontSet());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicySet());
      assertEquals(0, jPopupMenu_Separator0.countComponents());
      assertEquals(false, jPopupMenu_Separator0.isFocusCycleRoot());
      assertEquals(0, jPopupMenu_Separator0.getComponentCount());
      assertEquals(true, jPopupMenu_Separator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jPopupMenu_Separator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jPopupMenu_Separator0.isLightweight());
      assertEquals(false, jPopupMenu_Separator0.isMaximumSizeSet());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
  }

  @Test
  public void test026()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearRangeMarkers();
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test027()  throws Throwable  {
      double double0 = 5000000.0;
      boolean boolean0 = false;
      int int0 = 87;
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer();
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(xYSplineRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYSplineRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(xYToolTipGenerator0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(cyclicXYItemRenderer0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)SegmentedTimeline.NO_DST_TIME_ZONE;
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) simpleTimeZone0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(timeSeriesCollection0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) double0);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNotNull(numberAxis0);
      
      String string0 = "N)T7&Tv<F";
      NumberAxis numberAxis1 = new NumberAxis(string0);
      assertNotSame(numberAxis1, numberAxis0);
      assertNull(numberAxis1.getLabelURL());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, numberAxis1.getUpperBound(), 0.01D);
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertNotNull(numberAxis1);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) timeSeriesCollection0, (ValueAxis) numberAxis0, (ValueAxis) numberAxis1, (XYItemRenderer) cyclicXYItemRenderer0);
      assertNotSame(numberAxis1, numberAxis0);
      assertNotSame(numberAxis0, numberAxis1);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(1.05, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertFalse(numberAxis0.equals((Object)numberAxis1));
      assertNotNull(xYPlot0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Color color0 = (Color)boxAndWhiskerRenderer0.getBaseOutlinePaint();
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertNotNull(color0);
      
      MiddlePinNeedle middlePinNeedle0 = new MiddlePinNeedle();
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01D);
      assertEquals(5, middlePinNeedle0.getSize());
      assertNotNull(middlePinNeedle0);
      
      BasicStroke basicStroke0 = (BasicStroke)middlePinNeedle0.getOutlineStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01D);
      assertEquals(5, middlePinNeedle0.getSize());
      assertNotNull(basicStroke0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01D);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = xYPlot0.removeDomainMarker(int0, (Marker) categoryMarker0, layer0, boolean0);
      assertNotSame(numberAxis1, numberAxis0);
      assertNotSame(numberAxis0, numberAxis1);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis1.isInverted());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertEquals("N)T7&Tv<F", numberAxis1.getLabel());
      assertEquals(1.05, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals("UTC-0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=UTC-0,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5, middlePinNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, middlePinNeedle0.getRotateY(), 0.01D);
      assertEquals(5, middlePinNeedle0.getSize());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(5, xYSplineRenderer0.getPrecision());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertFalse(numberAxis1.equals((Object)numberAxis0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(numberAxis0.equals((Object)numberAxis1));
      assertFalse(boolean1);
  }

  @Test
  public void test028()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      combinedRangeXYPlot0.addDomainMarker((Marker) valueMarker0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test029()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      combinedRangeXYPlot0.clearDomainMarkers(int0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
  }

  @Test
  public void test030()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearDomainMarkers();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
  }

  @Test
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 1268;
      // Undeclared exception!
      try {
        Paint paint0 = combinedDomainXYPlot0.getQuadrantPaint(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The index value (1268) should be in the range 0 to 3.
         //
      }
  }

  @Test
  public void test032()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2;
      Paint paint0 = combinedDomainXYPlot0.getQuadrantPaint(int0);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(paint0);
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(xYLine3DRenderer0);
      
      int int0 = (-2424);
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)xYLine3DRenderer0.getItemStroke(int0, int0, boolean0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setRangeZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test034()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(meterPlot0);
      
      Color color0 = (Color)meterPlot0.getNeedlePaint();
      assertEquals(false, meterPlot0.getDrawBorder());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, meterPlot0.getDrawBorder());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16711936, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
  }

  @Test
  public void test035()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(int0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getAutoPopulateSectionPaint());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isNotify());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getAutoPopulateSectionOutlinePaint());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
  }

  @Test
  public void test036()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      int int0 = 3;
      BasicStroke basicStroke0 = (BasicStroke)groupedStackedBarRenderer0.lookupSeriesStroke(int0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setRangeMinorGridlineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, groupedStackedBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test
  public void test037()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = false;
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
  }

  @Test
  public void test038()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      JColorChooser jColorChooser0 = new JColorChooser();
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertNotNull(jColorChooser0);
      
      Color color0 = jColorChooser0.getColor();
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
  }

  @Test
  public void test039()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setRangeGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
  }

  @Test
  public void test040()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset();
      assertNotNull(defaultValueDataset0);
      
      MeterPlot meterPlot0 = new MeterPlot((ValueDataset) defaultValueDataset0);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertNotNull(meterPlot0);
      
      Color color0 = (Color)meterPlot0.getNeedlePaint();
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainMinorGridlinePaint((Paint) color0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(true, meterPlot0.isNotify());
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, meterPlot0.isSubplot());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(-16711936, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=255,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
  }

  @Test
  public void test041()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "org.jfree.data.category.CategoryToPieDataset";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNotNull(logarithmicAxis0);
      
      BasicStroke basicStroke0 = (BasicStroke)logarithmicAxis0.getAxisLineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainGridlineStroke((Stroke) basicStroke0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
  }

  @Test
  public void test042()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainMinorGridlinesVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
  }

  @Test
  public void test043()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.canSelectByRegion();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertTrue(boolean0);
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[9];
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) boolean0, oHLCDataItemArray0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRendererForDataset((XYDataset) defaultOHLCDataset0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNull(xYItemRenderer0);
  }

  @Test
  public void test045()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainCategoryPlot0.getDatasetRenderingOrder();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test
  public void test046()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      SamplingXYLineRenderer samplingXYLineRenderer0 = new SamplingXYLineRenderer();
      assertEquals(true, samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(false, samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(samplingXYLineRenderer0);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[4];
      xYItemRendererArray0[0] = (XYItemRenderer) samplingXYLineRenderer0;
      assertEquals(true, samplingXYLineRenderer0.getBaseCreateEntities());
      assertEquals(3, samplingXYLineRenderer0.getDefaultEntityRadius());
      assertEquals(1, samplingXYLineRenderer0.getPassCount());
      assertEquals(false, samplingXYLineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, samplingXYLineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, samplingXYLineRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, samplingXYLineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, samplingXYLineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, samplingXYLineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, samplingXYLineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisible());
      assertEquals(1, xYItemRendererArray0[0].getPassCount());
      assertEquals(false, xYItemRendererArray0[0].getBaseItemLabelsVisible());
      assertEquals(true, xYItemRendererArray0[0].getBaseSeriesVisibleInLegend());
      assertEquals(true, xYItemRendererArray0[0].getBaseCreateEntities());
      assertNotNull(xYItemRendererArray0[0]);
      
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      
      combinedRangeXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
  }

  @Test
  public void test047()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 1079;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer();
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(cyclicXYItemRenderer0);
      
      combinedRangeXYPlot0.setRenderer(int0, (XYItemRenderer) cyclicXYItemRenderer0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test048()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeMinorGridlinesVisible();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(boolean0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNotNull(defaultTableXYDataset0);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals((-1), int0);
  }

  @Test
  public void test049()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 6;
      combinedDomainXYPlot0.setDataset(int0, (XYDataset) defaultXYDataset0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "nxP`H'!aO}Z#~'6";
      int int0 = 6;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0, string0);
      assertEquals(6.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals("nxP`H'!aO}Z#~'6", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(6.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(6.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(6.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals("nxP`H'!aO}Z#~'6", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(6.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-5.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(6.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(6.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals("nxP`H'!aO}Z#~'6", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(6.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals((-5.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(6.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test051()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test052()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "h#}Ja+Ak575jhU";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      DateAxis dateAxis0 = new DateAxis(string0, (TimeZone) zoneInfo0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("h#}Ja+Ak575jhU", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[2];
      valueAxisArray0[1] = (ValueAxis) dateAxis0;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, valueAxisArray0[1].isAutoRange());
      assertEquals(0.0, valueAxisArray0[1].getFixedDimension(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isNegativeArrowVisible());
      assertEquals(0.0F, valueAxisArray0[1].getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, valueAxisArray0[1].getLowerMargin(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isPositiveArrowVisible());
      assertEquals(0.0F, valueAxisArray0[1].getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[1].getLowerBound(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isTickMarksVisible());
      assertEquals(2.0F, valueAxisArray0[1].getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, valueAxisArray0[1].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, valueAxisArray0[1].isInverted());
      assertEquals(2.0F, valueAxisArray0[1].getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[1].isVisible());
      assertEquals(0, valueAxisArray0[1].getMinorTickCount());
      assertEquals("h#}Ja+Ak575jhU", valueAxisArray0[1].getLabel());
      assertEquals(0.0, valueAxisArray0[1].getFixedAutoRange(), 0.01D);
      assertEquals(1.0, valueAxisArray0[1].getUpperBound(), 0.01D);
      assertEquals(0.0, valueAxisArray0[1].getLabelAngle(), 0.01D);
      assertEquals(true, valueAxisArray0[1].isAutoTickUnitSelection());
      assertEquals(true, valueAxisArray0[1].isTickLabelsVisible());
      assertEquals(false, valueAxisArray0[1].isVerticalTickLabels());
      assertEquals(true, valueAxisArray0[1].isAxisLineVisible());
      assertEquals(false, valueAxisArray0[1].isMinorTickMarksVisible());
      assertEquals(0.05, valueAxisArray0[1].getUpperMargin(), 0.01D);
      assertNull(valueAxisArray0[1].getLabelToolTip());
      assertNull(valueAxisArray0[1].getLabelURL());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("h#}Ja+Ak575jhU", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertNotNull(valueAxisArray0[1]);
      
      combinedRangeXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test054()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNotNull(combinedRangeXYPlot0);
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertNotNull(numberAxis3D0);
      
      combinedRangeXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
  }

  @Test
  public void test055()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertNull(valueAxis0);
      
      combinedRangeXYPlot0.setRangeAxis(valueAxis0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test056()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      AxisSpace axisSpace0 = null;
      // Undeclared exception!
      try {
        AxisSpace axisSpace1 = combinedDomainXYPlot0.calculateDomainAxisSpace(graphics2D0, rectangle2D0, axisSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      int int0 = 6;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertNotNull(combinedDomainCategoryPlot0);
      
      AxisLocation axisLocation0 = combinedDomainCategoryPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabel());
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = 6;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(int0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test059()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearDomainAxes();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test
  public void test060()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test061()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[5];
      combinedRangeXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test062()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(true, piePlot3D0.isNotify());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(piePlot3D0);
      
      RectangleInsets rectangleInsets0 = piePlot3D0.getLabelPadding();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(true, piePlot3D0.isNotify());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlinePaint());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getAutoPopulateSectionOutlineStroke());
      assertEquals(true, piePlot3D0.getAutoPopulateSectionPaint());
      assertEquals(true, piePlot3D0.isNotify());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "org.jfree.data.category.CategoryToPieDataset";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) logarithmicAxis0);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "org.jfree.data.category.CategoryToPieDataset";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) logarithmicAxis0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainZeroBaselineVisible(boolean0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
  }

  @Test
  public void test066()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test067()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation();
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, boolean0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "nxP`H'!aO}Z#~'6";
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      Graphics2D graphics2D0 = null;
      JMenu jMenu0 = new JMenu(string0);
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertNotNull(jMenu0);
      
      Rectangle rectangle0 = jMenu0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertNotNull(rectangle0);
      
      TextBlock textBlock0 = new TextBlock();
      assertNotNull(textBlock0);
      
      List list0 = textBlock0.getLines();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      combinedDomainXYPlot0.drawDomainTickBands(graphics2D0, (Rectangle2D) rectangle0, (List) list0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, jMenu0.countComponents());
      assertEquals(false, jMenu0.isFocusTraversalPolicyProvider());
      assertEquals(true, jMenu0.isVisible());
      assertEquals(true, jMenu0.getFocusTraversalKeysEnabled());
      assertEquals(true, jMenu0.isForegroundSet());
      assertEquals(false, jMenu0.getIgnoreRepaint());
      assertEquals(false, jMenu0.isFocusCycleRoot());
      assertEquals(true, jMenu0.isEnabled());
      assertEquals(false, jMenu0.isFocusTraversalPolicySet());
      assertEquals(false, jMenu0.isShowing());
      assertEquals(true, jMenu0.isFontSet());
      assertEquals(false, jMenu0.isPreferredSizeSet());
      assertEquals(true, jMenu0.isBackgroundSet());
      assertEquals(false, jMenu0.isValid());
      assertEquals(false, jMenu0.isCursorSet());
      assertEquals(false, jMenu0.isMaximumSizeSet());
      assertEquals(false, jMenu0.isDisplayable());
      assertEquals(false, jMenu0.isLightweight());
      assertEquals(false, jMenu0.isMinimumSizeSet());
      assertEquals(0, jMenu0.getComponentCount());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
  }

  @Test
  public void test069()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainMinorGridlinesVisible();
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      List list0 = combinedDomainXYPlot0.getAnnotations();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test071()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZoomable();
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertNotNull(numberTickUnit0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) numberTickUnit0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertNotNull(categoryMarker0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeRangeMarker((Marker) categoryMarker0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(color0);
  }

  @Test
  public void test074()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      ColorBlock colorBlock0 = new ColorBlock((Paint) color0, (double) int0, (double) int0);
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNotNull(colorBlock0);
      
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation((double) int0, (double) int0, (double) int0, (double) int0, (Drawable) colorBlock0);
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertNotNull(xYDrawableAnnotation0);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0);
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, colorBlock0.getHeight(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, colorBlock0.getContentXOffset(), 0.01D);
      assertNull(colorBlock0.getID());
      assertEquals(0.0, colorBlock0.getWidth(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeZeroBaselineVisible();
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isInverted());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(seriesRenderingOrder0);
  }

  @Test
  public void test077()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedDomainXYPlot0.getQuadrantOrigin();
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(point2D_Double0);
  }

  @Test
  public void test078()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNotNull(numberAxis3D0);
      
      boolean boolean0 = numberAxis3D0.isAxisLineVisible();
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertTrue(boolean0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNotNull(combinedRangeXYPlot0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNotNull(categoryMarker0);
      
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
  }

  @Test
  public void test079()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangePannable());
      assertEquals(false, combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot1.isNotify());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertNotNull(combinedDomainXYPlot1);
  }

  @Test
  public void test080()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getDomainMarkers(layer0);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test081()  throws Throwable  {
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNotNull(numberAxis3D0);
      
      double double0 = 0.0;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Point point0 = defaultListCellRenderer_UIResource0.getLocation();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(point0);
      
      Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point0, (Point2D) point0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(line2D_Double0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      Color color0 = (Color)Axis.DEFAULT_AXIS_LINE_PAINT;
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      XYLineAnnotation xYLineAnnotation0 = new XYLineAnnotation(line2D_Double0.x2, double0, rectangle2D_Double0.y, double0, (Stroke) basicStroke0, (Paint) color0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertNotNull(xYLineAnnotation0);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYLineAnnotation0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertNull(numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNull(xYLineAnnotation0.getURL());
      assertNull(xYLineAnnotation0.getToolTipText());
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
  }

  @Test
  public void test082()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangePannable(boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
  }

  @Test
  public void test083()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainGridlineStroke();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test084()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainCrosshairLockedOnData();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertTrue(boolean0);
  }

  @Test
  public void test085()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getRangeAxisCount();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, int0);
  }

  @Test
  public void test086()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      double double0 = combinedRangeXYPlot0.getDomainCrosshairValue();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test087()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "org.jfree.data.category.CategoryToPieDataset";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(logarithmicAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) logarithmicAxis0);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getDomainAxisEdge();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals("org.jfree.data.category.CategoryToPieDataset", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelURL());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test089()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 3;
      combinedDomainXYPlot0.setRangeAxis(int0, valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, string0);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = (-1446);
      combinedDomainXYPlot0.setWeight(int0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(-1446, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
  }

  @Test
  public void test091()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedDomainXYPlot0.getRenderer();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(xYItemRenderer0);
  }

  @Test
  public void test092()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNotNull(color0);
  }

  @Test
  public void test093()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedRangeXYPlot0.getRangeMarkers(layer0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test094()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0, int0);
  }

  @Test
  public void test095()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = combinedRangeXYPlot0.getWeight();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = combinedRangeXYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertFalse(boolean0);
  }

  @Test
  public void test097()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
  }

  @Test
  public void test098()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 0;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addRangeMarker(int0, (Marker) intervalMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
  }

  @Test
  public void test099()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      combinedDomainXYPlot0.setRangeCrosshairValue((double) int0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test
  public void test100()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 1366.284028;
      combinedDomainXYPlot0.setDomainCrosshairValue(double0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1366.284028, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test
  public void test101()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 1636;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertEquals(1636.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1636.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedDomainXYPlot0.addDomainMarker(int0, (Marker) intervalMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(1636.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(1636.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test103()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      XYDataset xYDataset0 = null;
      combinedRangeXYPlot0.setDataset(xYDataset0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertTrue(boolean0);
  }

  @Test
  public void test105()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test106()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNotNull(combinedRangeXYPlot0);
      
      String string0 = "";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(jFreeChart0);
      
      int int0 = 255;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(255, bufferedImage0.getHeight());
      assertEquals(255, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(255, bufferedImage0.getTileHeight());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(255, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertNotNull(bufferedImage0);
  }
}
